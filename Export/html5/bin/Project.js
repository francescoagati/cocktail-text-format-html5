(function (console, $hx_exports) { "use strict";
$hx_exports.openfl = $hx_exports.openfl || {};
$hx_exports.lime = $hx_exports.lime || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = true;
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new lime_app_Application();
	app.create(ApplicationMain.config);
	openfl_Lib.application = app;
	var stage = new openfl_display_Stage(app.windows[0].__width,app.windows[0].__height,ApplicationMain.config.background);
	stage.addChild(openfl_Lib.current);
	app.addModule(stage);
	var display = new NMEPreloader();
	ApplicationMain.preloader = new openfl_display_Preloader(display);
	ApplicationMain.preloader.onComplete = ApplicationMain.init;
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("assets/serif.woff");
	types.push("BINARY");
	urls.push("assets/serif.eot");
	types.push("BINARY");
	urls.push("assets/haxe.png");
	types.push("IMAGE");
	urls.push("assets/serif.svg");
	types.push("TEXT");
	urls.push("Katamotz Ikasi");
	types.push("FONT");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
	var result = app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};
	ApplicationMain.preloader = null;
	if(loaded == total) ApplicationMain.start();
};
ApplicationMain.main = function() {
	ApplicationMain.config = { antialiasing : 0, background : 0, borderless : false, company : "Company Name", depthBuffer : false, file : "Project", fps : 60, fullscreen : false, hardware : true, height : 600, orientation : "", packageName : "com.sample.project", resizable : true, stencilBuffer : true, title : "Project", version : "1.0.0", vsync : false, width : 800};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("Main");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	lime_Assets.initialize();
	if(hasMain) Reflect.callMethod(entryPoint,Reflect.field(entryPoint,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
	}
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event(openfl_events_Event.RESIZE,false,false));
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = true;
var openfl_events_EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = true;
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl_events_EventDispatcher.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) {
			this.__dispatching = new haxe_ds_StringMap();
			this.__eventMap = new haxe_ds_StringMap();
			this.__newEventMap = new haxe_ds_StringMap();
		}
		if(!this.__eventMap.exists(type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1;
			if(this.__dispatching.get(type) == true) {
				if(!this.__newEventMap.exists(type)) {
					var _this = this.__eventMap.get(type);
					list1 = _this.slice();
					this.__newEventMap.set(type,list1);
				} else list1 = this.__newEventMap.get(type);
			} else list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) return;
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var type = event.type;
		var list = this.__eventMap.get(type);
		if(list == null) return false;
		this.__dispatching.set(type,true);
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == openfl_events_EventPhase.CAPTURING_PHASE;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCancelledNow) break;
			}
			if(listener == list[index]) index++;
		}
		if(this.__newEventMap != null && this.__newEventMap.exists(type)) {
			var list1 = this.__newEventMap.get(type);
			if(list1.length > 0) this.__eventMap.set(type,list1); else this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			}
			this.__newEventMap.remove(type);
		}
		this.__dispatching.set(event.type,false);
		return true;
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,capture) {
		if(capture == null) capture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		if(this.__dispatching.get(type) == true) {
			if(!this.__newEventMap.exists(type)) {
				var _this = this.__eventMap.get(type);
				list = _this.slice();
				this.__newEventMap.set(type,list);
			} else list = this.__newEventMap.get(type);
		}
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,capture)) {
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) this.__eventMap.remove(type);
		if(!this.__eventMap.iterator().hasNext()) {
			this.__eventMap = null;
			this.__newEventMap = null;
		}
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = true;
openfl_display_IBitmapDrawable.prototype = {
	__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	this.__cacheAsBitmap = false;
	this.__maskCached = false;
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__rotation = 0;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__visible = true;
	this.__x = 0;
	this.__y = 0;
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__rotationCache = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = true;
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.dispatchEvent.call(this,event);
		if(event.__isCancelled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
			if(event.target == null) event.target = this;
			this.parent.dispatchEvent(event);
		}
		return result;
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = this.__getTransform();
		if(targetCoordinateSpace != null) {
			matrix = new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			matrix.concat(targetCoordinateSpace.__worldTransform.clone().invert());
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,globalToLocal: function(pos) {
		return this.__getTransform().clone().invert().transformPoint(pos);
	}
	,localToGlobal: function(point) {
		return this.__getTransform().transformPoint(point);
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.dispatchEvent.call(this,event);
			if(event.__isCancelled) return true;
			return result;
		}
		return false;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix);
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) this.__update(true,false);
			} else while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(this.__graphics != null) {
			if(this.get_visible() && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
				if(!interactiveOnly) stack.push(this);
				return true;
			}
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoShape.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasShape.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_dom_DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(this.get_rotation() != this.__rotationCache) {
			this.__rotationCache = this.get_rotation();
			var radians = this.get_rotation() * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
		}
		var sr = this.get_scrollRect();
		if(this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var a00 = this.__rotationCosine * this.get_scaleX();
			var a01 = this.__rotationSine * this.get_scaleX();
			var a10 = -this.__rotationSine * this.get_scaleY();
			var a11 = this.__rotationCosine * this.get_scaleY();
			var b00 = parentTransform.a;
			var b01 = parentTransform.b;
			var b10 = parentTransform.c;
			var b11 = parentTransform.d;
			if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
			this.__worldTransform.a = a00 * b00 + a01 * b10;
			this.__worldTransform.b = a00 * b01 + a01 * b11;
			this.__worldTransform.c = a10 * b00 + a11 * b10;
			this.__worldTransform.d = a10 * b01 + a11 * b11;
			this.__worldTransform.tx = this.get_x() * b00 + this.get_y() * b10 + parentTransform.tx;
			this.__worldTransform.ty = this.get_x() * b01 + this.get_y() * b11 + parentTransform.ty;
			if(sr != null) {
				if(this.__worldTransform.a != 1 || this.__worldTransform.b != 0 || this.__worldTransform.c != 0 || this.__worldTransform.d != 1) sr = sr.transform(this.__worldTransform);
				this.__worldTransform.tx = (this.get_x() - sr.x) * b00 + (this.get_y() - sr.y) * b10 + parentTransform.tx;
				this.__worldTransform.ty = (this.get_x() - sr.x) * b01 + (this.get_y() - sr.y) * b11 + parentTransform.ty;
			}
			if(this.__isMask) this.__maskCached = false;
		} else {
			this.__worldTransform.a = this.__rotationCosine * this.get_scaleX();
			this.__worldTransform.c = -this.__rotationSine * this.get_scaleY();
			this.__worldTransform.b = this.__rotationSine * this.get_scaleX();
			this.__worldTransform.d = this.__rotationCosine * this.get_scaleY();
			this.__worldTransform.tx = this.get_x();
			this.__worldTransform.ty = this.get_y();
			if(sr != null) {
				if(this.__worldTransform.a != 1 || this.__worldTransform.b != 0 || this.__worldTransform.c != 0 || this.__worldTransform.d != 1) sr = sr.transform(this.__worldTransform);
				this.__worldTransform.tx = this.get_x() - this.get_scrollRect().x;
				this.__worldTransform.ty = this.get_y() - this.get_scrollRect().y;
			}
		}
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
			if(this.__maskGraphics == null) this.__maskGraphics = new openfl_display_Graphics();
			this.__maskGraphics.clear();
			this.__mask.__update(true,true,this.__maskGraphics);
			this.__mask.__maskCached = true;
		}
		if(maskGraphics != null) this.__updateMask(maskGraphics);
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			if(this.parent != null) {
				this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldColorTransform.__combine(this.parent.__worldColorTransform);
				if(this.blendMode == null || this.blendMode == openfl_display_BlendMode.NORMAL) this.__blendMode = this.parent.__blendMode;
			} else this.__worldAlpha = this.get_alpha();
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.push(openfl_display_DrawCommand.OverrideMatrix(this.__worldTransform));
			maskGraphics.__commands = maskGraphics.__commands.concat(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,get_filters: function() {
		if(this.__filters == null) return []; else return this.__filters.slice();
	}
	,set_filters: function(value) {
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		return bounds.height * this.get_scaleY();
	}
	,set_height: function(value) {
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskCached = false;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
			this.__maskGraphics = null;
		}
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleX = value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(this.__scaleY != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleY = value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) return null;
		return this.__scrollRect.clone();
	}
	,get_transform: function() {
		if(this.__transform == null) this.__transform = new openfl_geom_Transform(this);
		return this.__transform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		return bounds.width * this.get_scaleX();
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(value != this.__x) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__x = value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(value != this.__y) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__y = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",get_visible:"get_visible",get_transform:"get_transform",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",get_rotation:"get_rotation",set_name:"set_name",set_mask:"set_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.tabEnabled = true;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = true;
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) this.parent.__getInteractive(stack);
		}
		return true;
	}
	,__class__: openfl_display_InteractiveObject
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = [];
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = true;
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw new js__$Boot_HaxeError("Invalid index position " + index);
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			child.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED,true));
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		var result = openfl_display_InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
		if(!event.__isCancelled && notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCancelled) return true;
			}
		}
		return result;
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		var matrixCache = null;
		if(matrix != null) {
			matrixCache = this.__worldTransform;
			this.__worldTransform = matrix;
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(!child.__renderable) continue;
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__worldTransform = matrixCache;
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		if(this.get_scrollRect() != null && !this.get_scrollRect().containsPoint(this.globalToLocal(new openfl_geom_Point(x,y)))) return false;
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true)) {
					if(stack != null) stack.push(this);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true)) {
							hitTest = true;
							if(interactive) break;
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,this);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false);
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popMask();
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popMask();
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.get_scrollRect() != null) {
			renderSession.spriteBatch.stop();
			var m = this.__worldTransform.clone();
			var clip = this.get_scrollRect().transform(m);
			clip.y = renderSession.renderer.height - clip.y - clip.height;
			renderSession.spriteBatch.start(clip);
		}
		var masked = this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.length > 0;
		if(masked) {
			renderSession.spriteBatch.stop();
			renderSession.maskManager.pushMask(this);
			renderSession.spriteBatch.start();
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		if(masked) {
			renderSession.spriteBatch.stop();
			renderSession.maskManager.popMask();
			renderSession.spriteBatch.start();
		}
		if(this.get_scrollRect() != null) {
			renderSession.spriteBatch.stop();
			renderSession.spriteBatch.start();
		}
		this.__removedChildren = [];
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!this.__renderable && !this.__isMask) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl_display_LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = true;
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) return lime_ui_MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var length = 0;
		if(stack != null) length = stack.length;
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly)) return interactiveOnly; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var Main = function() {
	openfl_display_Sprite.call(this);
	this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.added));
};
$hxClasses["Main"] = Main;
Main.__name__ = true;
Main.__super__ = openfl_display_Sprite;
Main.prototype = $extend(openfl_display_Sprite.prototype,{
	resize: function(e) {
		if(!this.inited) this.init();
	}
	,init: function() {
		if(this.inited) return;
		this.inited = true;
		this.html = new cocktail_api_CocktailView();
		this.html.loadHTML("\n\t\t\t<html><head>\n\n\t\t\t<meta name=\"defaultFont\" content=\"assets/serif.ttf\"></meta>\n\n\t\t\t<style>\n\n\n\t\t\t\t#container {\n\t\t\t\t\tmargin-top:200px;\n\t\t\t\t\tmargin-bottom:200px;\n\t\t\t\t\theight:800px;\n\t\t\t\t\tcolor:#ffffff;\n\t\t\t\t\tfont-size:24px;\n\t\t\t\t\twidth:800px;\n\t\t\t\t\tdisplay:block;\n\t\t\t\t}\n\t\t\t</style>\n\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<div id=\"content\">\n\t\t\t\t<center id=\"container\">ciao</center>\n\t\t\t\t</div>\n\t\t\t</body></html>\n\t\t");
		var bitmapData = openfl_Assets.getBitmapData("assets/haxe.png");
		var bitmap = new openfl_display_Bitmap(bitmapData);
		bitmap.set_width(400);
		bitmap.set_height(400);
		bitmap.set_x(0);
		bitmap.set_y(50);
		bitmap.set_alpha(.5);
		motion_Actuate.tween(bitmap,3,{ alpha : 1, y : -560}).repeat().reflect();
		this.slides = new Slides();
		var messageFormat = new openfl_text_TextFormat("Verdana",24,16777215,true);
		messageFormat.align = openfl_text_TextFormatAlign.LEFT;
		this.messageField = new openfl_text_TextField();
		this.messageField.set_defaultTextFormat(messageFormat);
		this.messageField.set_selectable(false);
		this.messageField.set_text("HAXE\nTHE CROSS PLATFORM TOOLKIT");
		this.messageField.set_autoSize(openfl_text_TextFieldAutoSize.CENTER);
		this.messageField.set_width(600);
		layout_LayoutUtils.center(new layout__$Resizable_DisplayObjectResizable(this.messageField),null);
		var sprite = this.html.root;
		layout_LayoutUtils.center(new layout__$Resizable_DisplayObjectResizable(sprite),null);
		layout_LayoutUtils.fillWidth(new layout__$Resizable_DisplayObjectResizable(sprite),null,null);
		layout_LayoutUtils.fillHeight(new layout__$Resizable_DisplayObjectResizable(sprite),null,null);
		this.addChild(bitmap);
		this.addChild(this.messageField);
		this.stage.addEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.onKeyDown));
	}
	,onKeyDown: function(evt) {
		var text;
		var _g = evt.keyCode;
		switch(_g) {
		case 40:
			text = this.slides.next();
			break;
		case 38:
			text = this.slides.prev();
			break;
		default:
			text = this.slides.get();
		}
		this.messageField.set_text(text);
		layout_LayoutUtils.fillWidth(new layout__$Resizable_DisplayObjectResizable(this.messageField),null,null);
		layout_LayoutUtils.fillHeight(new layout__$Resizable_DisplayObjectResizable(this.messageField),null,null);
		layout_LayoutUtils.center(new layout__$Resizable_DisplayObjectResizable(this.messageField),null);
	}
	,added: function(e) {
		this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.added));
		this.stage.addEventListener(openfl_events_Event.RESIZE,$bind(this,this.resize));
		this.init();
	}
	,__class__: Main
});
var DocumentClass = function() {
	openfl_Lib.current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = true;
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var lime_AssetLibrary = function() {
};
$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
lime_AssetLibrary.__name__ = true;
lime_AssetLibrary.prototype = {
	exists: function(id,type) {
		return false;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,__class__: lime_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe_ds_StringMap();
	this.path = new haxe_ds_StringMap();
	this.className = new haxe_ds_StringMap();
	lime_AssetLibrary.call(this);
	var id;
	id = "assets/serif.woff";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/serif.eot";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/haxe.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/serif.svg";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/serif.ttf";
	this.className.set(id,_$_$ASSET_$_$assets_$serif_$ttf);
	this.type.set(id,"FONT");
	var assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = true;
DefaultAssetLibrary.__super__ = lime_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getBytes: function(id) {
		var bytes = null;
		var data;
		data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") {
			bytes = new lime_utils_ByteArray();
			bytes.writeUTFBytes(data);
		} else if(js_Boot.__instanceof(data,lime_utils_ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes;
		} else return null;
	}
	,getFont: function(id) {
		return js_Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime_text_Font);
	}
	,getImage: function(id) {
		return lime_graphics_Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var bytes = null;
		var data;
		data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") return data; else if(js_Boot.__instanceof(data,lime_utils_ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes.readUTFBytes(bytes.length);
		} else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,__class__: DefaultAssetLibrary
});
var lime_text_Font = function(name) {
	if(name != null) this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = true;
lime_text_Font.prototype = {
	__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__class__: lime_text_Font
};
var _$_$ASSET_$_$assets_$serif_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Katamotz Ikasi";
};
$hxClasses["__ASSET__assets_serif_ttf"] = _$_$ASSET_$_$assets_$serif_$ttf;
_$_$ASSET_$_$assets_$serif_$ttf.__name__ = true;
_$_$ASSET_$_$assets_$serif_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$serif_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$serif_$ttf
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = true;
Lambda.has = function(it,elt) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(x == elt) return true;
	}
	return false;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var $it0 = $iterator(it)();
		while( $it0.hasNext() ) {
			var _ = $it0.next();
			n++;
		}
	} else {
		var $it1 = $iterator(it)();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			if(pred(x)) n++;
		}
	}
	return n;
};
Math.__name__ = true;
var NMEPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = true;
NMEPreloader.__super__ = openfl_display_Sprite;
NMEPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	getBackgroundColor: function() {
		return 0;
	}
	,getHeight: function() {
		var height = 600;
		if(height > 0) return height; else return openfl_Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 800;
		if(width > 0) return width; else return openfl_Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a,b) {
	if(a == b) return 0; else if(a > b) return 1; else return -1;
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isEnumValue = function(v) {
	return v != null && v.__enum__ != null;
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Slides = function() {
	this.index = 0;
};
$hxClasses["Slides"] = Slides;
Slides.__name__ = true;
Slides.slides = null;
Slides.populateSlides = function() {
	Slides.slides = [];
	Slides.slides.push(StringTools.trim("\nHAXE\nTHE CROSS LANGUAGE TOOLKIT\n      "));
	Slides.slides.push(StringTools.trim("\nCreato nel 2005\nda\nNicolas Canasse\n      "));
	Slides.slides.push(StringTools.trim("\nOOP\nModello a oggetto simile a java\nClassi, interface, metodi statici...\n      "));
	Slides.slides.push(StringTools.trim("\nSINTASSI C LIKE\nSintassi simile a c+, java, javascript...\n      "));
	Slides.slides.push(StringTools.trim("\nCLOSURE\nFunzioni anonime e closure\n      "));
	Slides.slides.push(StringTools.trim("\nSTRING INTERPOLATION\ncome in php\n'$x + $y'\n      "));
	Slides.slides.push(StringTools.trim("\nSTRICTLY TYPED\nType System statico\ncon Type Inference\n      "));
	Slides.slides.push(StringTools.trim("\nDYNAMICS\noggetti dinamici\nsenza type checking\n      "));
	Slides.slides.push(StringTools.trim("\nUntyped\nblocchi di codice in cui\nil type checking è disabilitato\n      "));
	Slides.slides.push(StringTools.trim("\nEXTERNS\npermettono di mappare librerie esterne\ncon il type system\n      "));
	Slides.slides.push(StringTools.trim("\nMagic variables\ncomandi che permettono di aprire finestre\ndove poter inserire codice nativo\n      "));
	Slides.slides.push(StringTools.trim("\nTYPES\nsupporta tipi\ntramite typedef (simile alle strutture in c)\ne tipi anonimi\n      "));
	Slides.slides.push(StringTools.trim("\nABSTRACT TYPES\nDefinizione di tipi astratti\nesistenti solo a compile type\n      "));
	Slides.slides.push(StringTools.trim("\nABSTRACT TYPES\nOperator Overloading, Array Access,\nMethod forwarding, Implicit Cast\n      "));
	Slides.slides.push(StringTools.trim("\nSTATIC ESTENSION\nEstende oggetti e classi a compile time\nsenza bisogno di ereditarietà\n      "));
	Slides.slides.push(StringTools.trim("\nINLINE\ninlining di funzioni e costruttori\npermette maggiori prestazioni\n      "));
	Slides.slides.push(StringTools.trim("\nENUM (Algebrical Data Type)\nEnumeration con e senza parametri\n      "));
	Slides.slides.push(StringTools.trim("\nGENERICS\nPermette di generare codice per ogni\nsingolo generic definito\n      "));
	Slides.slides.push(StringTools.trim("\nPattern Matching\nsu enum,array e tipi\n(type checking compile time)\n      "));
	Slides.slides.push(StringTools.trim("\nMACRO SYSTEM\nPermette di generare codice\na compile time\nutile per scrivere dsl\n      "));
	Slides.slides.push(StringTools.trim("\nMACRO SYSTEM\nsi integra con il type system\nil compilatore controlla\nla validità del codice\n      "));
	Slides.slides.push(StringTools.trim("\nMACRO SYSTEM AUTOBUILD\nmanipolano le classi dinamicamente\naggiungendo e modificand metodi\n      "));
	Slides.slides.push(StringTools.trim("\nMACRO SYSTEM GENERICS BUILD\ncreazione di nuovi tipi e classi\ntramite le macro\n      "));
	Slides.slides.push(StringTools.trim("\nMACRO REIFICATION\nscrittura di macro con \"templating\"\nsimili a lisp macro\n      "));
	Slides.slides.push(StringTools.trim("\nMACRO REIFICATION\npattern matching con reification\nsimili a pattern based macros di SCHEME\n      "));
	Slides.slides.push(StringTools.trim("\nMETADATA\nSimile alle annotations java\n      "));
	Slides.slides.push(StringTools.trim("\nMETADATA MACRO\nprocessate dalle macro\nnon vengono esportate a runtime\n      "));
	Slides.slides.push(StringTools.trim("\nFLAG SYSTEM\nPermette di definire dei flag di compilazione\nda utilizare tramite un macro linguaggio\nsimili a preprocessori c\n      "));
	Slides.slides.push(StringTools.trim("\nSTATIC ANALYZER\nanalizza il codice per incrementarne\nle prestazioni\n      "));
	Slides.slides.push(StringTools.trim("\nBUILD SYSTEM\nbasato su file permette di creare\npiu' build e di lanciare comandi\ndopo la compilazione\n      "));
	Slides.slides.push(StringTools.trim("\nSTANDARD CORE LIBRARY\nSimili a core java e javascript\n      "));
	Slides.slides.push(StringTools.trim("\nXML e JSON\nnella core library\n      "));
	Slides.slides.push(StringTools.trim("\nREMOTING\nRPC per comunicazione simile a SOAP\n      "));
	Slides.slides.push(StringTools.trim("\nREMOTING PROXY\nCrea proxy sincroni e asincroni\ndi una classe\n      "));
	Slides.slides.push(StringTools.trim("\nSPOD\nORM SQL con type checking\ne macro DSL per query\n      "));
	Slides.slides.push(StringTools.trim("\nWEB DISPATCHER\nUrl router con validazione uri\ncon type system\n      "));
	Slides.slides.push(StringTools.trim("\nREFLECTION\nPer ispezionare a runtime gli oggetti\n      "));
	Slides.slides.push(StringTools.trim("\nHSCRIPT\ninterprete haxe in haxe (subset)\nutile per debuggare codice a runtime\nsenza ricompilare\n      "));
	Slides.slides.push(StringTools.trim("\nSERIALIZER\nSerializer con mantenimento\ninformazioni sui tipi\n      "));
	Slides.slides.push(StringTools.trim("\nNEKO\nla VM in cui viene eseguito\nil codice Haxe compilato\nin byte code\n      "));
	Slides.slides.push(StringTools.trim("\nNEKO\nutile per eseguirlo serve side\noppure....\n      "));
	Slides.slides.push(StringTools.trim("\nHAXE\nPuò compilare anche in....\n      "));
	Slides.slides.push(StringTools.trim("\n1. NEKO\n      "));
	Slides.slides.push(StringTools.trim("\n2. JAVASCRIPT\n      "));
	Slides.slides.push(StringTools.trim("\n3. FLASH\n      "));
	Slides.slides.push(StringTools.trim("\n4. PHP\n      "));
	Slides.slides.push(StringTools.trim("\n5. C++\n      "));
	Slides.slides.push(StringTools.trim("\n6. JAVA\n       "));
	Slides.slides.push(StringTools.trim("\n7. C#\n       "));
	Slides.slides.push(StringTools.trim("\n8. PYTHON\n       "));
	Slides.slides.push(StringTools.trim("\n9. LUA (experimental)\n       "));
	Slides.slides.push(StringTools.trim("\n10. RUBY (experimental)\n       "));
	Slides.slides.push(StringTools.trim("\n11. SWIFT (work in progress...)\n       "));
	Slides.slides.push(StringTools.trim("\nHAXE\npermette di scrivere codice\nclient side,server side e\nmobile/desktop nativo\n       "));
	Slides.slides.push(StringTools.trim("\nHAXE\nUtilizzato soprattutto\nper scrivere giochi compilati\nin HTML5, FLASH e\nMOBILE/DESKTOP/CONSOLE\n       "));
	Slides.slides.push(StringTools.trim("\nNME\nporting della Flash Api\nsu nativo c++\nIOS/ANDROID/WMOBILE/LINUX/MAC\nANDROID e IOS View\n       "));
	Slides.slides.push(StringTools.trim("\nOPENFL\nfork di NME (compatibili)\ncon backend modulari\nNME + HTML5 + CONSOLE\n       "));
	Slides.slides.push(StringTools.trim("\nSTABLEXUI/HAXEUI/JIVE\nUI framework per openfl\nuso di XML per definire interfacce\n       "));
	Slides.slides.push(StringTools.trim("\nSTABLEXUI/HAXEUI/JIVE\nXML e codice possono essere\nprocessati a runtime (fast reload)\no a compiletime con macro system\n       "));
	Slides.slides.push(StringTools.trim("\nHAXEFIXEL/HAXEPUNK\nFramework per creare giochi\ncon OPENFL\n       "));
	Slides.slides.push(StringTools.trim("\nFLAMBLE\nFramework per creare giochi\ncon adobe air\n       "));
	Slides.slides.push(StringTools.trim("\nHAXELIB\ncomand per gestire le librerie\ne le dipendenze\ncome npm,rubygems,...\n       "));
	Slides.slides.push(StringTools.trim("\ntry.haxe.org\nsito per testare online haxe\n(macro bloccate per security)\n       "));
};
Slides.prototype = {
	next: function() {
		if(this.index <= Slides.slides.length - 1) ++this.index; else this.index = Slides.slides.length - 1;
		return this.get();
	}
	,prev: function() {
		if(this.index >= 0) --this.index; else this.index = 0;
		return this.get();
	}
	,get: function() {
		return Slides.slides[this.index];
	}
	,__class__: Slides
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = true;
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = true;
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		this.attributeMap.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.exists(att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.keys();
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) return child;
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(x.parent != null) x.parent.removeChild(x);
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var cocktail_api_CocktailView = function() {
};
$hxClasses["cocktail.api.CocktailView"] = cocktail_api_CocktailView;
cocktail_api_CocktailView.__name__ = true;
cocktail_api_CocktailView.prototype = {
	loadHTML: function(html,url) {
		if(this.document != null) this.dispose();
		this.createDocument();
		this.initDocument(this.document,html,url);
	}
	,dispose: function() {
		if(this.document != null) this.document.dispose();
		if(this.window != null) this.window.dispose();
		if(this._platform != null) this._platform.dispose();
	}
	,createDocument: function() {
		this._platform = this.initPlatform();
		this.document = new cocktail_core_html_HTMLDocument();
		this.window = new cocktail_core_window_Window(this.document);
		this.updateViewport(this.viewport);
	}
	,initPlatform: function() {
		var platform = new cocktail_port_platform_flash_$player_Platform();
		this.root = platform.getRootPlatformLayer();
		return platform;
	}
	,initDocument: function(htmlDocument,html,url) {
		this.setDocumentBindings(this.document);
		this.setPlatformBindings(this._platform,this.document);
		if(url != null) htmlDocument.location.set_href(url);
		if(html != null) htmlDocument.set_innerHTML(html);
	}
	,setPlatformBindings: function(platform,htmlDocument) {
		this.setMouseBindings(platform,htmlDocument);
		this.setKeyboardBindings(platform,htmlDocument);
		this.setTouchBindings(platform,htmlDocument);
		this.setFullscreenBindings(platform,htmlDocument);
		this.setViewportBindings(platform,htmlDocument);
		this.setMouseCursorBindings(platform,htmlDocument);
		this.setNavigationBindings(platform,htmlDocument);
	}
	,setDocumentBindings: function(htmlDocument) {
		this.document.onDocumentUpdated = $bind(this,this.onDocumentUpdated);
		this.document.onDocumentInvalidated = $bind(this,this.onDocumentInvalidated);
	}
	,updateViewport: function(viewport) {
		if(this.window == null) return;
		if(viewport == null) this._platform.set_viewport(null); else {
			var rect = new cocktail_core_geom_RectangleVO();
			rect.x = viewport.x;
			rect.y = viewport.y;
			rect.width = viewport.width;
			rect.height = viewport.height;
			this._platform.set_viewport(rect);
		}
	}
	,setMouseBindings: function(platform,htmlDocument) {
		platform.mouseListener.onMouseDown = $bind(htmlDocument,htmlDocument.onPlatformMouseEvent);
		platform.mouseListener.onMouseUp = $bind(htmlDocument,htmlDocument.onPlatformMouseEvent);
		platform.mouseListener.onMouseMove = $bind(htmlDocument,htmlDocument.onPlatformMouseMoveEvent);
		platform.mouseListener.onMouseWheel = $bind(htmlDocument,htmlDocument.onPlatformMouseWheelEvent);
		platform.mouseListener.onMouseLeave = $bind(htmlDocument,htmlDocument.onPlatformMouseLeaveEvent);
	}
	,setMouseCursorBindings: function(platform,htmlDocument) {
		this.document.onSetMouseCursor = ($_=platform.mouseListener,$bind($_,$_.setMouseCursor));
	}
	,setKeyboardBindings: function(platform,htmlDocument) {
		platform.keyboardListener.onKeyDown = $bind(this,this.onPlatformKeyDown);
		platform.keyboardListener.onKeyUp = $bind(htmlDocument,htmlDocument.onPlatformKeyUpEvent);
	}
	,setTouchBindings: function(platform,htmlDocument) {
		platform.touchListener.onTouchStart = $bind(htmlDocument,htmlDocument.onPlatformTouchEvent);
		platform.touchListener.onTouchMove = $bind(htmlDocument,htmlDocument.onPlatformTouchEvent);
		platform.touchListener.onTouchEnd = $bind(htmlDocument,htmlDocument.onPlatformTouchEvent);
	}
	,setFullscreenBindings: function(platform,htmlDocument) {
		platform.onFullScreenChange = ($_=this.document,$bind($_,$_.onPlatformFullScreenChange));
		this.document.onEnterFullscreen = $bind(platform,platform.enterFullscreen);
		this.document.onExitFullscreen = $bind(platform,platform.exitFullscreen);
		this.document.isFullscreen = $bind(platform,platform.fullscreen);
		this.document.isFullScreenEnabled = $bind(platform,platform.fullScreenEnabled);
	}
	,setViewportBindings: function(platform,htmlDocument) {
		platform.onResize = ($_=this.document,$bind($_,$_.onPlatformResizeEvent));
		platform.onOrientationChange = ($_=this.document,$bind($_,$_.onPlatformOrientationChangeEvent));
		this.document.getViewportHeight = function() {
			return platform.get_viewportHeight();
		};
		this.document.getViewportWidth = function() {
			return platform.get_viewportWidth();
		};
		this.document.getTopPlatformLayer = $bind(platform,platform.getTopPlatformLayer);
	}
	,setNavigationBindings: function(platform,htmlDocument) {
		this.document.onNavigateToURL = $bind(platform,platform.open);
	}
	,onDocumentUpdated: function() {
	}
	,onDocumentInvalidated: function() {
		var _g = this;
		this.document.timer.delay(function(timestamp) {
			_g.document.update();
		});
	}
	,onPlatformKeyDown: function(keyboardEvent) {
		this.document.onPlatformKeyDownEvent(keyboardEvent);
		this.onAfterKeyDownEvent(keyboardEvent,this.document);
	}
	,onAfterKeyDownEvent: function(keyboardEvent,htmlDocument) {
		var _g = Std.parseInt(keyboardEvent.keyChar);
		if(_g != null) switch(_g) {
		case 9:
			if(keyboardEvent.defaultPrevented == false) {
				if(keyboardEvent.shiftKey == true) htmlDocument.focusPreviousElement(); else htmlDocument.focusNextElement();
			}
			break;
		case 13:case 32:
			if(keyboardEvent.defaultPrevented == false) {
				if(htmlDocument.get_activeElement() != null) htmlDocument.get_activeElement().triggerActivationBehaviour();
			}
			break;
		}
	}
	,__class__: cocktail_api_CocktailView
};
var cocktail_core_boxmodel_BoxStylesComputer = function() {
};
$hxClasses["cocktail.core.boxmodel.BoxStylesComputer"] = cocktail_core_boxmodel_BoxStylesComputer;
cocktail_core_boxmodel_BoxStylesComputer.__name__ = true;
cocktail_core_boxmodel_BoxStylesComputer.prototype = {
	measure: function(style,containingBlockData) {
		this.measurePaddings(style,containingBlockData);
		this.measureBordersWidth(style);
		this.measureOutline(style);
		this.measureDimensionsConstraints(style,containingBlockData);
		this.measureDimensionsAndMargins(style,containingBlockData);
		if(style.isPositioned == true) this.measurePositionOffsets(style,containingBlockData);
	}
	,measureDimensionsConstraints: function(style,containingBlockData) {
		style.usedValues.maxHeight = this.getComputedConstrainedDimension(style.getTransitionablePropertyValue(18),containingBlockData.height,containingBlockData.isHeightAuto);
		style.usedValues.minHeight = this.getComputedConstrainedDimension(style.getTransitionablePropertyValue(17),containingBlockData.height,containingBlockData.isHeightAuto,true);
		style.usedValues.maxWidth = this.getComputedConstrainedDimension(style.getTransitionablePropertyValue(20),containingBlockData.width,containingBlockData.isWidthAuto);
		style.usedValues.minWidth = this.getComputedConstrainedDimension(style.getTransitionablePropertyValue(19),containingBlockData.width,containingBlockData.isWidthAuto,true);
	}
	,measurePositionOffsets: function(style,containingBlockData) {
		style.usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22),containingBlockData.width);
		style.usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23),containingBlockData.width);
		style.usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21),containingBlockData.height);
		style.usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24),containingBlockData.height);
	}
	,measureDimensionsAndMargins: function(style,containingBlockData) {
		style.usedValues.width = this.constrainWidth(style,this.measureWidthAndHorizontalMargins(style,containingBlockData));
		style.usedValues.height = this.constrainHeight(style,this.measureHeightAndVerticalMargins(style,containingBlockData));
	}
	,measurePaddings: function(style,containingBlockData) {
		style.usedValues.paddingLeft = this.getComputedPadding(style.getTransitionablePropertyValue(11),containingBlockData.width);
		style.usedValues.paddingRight = this.getComputedPadding(style.getTransitionablePropertyValue(12),containingBlockData.width);
		style.usedValues.paddingTop = this.getComputedPadding(style.getTransitionablePropertyValue(13),containingBlockData.width);
		style.usedValues.paddingBottom = this.getComputedPadding(style.getTransitionablePropertyValue(14),containingBlockData.width);
	}
	,measureBordersWidth: function(style) {
		style.usedValues.borderLeftWidth = this.getComputedBorderWidth(style.getTransitionablePropertyValue(65));
		style.usedValues.borderTopWidth = this.getComputedBorderWidth(style.getTransitionablePropertyValue(62));
		style.usedValues.borderRightWidth = this.getComputedBorderWidth(style.getTransitionablePropertyValue(63));
		style.usedValues.borderBottomWidth = this.getComputedBorderWidth(style.getTransitionablePropertyValue(64));
	}
	,measureOutline: function(style) {
		style.usedValues.outlineWidth = this.getComputedBorderWidth(style.getComputedOrInitialProperty(82));
	}
	,measureWidthAndHorizontalMargins: function(style,containingBlockData) {
		if(style.hasAutoWidth == true) return this.measureAutoWidth(style,containingBlockData); else return this.measureWidth(style,containingBlockData);
	}
	,measureAutoWidth: function(style,containingBlockData) {
		var usedWidth = 0.0;
		style.usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6),style.getTransitionablePropertyValue(7),containingBlockData.width,usedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
		style.usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7),style.getTransitionablePropertyValue(6),containingBlockData.width,usedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
		var computedWidth = this.getComputedAutoWidth(style,containingBlockData);
		var constrainedWidth = this.constrainWidth(style,computedWidth);
		if(constrainedWidth != computedWidth) {
			if(style.hasAutoMarginLeft && style.hasAutoMarginRight) {
				var marginWidth = (containingBlockData.width - style.usedValues.paddingLeft - style.usedValues.paddingRight - style.usedValues.borderLeftWidth - style.usedValues.borderRightWidth - constrainedWidth) / 2;
				style.usedValues.marginLeft = marginWidth;
				style.usedValues.marginRight = marginWidth;
			}
		}
		return computedWidth;
	}
	,measureWidth: function(style,containingBlockData) {
		var computedWidth = this.constrainWidth(style,this.getComputedWidth(style,containingBlockData));
		style.usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6),style.getTransitionablePropertyValue(7),containingBlockData.width,computedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
		style.usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7),style.getTransitionablePropertyValue(6),containingBlockData.width,computedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
		return computedWidth;
	}
	,measureHeightAndVerticalMargins: function(style,containingBlockData) {
		if(style.hasAutoHeight == true) return this.measureAutoHeight(style,containingBlockData); else return this.measureHeight(style,containingBlockData);
	}
	,measureAutoHeight: function(style,containingBlockData) {
		var computedHeight = this.getComputedAutoHeight(style,containingBlockData);
		style.usedValues.marginTop = this.getComputedMargin(style.getTransitionablePropertyValue(8),style.getTransitionablePropertyValue(9),containingBlockData.height,computedHeight,style.hasAutoHeight,style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth,false);
		style.usedValues.marginBottom = this.getComputedMargin(style.getTransitionablePropertyValue(9),style.getTransitionablePropertyValue(8),containingBlockData.height,computedHeight,style.hasAutoHeight,style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth,false);
		return computedHeight;
	}
	,measureHeight: function(style,containingBlockData) {
		var computedHeight = this.constrainHeight(style,this.getComputedHeight(style,containingBlockData));
		style.usedValues.marginTop = this.getComputedMargin(style.getTransitionablePropertyValue(8),style.getTransitionablePropertyValue(9),containingBlockData.height,computedHeight,style.hasAutoHeight,style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth,false);
		style.usedValues.marginBottom = this.getComputedMargin(style.getTransitionablePropertyValue(9),style.getTransitionablePropertyValue(8),containingBlockData.height,computedHeight,style.hasAutoHeight,style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth,false);
		return computedHeight;
	}
	,getComputedWidth: function(style,containingBlockData) {
		return this.getComputedDimension(style.getTransitionablePropertyValue(15),containingBlockData.width,containingBlockData.isWidthAuto);
	}
	,getComputedAutoWidth: function(style,containingBlockData) {
		return containingBlockData.width - style.usedValues.paddingLeft - style.usedValues.paddingRight - style.usedValues.borderLeftWidth - style.usedValues.borderRightWidth - style.usedValues.marginLeft - style.usedValues.marginRight;
	}
	,getComputedHeight: function(style,containingBlockData) {
		return this.getComputedDimension(style.getTransitionablePropertyValue(16),containingBlockData.height,containingBlockData.isHeightAuto);
	}
	,getComputedAutoHeight: function(style,containingBlockData) {
		return 0;
	}
	,getComputedMargin: function(marginStyleValue,opositeMargin,containingHTMLElementDimension,computedDimension,isDimensionAuto,computedPaddingsAndBordersDimension,isHorizontalMargin) {
		var usedMargin = 0;
		switch(marginStyleValue[1]) {
		case 18:
			var value = marginStyleValue[2];
			usedMargin = value;
			break;
		case 2:
			var value1 = marginStyleValue[2];
			if(isDimensionAuto == true) usedMargin = 0.0; else usedMargin = containingHTMLElementDimension * (value1 * 0.01);
			break;
		case 4:
			var value2 = marginStyleValue[2];
			if(value2 != cocktail_core_css_CSSKeywordValue.AUTO) throw new js__$Boot_HaxeError("Illegal keyword value for margin style");
			usedMargin = this.getComputedAutoMargin(marginStyleValue,opositeMargin,containingHTMLElementDimension,computedDimension,isDimensionAuto,computedPaddingsAndBordersDimension,isHorizontalMargin);
			break;
		default:
			throw new js__$Boot_HaxeError("Illegal value for margin style");
		}
		return usedMargin;
	}
	,getComputedAutoMargin: function(marginStyleValue,opositeMargin,containingHTMLElementDimension,computedDimension,isDimensionAuto,computedPaddingsAndBordersDimension,isHorizontalMargin) {
		var computedMargin = 0;
		if(isHorizontalMargin == false || isDimensionAuto == true) computedMargin = 0.0; else switch(opositeMargin[1]) {
		case 4:
			var value = opositeMargin[2];
			if(value != cocktail_core_css_CSSKeywordValue.AUTO) throw new js__$Boot_HaxeError("Illegal keyword value for margin");
			computedMargin = (containingHTMLElementDimension - computedDimension - computedPaddingsAndBordersDimension) / 2;
			break;
		default:
			var opositeComputedMargin = this.getComputedMargin(opositeMargin,marginStyleValue,containingHTMLElementDimension,computedDimension,isDimensionAuto,computedPaddingsAndBordersDimension,isHorizontalMargin);
			computedMargin = containingHTMLElementDimension - computedDimension - computedPaddingsAndBordersDimension - opositeComputedMargin;
		}
		return computedMargin;
	}
	,getComputedConstrainedDimension: function(constrainedDimension,containingHTMLElementDimension,isContainingDimensionAuto,isMinConstraint) {
		if(isMinConstraint == null) isMinConstraint = false;
		var computedConstraintDimension = 0;
		switch(constrainedDimension[1]) {
		case 18:
			var value = constrainedDimension[2];
			computedConstraintDimension = value;
			break;
		case 2:
			var value1 = constrainedDimension[2];
			if(isContainingDimensionAuto == true) {
				if(isMinConstraint == true) computedConstraintDimension = 0; else computedConstraintDimension = 100000;
			} else computedConstraintDimension = containingHTMLElementDimension * (value1 * 0.01);
			break;
		case 4:
			var value2 = constrainedDimension[2];
			if(value2 != cocktail_core_css_CSSKeywordValue.NONE) throw new js__$Boot_HaxeError("Illegal keyword value for dimension constraints style");
			if(isMinConstraint == true) computedConstraintDimension = 0.0; else computedConstraintDimension = 100000;
			break;
		default:
			throw new js__$Boot_HaxeError("Illegal value for dimension constraints style");
		}
		return computedConstraintDimension;
	}
	,getComputedPositionOffset: function(positionOffsetStyleValue,containingHTMLElementDimension) {
		var computedPositionOffset = 0.0;
		switch(positionOffsetStyleValue[1]) {
		case 18:
			var value = positionOffsetStyleValue[2];
			computedPositionOffset = value;
			break;
		case 2:
			var value1 = positionOffsetStyleValue[2];
			computedPositionOffset = containingHTMLElementDimension * (value1 * 0.01);
			break;
		default:
		}
		return computedPositionOffset;
	}
	,getComputedDimension: function(dimensionStyleValue,containingHTMLElementDimension,isContainingDimensionAuto) {
		var computedDimensions;
		switch(dimensionStyleValue[1]) {
		case 18:
			var value = dimensionStyleValue[2];
			computedDimensions = value;
			break;
		case 2:
			var value1 = dimensionStyleValue[2];
			computedDimensions = containingHTMLElementDimension * (value1 * 0.01);
			break;
		case 4:
			var value2 = dimensionStyleValue[2];
			if(value2 == cocktail_core_css_CSSKeywordValue.AUTO) computedDimensions = 0; else throw new js__$Boot_HaxeError("Illegal keyword value for width or height");
			break;
		default:
			throw new js__$Boot_HaxeError("Illegal value for width or height");
		}
		return computedDimensions;
	}
	,getComputedPadding: function(paddingStyleValue,containingHTMLElementDimension) {
		var computedPaddingValue;
		switch(paddingStyleValue[1]) {
		case 18:
			var value = paddingStyleValue[2];
			computedPaddingValue = value;
			break;
		case 2:
			var value1 = paddingStyleValue[2];
			computedPaddingValue = containingHTMLElementDimension * (value1 * 0.01);
			break;
		default:
			throw new js__$Boot_HaxeError("Illegal value for padding");
		}
		return computedPaddingValue;
	}
	,getComputedBorderWidth: function(borderWidthStyleValue) {
		var computedBorderWidthValue;
		switch(borderWidthStyleValue[1]) {
		case 18:
			var value = borderWidthStyleValue[2];
			computedBorderWidthValue = value;
			break;
		default:
			throw new js__$Boot_HaxeError("illegal value for border width");
		}
		return computedBorderWidthValue;
	}
	,constrainWidth: function(style,usedWidth) {
		var usedValues = style.usedValues;
		if(style.hasMaxWidth == true) {
			if(usedWidth > usedValues.maxWidth) usedWidth = usedValues.maxWidth;
		}
		if(usedWidth < usedValues.minWidth) usedWidth = usedValues.minWidth;
		return usedWidth;
	}
	,constrainHeight: function(style,usedHeight) {
		var usedValues = style.usedValues;
		if(style.hasMaxHeight == true) {
			if(usedHeight > usedValues.maxHeight) usedHeight = usedValues.maxHeight;
		}
		if(usedHeight < usedValues.minHeight) usedHeight = usedValues.minHeight;
		return usedHeight;
	}
	,__class__: cocktail_core_boxmodel_BoxStylesComputer
};
var cocktail_core_boxmodel_BlockBoxStylesComputer = function() {
	cocktail_core_boxmodel_BoxStylesComputer.call(this);
};
$hxClasses["cocktail.core.boxmodel.BlockBoxStylesComputer"] = cocktail_core_boxmodel_BlockBoxStylesComputer;
cocktail_core_boxmodel_BlockBoxStylesComputer.__name__ = true;
cocktail_core_boxmodel_BlockBoxStylesComputer.__super__ = cocktail_core_boxmodel_BoxStylesComputer;
cocktail_core_boxmodel_BlockBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_BoxStylesComputer.prototype,{
	__class__: cocktail_core_boxmodel_BlockBoxStylesComputer
});
var cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer = function() {
	cocktail_core_boxmodel_BoxStylesComputer.call(this);
};
$hxClasses["cocktail.core.boxmodel.EmbeddedBlockBoxStylesComputer"] = cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer;
cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.__name__ = true;
cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.__super__ = cocktail_core_boxmodel_BoxStylesComputer;
cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_BoxStylesComputer.prototype,{
	measureDimensionsAndMargins: function(style,containingBlockData) {
		var usedValues = style.usedValues;
		var usedWidth = this.measureWidthAndHorizontalMargins(style,containingBlockData);
		var usedHeight = this.measureHeightAndVerticalMargins(style,containingBlockData);
		if(style.hasAutoWidth == true && style.hasAutoHeight == true) this.constrainDimensions(style,usedWidth,usedHeight); else {
			usedValues.width = this.constrainWidth(style,usedWidth);
			usedValues.height = this.constrainHeight(style,usedHeight);
		}
	}
	,constrainDimensions: function(style,usedWidth,usedHeight) {
		var usedValues = style.usedValues;
		var maxHeight = usedValues.maxHeight;
		var minHeight = usedValues.minHeight;
		var maxWidth = usedValues.maxWidth;
		var minWidth = usedValues.minWidth;
		var widthSuperiorToMaxWidth = false;
		if(style.hasMaxWidth == true) widthSuperiorToMaxWidth = usedWidth > maxWidth;
		var heightSuperiorToMaxHeight = false;
		if(style.hasMaxHeight == true) heightSuperiorToMaxHeight = usedHeight > maxHeight;
		var widthInferiorToMinWidth = usedWidth < minWidth;
		var heightInferiorToMinHeight = usedHeight < minHeight;
		if(widthSuperiorToMaxWidth == true) {
			if(heightSuperiorToMaxHeight == true) {
				if(maxWidth / usedWidth <= maxHeight / usedHeight) {
					if(minHeight > maxWidth * (usedHeight / usedWidth)) usedHeight = minHeight; else usedHeight = maxWidth * (usedHeight / usedWidth);
					usedWidth = maxWidth;
				}
			} else if(heightInferiorToMinHeight == true) {
				usedWidth = maxWidth;
				usedHeight = minHeight;
			} else {
				if(maxWidth * (usedHeight / usedWidth) > minHeight) usedHeight = maxWidth * (usedHeight / usedWidth); else usedHeight = minHeight;
				usedWidth = maxWidth;
			}
		} else if(widthInferiorToMinWidth == true) {
			if(heightInferiorToMinHeight == true) {
				if(minWidth / usedWidth <= minHeight / usedHeight) {
					if(maxWidth < minHeight * (usedWidth / usedHeight)) usedWidth = maxWidth; else usedWidth = minHeight * (usedWidth / usedHeight);
					usedHeight = minHeight;
				} else {
					if(maxHeight < minWidth * (usedHeight / usedWidth)) usedHeight = maxHeight; else usedHeight = minWidth * (usedHeight / usedWidth);
					usedWidth = minWidth;
				}
			} else if(heightSuperiorToMaxHeight == true) {
				usedWidth = minWidth;
				usedHeight = maxHeight;
			} else {
				if(minWidth * (usedHeight / usedWidth) < maxHeight) usedHeight = minWidth * (usedHeight / usedWidth); else usedHeight = maxHeight;
				usedWidth = minWidth;
			}
		} else if(heightSuperiorToMaxHeight == true) {
			if(maxHeight * (usedWidth / usedHeight) > minWidth) usedWidth = maxHeight * (usedWidth / usedHeight); else usedWidth = minWidth;
			usedHeight = maxHeight;
		} else if(heightInferiorToMinHeight == true) {
			if(minHeight * (usedWidth / usedHeight) < minHeight) usedWidth = minHeight * (usedWidth / usedHeight); else usedWidth = minHeight;
			usedHeight = minHeight;
		}
		usedValues.width = usedWidth;
		usedValues.height = usedHeight;
	}
	,measureAutoWidth: function(style,containingBlockData) {
		var usedValues = style.usedValues;
		var usedWidth = this.getComputedAutoWidth(style,containingBlockData);
		usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6),style.getTransitionablePropertyValue(7),containingBlockData.width,usedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
		usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7),style.getTransitionablePropertyValue(6),containingBlockData.width,usedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
		return usedWidth;
	}
	,getComputedAutoWidth: function(style,containingBlockData) {
		var usedValues = style.usedValues;
		var usedWidth = 0.0;
		var embeddedHTMLElement = style.htmlElement;
		if(embeddedHTMLElement.getAttributeNode("width") != null) usedWidth = embeddedHTMLElement.get_width(); else if(style.hasAutoHeight == true) {
			if(embeddedHTMLElement.get_intrinsicWidth() != null) usedWidth = embeddedHTMLElement.get_intrinsicWidth(); else if(embeddedHTMLElement.get_intrinsicHeight() != null && embeddedHTMLElement.get_intrinsicRatio() != null) usedWidth = embeddedHTMLElement.get_intrinsicHeight() * embeddedHTMLElement.get_intrinsicRatio(); else if(embeddedHTMLElement.get_intrinsicRatio() != null) {
				if(containingBlockData.isWidthAuto == false) usedWidth = containingBlockData.width - usedValues.marginLeft - usedValues.marginRight - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth; else usedWidth = 0.0;
			}
		} else {
			var usedHeight = this.constrainHeight(style,this.getComputedDimension(style.getTransitionablePropertyValue(16),containingBlockData.height,containingBlockData.isHeightAuto));
			if(embeddedHTMLElement.get_intrinsicRatio() != null) usedWidth = usedHeight / embeddedHTMLElement.get_intrinsicRatio(); else if(embeddedHTMLElement.get_intrinsicWidth() != null) usedWidth = embeddedHTMLElement.get_intrinsicWidth(); else usedWidth = 300;
		}
		return usedWidth;
	}
	,getComputedAutoHeight: function(style,containingBlockData) {
		var usedValues = style.usedValues;
		var usedHeight = 0.0;
		var embeddedHTMLElement = style.htmlElement;
		if(embeddedHTMLElement.getAttributeNode("height") != null) usedHeight = embeddedHTMLElement.get_height(); else if(style.hasAutoWidth == true) {
			if(embeddedHTMLElement.get_intrinsicHeight() != null) usedHeight = embeddedHTMLElement.get_intrinsicHeight(); else if(embeddedHTMLElement.get_intrinsicWidth() != null && embeddedHTMLElement.get_intrinsicRatio() != null) usedHeight = embeddedHTMLElement.get_intrinsicWidth() * embeddedHTMLElement.get_intrinsicRatio(); else if(embeddedHTMLElement.get_intrinsicRatio() != null) {
			}
		} else if(embeddedHTMLElement.get_intrinsicRatio() != null) {
			var usedWidth = this.constrainWidth(style,this.getComputedDimension(style.getTransitionablePropertyValue(15),containingBlockData.width,containingBlockData.isWidthAuto));
			usedHeight = usedWidth * embeddedHTMLElement.get_intrinsicRatio();
		} else if(embeddedHTMLElement.get_intrinsicHeight() != null) usedHeight = embeddedHTMLElement.get_intrinsicHeight(); else usedHeight = 150;
		return usedHeight;
	}
	,getComputedAutoMargin: function(marginStyleValue,opositeMargin,containingHTMLElementDimension,computedDimension,isDimensionAuto,computedPaddingsAndBordersDimension,isHorizontalMargin) {
		var usedMargin;
		if(isHorizontalMargin == false) usedMargin = 0.0; else usedMargin = cocktail_core_boxmodel_BoxStylesComputer.prototype.getComputedAutoMargin.call(this,marginStyleValue,opositeMargin,containingHTMLElementDimension,computedDimension,false,computedPaddingsAndBordersDimension,isHorizontalMargin);
		return usedMargin;
	}
	,__class__: cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer
});
var cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer = function() {
	cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.call(this);
};
$hxClasses["cocktail.core.boxmodel.EmbeddedInlineBoxStylesComputer"] = cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer;
cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.__name__ = true;
cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.__super__ = cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer;
cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.prototype,{
	getComputedAutoMargin: function(marginStyleValue,opositeMargin,containingHTMLElementDimension,computedDimension,isDimensionAuto,computedPaddingsAndBordersDimension,isHorizontalMargin) {
		return 0.0;
	}
	,__class__: cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer
});
var cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer = function() {
	cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.call(this);
};
$hxClasses["cocktail.core.boxmodel.EmbeddedFloatBoxStylesComputer"] = cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer;
cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer.__name__ = true;
cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer.__super__ = cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer;
cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.prototype,{
	__class__: cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer
});
var cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer = function() {
	cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.call(this);
};
$hxClasses["cocktail.core.boxmodel.EmbeddedInlineBlockBoxStylesComputer"] = cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer;
cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer.__name__ = true;
cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer.__super__ = cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer;
cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.prototype,{
	__class__: cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer
});
var cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer = function() {
	cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.call(this);
};
$hxClasses["cocktail.core.boxmodel.EmbeddedPositionedBoxStylesComputer"] = cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer;
cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer.__name__ = true;
cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer.__super__ = cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer;
cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.prototype,{
	measurePositionOffsets: function(style,containingBlockData) {
		this.measureHorizontalPositionOffsets(style,containingBlockData);
		this.measureVerticalPositionOffsets(style,containingBlockData);
	}
	,measureHorizontalPositionOffsets: function(style,containingBlockData) {
		var usedValues = style.usedValues;
		if(style.hasAutoLeft == true || style.hasAutoRight == true) {
			if(style.hasAutoMarginLeft == true) usedValues.marginLeft = 0;
			if(style.hasAutoMarginRight == true) usedValues.marginRight = 0;
			if(style.hasAutoLeft == true && style.hasAutoRight == true) {
				usedValues.left = this.getComputedStaticLeft(style,containingBlockData);
				usedValues.right = containingBlockData.width - usedValues.width - usedValues.marginLeft - usedValues.marginRight - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left;
			} else if(style.hasAutoLeft == true) {
				usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23),containingBlockData.width);
				usedValues.left = containingBlockData.width - usedValues.width - usedValues.marginLeft - usedValues.marginRight - usedValues.right - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth;
			} else if(style.hasAutoRight == true) {
				usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22),containingBlockData.width);
				usedValues.right = containingBlockData.width - usedValues.width - usedValues.marginLeft - usedValues.marginRight - usedValues.left - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth;
			}
		} else {
			usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22),containingBlockData.width);
			usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23),containingBlockData.width);
			if(style.hasAutoMarginLeft == true && style.hasAutoMarginRight == true) {
				var margin = (containingBlockData.width - usedValues.left - usedValues.right - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth) / 2;
				var usedMargin = (containingBlockData.width - usedValues.width - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right) / 2;
				if(usedMargin >= 0) {
					usedValues.marginLeft = usedMargin;
					usedValues.marginRight = usedMargin;
				} else {
					usedValues.marginLeft = 0;
					usedValues.marginRight = containingBlockData.width - usedValues.width - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right;
				}
				usedValues.marginLeft = 0;
			} else if(style.hasAutoMarginLeft == true) usedValues.marginLeft = containingBlockData.width - usedValues.width - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right - usedValues.marginRight; else if(style.hasAutoMarginRight == true) usedValues.marginRight = containingBlockData.width - usedValues.width - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right - usedValues.marginLeft;
		}
	}
	,measureVerticalPositionOffsets: function(style,containingBlockData) {
		var usedValues = style.usedValues;
		if(style.hasAutoTop == true || style.hasAutoBottom == true) {
			if(style.hasAutoMarginTop == true) usedValues.marginTop = 0;
			if(style.hasAutoMarginBottom == true) usedValues.marginBottom = 0;
			if(style.hasAutoTop == true && style.hasAutoBottom == true) {
				usedValues.top = this.getComputedStaticTop(style,containingBlockData);
				usedValues.bottom = containingBlockData.height - usedValues.height - usedValues.marginTop - usedValues.marginBottom - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top;
			} else if(style.hasAutoTop == true) {
				usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24),containingBlockData.height);
				usedValues.top = containingBlockData.height - usedValues.height - usedValues.marginTop - usedValues.marginBottom - usedValues.bottom - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth;
			} else if(style.hasAutoBottom == true) {
				usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21),containingBlockData.height);
				usedValues.bottom = containingBlockData.height - usedValues.height - usedValues.marginTop - usedValues.marginBottom - usedValues.top - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth;
			} else {
				usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21),containingBlockData.height);
				usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24),containingBlockData.height);
			}
		} else {
			usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21),containingBlockData.height);
			usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24),containingBlockData.height);
			if(style.hasAutoMarginTop == true && style.hasAutoMarginBottom == true) {
				var margin = (containingBlockData.height - usedValues.top - usedValues.bottom - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth) / 2;
				var usedMargin = (containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom) / 2;
				if(usedMargin >= 0) {
					usedValues.marginTop = usedMargin;
					usedValues.marginBottom = usedMargin;
				} else {
					usedValues.marginTop = 0;
					usedValues.marginBottom = containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom;
				}
			} else if(style.hasAutoMarginTop == true) usedValues.marginTop = containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom - usedValues.marginBottom; else if(style.hasAutoMarginBottom == true) usedValues.marginBottom = containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom - usedValues.marginTop;
		}
	}
	,getComputedStaticLeft: function(style,containingBlockData) {
		return style.usedValues.marginLeft;
	}
	,getComputedStaticTop: function(style,containingBlockData) {
		return style.usedValues.marginTop;
	}
	,__class__: cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer
});
var cocktail_core_boxmodel_InlineBlockBoxStylesComputer = function() {
	cocktail_core_boxmodel_BoxStylesComputer.call(this);
};
$hxClasses["cocktail.core.boxmodel.InlineBlockBoxStylesComputer"] = cocktail_core_boxmodel_InlineBlockBoxStylesComputer;
cocktail_core_boxmodel_InlineBlockBoxStylesComputer.__name__ = true;
cocktail_core_boxmodel_InlineBlockBoxStylesComputer.__super__ = cocktail_core_boxmodel_BoxStylesComputer;
cocktail_core_boxmodel_InlineBlockBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_BoxStylesComputer.prototype,{
	getComputedAutoMargin: function(marginStyleValue,opositeMargin,containingHTMLElementDimension,computedDimension,isDimensionAuto,computedPaddingsAndBordersDimension,isHorizontalMargin) {
		return 0.0;
	}
	,__class__: cocktail_core_boxmodel_InlineBlockBoxStylesComputer
});
var cocktail_core_boxmodel_FloatBoxStylesComputer = function() {
	cocktail_core_boxmodel_InlineBlockBoxStylesComputer.call(this);
};
$hxClasses["cocktail.core.boxmodel.FloatBoxStylesComputer"] = cocktail_core_boxmodel_FloatBoxStylesComputer;
cocktail_core_boxmodel_FloatBoxStylesComputer.__name__ = true;
cocktail_core_boxmodel_FloatBoxStylesComputer.__super__ = cocktail_core_boxmodel_InlineBlockBoxStylesComputer;
cocktail_core_boxmodel_FloatBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_InlineBlockBoxStylesComputer.prototype,{
	getComputedAutoWidth: function(style,containingBlockData) {
		return 0.0;
	}
	,__class__: cocktail_core_boxmodel_FloatBoxStylesComputer
});
var cocktail_core_boxmodel_InLineBoxStylesComputer = function() {
	cocktail_core_boxmodel_BoxStylesComputer.call(this);
};
$hxClasses["cocktail.core.boxmodel.InLineBoxStylesComputer"] = cocktail_core_boxmodel_InLineBoxStylesComputer;
cocktail_core_boxmodel_InLineBoxStylesComputer.__name__ = true;
cocktail_core_boxmodel_InLineBoxStylesComputer.__super__ = cocktail_core_boxmodel_BoxStylesComputer;
cocktail_core_boxmodel_InLineBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_BoxStylesComputer.prototype,{
	measureAutoHeight: function(style,containingBlockData) {
		var computedHeight = this.getComputedAutoHeight(style,containingBlockData);
		style.usedValues.marginTop = 0.0;
		style.usedValues.marginBottom = 0.0;
		return computedHeight;
	}
	,measureHeight: function(style,containingBlockData) {
		var computedHeight = this.getComputedHeight(style,containingBlockData);
		style.usedValues.marginTop = 0.0;
		style.usedValues.marginBottom = 0.0;
		return computedHeight;
	}
	,getComputedAutoMargin: function(marginStyleValue,opositeMargin,containingHTMLElementDimension,computedDimension,isDimensionAuto,computedPaddingsAndBordersDimension,isHorizontalMargin) {
		return 0.0;
	}
	,getComputedWidth: function(style,containingBlockData) {
		return 0.0;
	}
	,getComputedHeight: function(style,containingBlockData) {
		return 0.0;
	}
	,__class__: cocktail_core_boxmodel_InLineBoxStylesComputer
});
var cocktail_core_boxmodel_PositionedBoxStylesComputer = function() {
	cocktail_core_boxmodel_BoxStylesComputer.call(this);
};
$hxClasses["cocktail.core.boxmodel.PositionedBoxStylesComputer"] = cocktail_core_boxmodel_PositionedBoxStylesComputer;
cocktail_core_boxmodel_PositionedBoxStylesComputer.__name__ = true;
cocktail_core_boxmodel_PositionedBoxStylesComputer.__super__ = cocktail_core_boxmodel_BoxStylesComputer;
cocktail_core_boxmodel_PositionedBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_BoxStylesComputer.prototype,{
	measurePositionOffsets: function(style,containingBlockData) {
	}
	,measureAutoWidth: function(style,containingBlockData) {
		var usedValues = style.usedValues;
		var usedWidth = 0.0;
		if(style.hasAutoMarginLeft == true) usedValues.marginLeft = 0; else usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6),style.getTransitionablePropertyValue(7),containingBlockData.width,usedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
		if(style.hasAutoMarginRight == true) usedValues.marginRight = 0; else usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7),style.getTransitionablePropertyValue(6),containingBlockData.width,usedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
		if(style.hasAutoLeft == false && style.hasAutoRight == false) {
			usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22),containingBlockData.width);
			usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23),containingBlockData.width);
			usedWidth = containingBlockData.width - usedValues.marginLeft - usedValues.left - usedValues.right - usedValues.marginRight - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth;
		} else {
			if(style.hasAutoLeft == true) usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23),containingBlockData.width); else if(style.hasAutoRight == true) usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22),containingBlockData.width);
			usedWidth = 0;
		}
		return usedWidth;
	}
	,measureWidth: function(style,containingBlockData) {
		var usedValues = style.usedValues;
		var usedWidth = this.getComputedWidth(style,containingBlockData);
		if(style.hasAutoLeft == false && style.hasAutoRight == false) {
			usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22),containingBlockData.width);
			usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23),containingBlockData.width);
			if(style.hasAutoMarginLeft == true && style.hasAutoMarginRight == true) {
				var usedMargin = (containingBlockData.width - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right) / 2;
				if(usedMargin >= 0) {
					usedValues.marginLeft = usedMargin;
					usedValues.marginRight = usedMargin;
				} else {
					usedValues.marginLeft = 0;
					usedValues.marginRight = containingBlockData.width - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right;
				}
			} else if(style.hasAutoMarginLeft == true) {
				usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7),style.getTransitionablePropertyValue(6),containingBlockData.width,usedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
				usedValues.marginLeft = containingBlockData.width - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right - usedValues.marginRight;
			} else if(style.hasAutoMarginRight == true) {
				usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6),style.getTransitionablePropertyValue(7),containingBlockData.width,usedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
				usedValues.marginRight = containingBlockData.width - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right - usedValues.marginLeft;
			} else {
				usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6),style.getTransitionablePropertyValue(7),containingBlockData.width,usedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
				usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7),style.getTransitionablePropertyValue(6),containingBlockData.width,usedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
			}
		} else {
			if(style.hasAutoMarginLeft == true) usedValues.marginLeft = 0; else usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6),style.getTransitionablePropertyValue(7),containingBlockData.width,usedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
			if(style.hasAutoMarginRight == true) usedValues.marginRight = 0; else usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7),style.getTransitionablePropertyValue(6),containingBlockData.width,usedWidth,style.hasAutoWidth,style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth,true);
			if(style.hasAutoLeft == true && style.hasAutoRight == true) {
				usedValues.left = this.getComputedStaticLeft(style,containingBlockData);
				usedValues.right = containingBlockData.width - usedValues.marginLeft - usedValues.marginRight - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left;
			} else if(style.hasAutoLeft == true) {
				usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23),containingBlockData.width);
				usedValues.left = containingBlockData.width - usedValues.marginLeft - usedValues.marginRight - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.right;
			} else if(style.hasAutoRight == true) {
				usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22),containingBlockData.width);
				usedValues.right = containingBlockData.width - usedValues.marginLeft - usedValues.marginRight - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left;
			}
		}
		return usedWidth;
	}
	,measureAutoHeight: function(style,containingBlockData) {
		var usedValues = style.usedValues;
		var usedHeight = 0.0;
		if(style.hasAutoMarginTop == true) usedValues.marginTop = 0; else usedValues.marginTop = this.getComputedMargin(style.getTransitionablePropertyValue(8),style.getTransitionablePropertyValue(9),containingBlockData.height,usedHeight,style.hasAutoHeight,style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth,false);
		if(style.hasAutoMarginBottom == true) usedValues.marginBottom = 0; else usedValues.marginBottom = this.getComputedMargin(style.getTransitionablePropertyValue(9),style.getTransitionablePropertyValue(8),containingBlockData.height,usedHeight,style.hasAutoHeight,style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth,false);
		if(style.hasAutoTop == false && style.hasAutoBottom == false) {
			usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21),containingBlockData.height);
			usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24),containingBlockData.height);
			usedHeight = containingBlockData.height - usedValues.marginTop - usedValues.top - usedValues.bottom - usedValues.marginBottom - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth;
		} else if(style.hasAutoBottom == true) {
			usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21),containingBlockData.height);
			usedValues.bottom = containingBlockData.height - usedValues.marginTop - usedValues.marginBottom - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top;
		} else if(style.hasAutoTop == true) {
			usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24),containingBlockData.height);
			usedValues.top = containingBlockData.height - usedValues.marginTop - usedValues.marginBottom - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.bottom;
		}
		return usedHeight;
	}
	,measureHeight: function(style,containingBlockData) {
		var usedValues = style.usedValues;
		var usedHeight = this.getComputedHeight(style,containingBlockData);
		if(style.hasAutoTop == false && style.hasAutoBottom == false) {
			usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21),containingBlockData.height);
			usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24),containingBlockData.height);
			if(style.hasAutoMarginTop == true && style.hasAutoMarginBottom == true) {
				var usedMargin = (containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom) / 2;
				if(usedMargin >= 0) {
					usedValues.marginTop = usedMargin;
					usedValues.marginBottom = usedMargin;
				} else {
					usedValues.marginBottom = 0;
					usedValues.marginTop = containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.bottom - usedValues.top;
				}
			} else if(style.hasAutoMarginTop == true) {
				usedValues.marginBottom = this.getComputedMargin(style.getTransitionablePropertyValue(9),style.getTransitionablePropertyValue(8),containingBlockData.height,usedHeight,style.hasAutoHeight,style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth,false);
				usedValues.marginTop = containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom - usedValues.marginBottom;
			} else if(style.hasAutoMarginBottom == true) {
				usedValues.marginTop = this.getComputedMargin(style.getTransitionablePropertyValue(8),style.getTransitionablePropertyValue(9),containingBlockData.height,usedHeight,style.hasAutoHeight,style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth,false);
				usedValues.marginBottom = containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom - usedValues.marginTop;
			} else {
				usedValues.marginTop = this.getComputedMargin(style.getTransitionablePropertyValue(8),style.getTransitionablePropertyValue(9),containingBlockData.height,usedHeight,style.hasAutoHeight,style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth,false);
				usedValues.marginBottom = this.getComputedMargin(style.getTransitionablePropertyValue(9),style.getTransitionablePropertyValue(8),containingBlockData.height,usedHeight,style.hasAutoHeight,style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth,false);
			}
		} else {
			if(style.hasAutoMarginTop == true) usedValues.marginTop = 0; else usedValues.marginTop = this.getComputedMargin(style.getTransitionablePropertyValue(8),style.getTransitionablePropertyValue(9),containingBlockData.height,usedHeight,style.hasAutoHeight,style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth,false);
			if(style.hasAutoMarginBottom == true) usedValues.marginBottom = 0; else usedValues.marginBottom = this.getComputedMargin(style.getTransitionablePropertyValue(9),style.getTransitionablePropertyValue(8),containingBlockData.height,usedHeight,style.hasAutoHeight,style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth,false);
			if(style.hasAutoTop == true && style.hasAutoBottom == true) {
				usedValues.top = this.getComputedStaticTop(style,containingBlockData);
				usedValues.bottom = containingBlockData.height - usedValues.marginTop - usedValues.marginBottom - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top;
			} else if(style.hasAutoBottom == true) {
				usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21),containingBlockData.height);
				usedValues.bottom = containingBlockData.height - usedValues.marginTop - usedValues.marginBottom - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top;
			} else if(style.hasAutoTop == true) {
				usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24),containingBlockData.height);
				usedValues.top = containingBlockData.height - usedValues.marginTop - usedValues.marginBottom - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.bottom;
			}
		}
		return usedHeight;
	}
	,getComputedStaticLeft: function(style,containingBlockData) {
		return style.usedValues.marginLeft;
	}
	,getComputedStaticTop: function(style,containingBlockData) {
		return style.usedValues.marginTop;
	}
	,__class__: cocktail_core_boxmodel_PositionedBoxStylesComputer
});
var cocktail_core_event_EventTarget = function() {
};
$hxClasses["cocktail.core.event.EventTarget"] = cocktail_core_event_EventTarget;
cocktail_core_event_EventTarget.__name__ = true;
cocktail_core_event_EventTarget.prototype = {
	dispatchEvent: function(evt) {
		evt.currentTarget = this;
		if(evt.dispatched == false) {
			evt.target = this;
			evt.dispatched = true;
			var targetAncestors = this.getTargetAncestors();
			evt.eventPhase = 1;
			targetAncestors.reverse();
			var length = targetAncestors.length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				targetAncestors[i].dispatchEvent(evt);
				if(this.shouldStopEventPropagation(evt) == true) return this.endEventDispatching(evt);
			}
			evt.eventPhase = 2;
			this.dispatchEvent(evt);
			if(this.shouldStopEventPropagation(evt) == true) return this.endEventDispatching(evt);
			if(evt.bubbles == true) {
				evt.eventPhase = 3;
				targetAncestors.reverse();
				var length1 = targetAncestors.length;
				var _g1 = 0;
				while(_g1 < length1) {
					var i1 = _g1++;
					targetAncestors[i1].dispatchEvent(evt);
					if(this.shouldStopEventPropagation(evt) == true) return this.endEventDispatching(evt);
				}
				return this.endEventDispatching(evt);
			}
		} else if(this._registeredEventListeners != null) {
			var eventRegisteredForEventType = this._registeredEventListeners.get(evt.type);
			if(eventRegisteredForEventType != null) this.doDispatchEvent(eventRegisteredForEventType,evt);
		}
		return evt.defaultPrevented;
	}
	,addEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(this._registeredEventListeners == null) this._registeredEventListeners = new haxe_ds_StringMap();
		if(this._registeredEventListeners.exists(type) == false) {
			var value = [];
			this._registeredEventListeners.set(type,value);
		}
		var eventListener = new cocktail_core_event_EventListener(type,listener,useCapture);
		this._registeredEventListeners.get(type).push(eventListener);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(this._registeredEventListeners == null) return;
		var registeredEventListenersForType = this._registeredEventListeners.get(type);
		if(registeredEventListenersForType != null) {
			var newEventListeners = [];
			var length = registeredEventListenersForType.length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				var eventListener = registeredEventListenersForType[i];
				if(eventListener.eventType != type || eventListener.useCapture != useCapture || eventListener.listener != listener) newEventListeners.push(eventListener);
			}
			this._registeredEventListeners.set(type,newEventListeners);
		}
	}
	,doDispatchEvent: function(eventListeners,evt) {
		var length = eventListeners.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var eventListener = eventListeners[i];
			if(evt.eventPhase == 1) {
				if(eventListener.useCapture == true) eventListener.handleEvent(evt);
			} else if(evt.eventPhase == 3) {
				if(eventListener.useCapture == false) eventListener.handleEvent(evt);
			} else if(evt.eventPhase == 2) eventListener.handleEvent(evt);
			if(evt.immediatePropagationStopped == true) return;
		}
	}
	,shouldStopEventPropagation: function(evt) {
		return evt.propagationStopped == true || evt.immediatePropagationStopped == true;
	}
	,endEventDispatching: function(evt) {
		var defaultPrevented = evt.defaultPrevented;
		this.executeDefaultActionIfNeeded(defaultPrevented,evt);
		return defaultPrevented;
	}
	,getTargetAncestors: function() {
		this._targetAncestors = [];
		return this._targetAncestors;
	}
	,executeDefaultActionIfNeeded: function(defaultPrevented,event) {
	}
	,__class__: cocktail_core_event_EventTarget
};
var cocktail_core_config_Config = function() {
	cocktail_core_event_EventTarget.call(this);
	this.touchMovePreventClickDistance = 10;
	this.useStageVideoIfAvailable = false;
	this.defaultFont = "serif";
	this.defaultFontColor = "#000000";
	this.xxSmallFontSize = 9;
	this.xSmallFontSize = 10;
	this.smallFontSize = 13;
	this.mediumFontSize = 16;
	this.largeFontSize = 18;
	this.xLargeFontSize = 24;
	this.xxLargeFontSize = 32;
	this.thinBorderWidth = 1;
	this.mediumBorderWidth = 3;
	this.thickBorderWidth = 5;
	this.enableCompositing = false;
	this.objectBelowWhenNoCompositing = true;
	this.videoBelowWhenNoCompositing = true;
};
$hxClasses["cocktail.core.config.Config"] = cocktail_core_config_Config;
cocktail_core_config_Config.__name__ = true;
cocktail_core_config_Config._instance = null;
cocktail_core_config_Config.getInstance = function() {
	if(cocktail_core_config_Config._instance == null) cocktail_core_config_Config._instance = new cocktail_core_config_Config();
	return cocktail_core_config_Config._instance;
};
cocktail_core_config_Config.__super__ = cocktail_core_event_EventTarget;
cocktail_core_config_Config.prototype = $extend(cocktail_core_event_EventTarget.prototype,{
	updateConfig: function(name,value) {
		var didUpdate = false;
		switch(name) {
		case "useStageVideoIfAvailable":case "enableCompositing":case "objectBelowWhenNoCompositing":case "videoBelowWhenNoCompositing":
			this.updateBoolParam(name,value);
			didUpdate = true;
			break;
		case "touchMovePreventClickDistance":case "xxSmallFontSize":case "xSmallFontSize":case "smallFontSize":case "mediumFontSize":case "largeFontSize":case "xLargeFontSize":case "xxLargeFontSize":case "thinBorderWidth":case "mediumBorderWidth":case "thickBorderWidth":
			this.updateIntParam(name,value);
			didUpdate = true;
			break;
		case "defaultFont":case "defaultFontColor":
			this.updateStringParam(name,value);
			didUpdate = true;
			break;
		}
		if(didUpdate == true) {
			var configEvent = new cocktail_core_event_CustomEvent();
			configEvent.initCustomEvent("configchanged",false,false,name);
			this.dispatchEvent(configEvent);
		}
	}
	,updateBoolParam: function(name,value) {
		if(value == "true") this[name] = true; else if(value == "false") this[name] = false;
	}
	,updateIntParam: function(name,value) {
		var $int = Std.parseInt(value);
		if($int != null) this[name] = $int;
	}
	,updateStringParam: function(name,value) {
		this[name] = value;
	}
	,__class__: cocktail_core_config_Config
});
var cocktail_core_css_CSSConstants = function() { };
$hxClasses["cocktail.core.css.CSSConstants"] = cocktail_core_css_CSSConstants;
cocktail_core_css_CSSConstants.__name__ = true;
cocktail_core_css_CSSConstants.getPropertyIndexFromName = function(name) {
	switch(name) {
	case "display":
		return 0;
	case "position":
		return 1;
	case "float":
		return 2;
	case "clear":
		return 3;
	case "z-index":
		return 4;
	case "margin":
		return 5;
	case "margin-left":
		return 6;
	case "margin-top":
		return 8;
	case "margin-right":
		return 7;
	case "margin-bottom":
		return 9;
	case "padding":
		return 10;
	case "padding-left":
		return 11;
	case "padding-right":
		return 12;
	case "padding-top":
		return 13;
	case "padding-bottom":
		return 14;
	case "width":
		return 15;
	case "height":
		return 16;
	case "min-height":
		return 17;
	case "max-height":
		return 18;
	case "min-width":
		return 19;
	case "max-width":
		return 20;
	case "top":
		return 21;
	case "right":
		return 23;
	case "bottom":
		return 24;
	case "left":
		return 22;
	case "background-color":
		return 25;
	case "background-image":
		return 26;
	case "background-repeat":
		return 27;
	case "background-origin":
		return 28;
	case "background-size":
		return 29;
	case "background-position":
		return 30;
	case "background-clip":
		return 31;
	case "background-attachment":
		return 32;
	case "background":
		return 33;
	case "font-size":
		return 34;
	case "font-weight":
		return 35;
	case "font-style":
		return 36;
	case "font-family":
		return 37;
	case "font-variant":
		return 38;
	case "font":
		return 39;
	case "color":
		return 40;
	case "line-height":
		return 41;
	case "text-transform":
		return 42;
	case "letter-spacing":
		return 43;
	case "word-spacing":
		return 44;
	case "white-space":
		return 45;
	case "text-align":
		return 46;
	case "text-indent":
		return 47;
	case "vertical-align":
		return 48;
	case "visibility":
		return 49;
	case "overflow":
		return 50;
	case "overflow-x":
		return 51;
	case "overflow-y":
		return 52;
	case "opacity":
		return 53;
	case "cursor":
		return 54;
	case "transition-duration":
		return 55;
	case "transition-delay":
		return 56;
	case "transition-property":
		return 57;
	case "transition-timing-function":
		return 58;
	case "transition":
		return 59;
	case "transform-origin":
		return 60;
	case "transform":
		return 61;
	case "border-top-width":
		return 62;
	case "border-right-width":
		return 63;
	case "border-bottom-width":
		return 64;
	case "border-left-width":
		return 65;
	case "border-width":
		return 66;
	case "border-top-color":
		return 67;
	case "border-right-color":
		return 68;
	case "border-bottom-color":
		return 69;
	case "border-left-color":
		return 70;
	case "border-color":
		return 71;
	case "border-top-style":
		return 72;
	case "border-right-style":
		return 73;
	case "border-bottom-style":
		return 74;
	case "border-left-style":
		return 75;
	case "border-style":
		return 76;
	case "border-top":
		return 77;
	case "border-right":
		return 78;
	case "border-bottom":
		return 79;
	case "border-left":
		return 80;
	case "border":
		return 81;
	case "outline-width":
		return 82;
	case "outline-style":
		return 83;
	case "outline-color":
		return 84;
	case "outline":
		return 85;
	case "text-decoration":
		return 86;
	default:
		return -1;
	}
};
cocktail_core_css_CSSConstants.getPropertyNameFromIndex = function(index) {
	switch(index) {
	case 0:
		return "display";
	case 1:
		return "position";
	case 2:
		return "float";
	case 3:
		return "clear";
	case 4:
		return "z-index";
	case 5:
		return "margin";
	case 6:
		return "margin-left";
	case 8:
		return "margin-top";
	case 7:
		return "margin-right";
	case 9:
		return "margin-bottom";
	case 10:
		return "padding";
	case 11:
		return "padding-left";
	case 12:
		return "padding-right";
	case 13:
		return "padding-top";
	case 14:
		return "padding-bottom";
	case 15:
		return "width";
	case 16:
		return "height";
	case 17:
		return "min-height";
	case 18:
		return "max-height";
	case 19:
		return "min-width";
	case 20:
		return "max-width";
	case 21:
		return "top";
	case 23:
		return "right";
	case 24:
		return "bottom";
	case 22:
		return "left";
	case 25:
		return "background-color";
	case 26:
		return "background-image";
	case 27:
		return "background-repeat";
	case 28:
		return "background-origin";
	case 29:
		return "background-size";
	case 30:
		return "background-position";
	case 31:
		return "background-clip";
	case 32:
		return "background-attachment";
	case 33:
		return "background";
	case 34:
		return "font-size";
	case 35:
		return "font-weight";
	case 36:
		return "font-style";
	case 37:
		return "font-family";
	case 38:
		return "font-variant";
	case 39:
		return "font";
	case 40:
		return "color";
	case 41:
		return "line-height";
	case 42:
		return "text-transform";
	case 43:
		return "letter-spacing";
	case 44:
		return "word-spacing";
	case 45:
		return "white-space";
	case 46:
		return "text-align";
	case 47:
		return "text-indent";
	case 48:
		return "vertical-align";
	case 49:
		return "visibility";
	case 50:
		return "overflow";
	case 51:
		return "overflow-x";
	case 52:
		return "overflow-y";
	case 53:
		return "opacity";
	case 54:
		return "cursor";
	case 55:
		return "transition-duration";
	case 56:
		return "transition-delay";
	case 57:
		return "transition-property";
	case 58:
		return "transition-timing-function";
	case 59:
		return "transition";
	case 60:
		return "transform-origin";
	case 61:
		return "transform";
	case 62:
		return "border-top-width";
	case 63:
		return "border-right-width";
	case 64:
		return "border-bottom-width";
	case 65:
		return "border-left-width";
	case 66:
		return "border-width";
	case 67:
		return "border-top-color";
	case 68:
		return "border-right-color";
	case 69:
		return "border-bottom-color";
	case 70:
		return "border-left-color";
	case 71:
		return "border-color";
	case 72:
		return "border-top-style";
	case 73:
		return "border-right-style";
	case 74:
		return "border-bottom-style";
	case 75:
		return "border-left-style";
	case 76:
		return "border-style";
	case 77:
		return "border-top";
	case 78:
		return "border-right";
	case 79:
		return "border-bottom";
	case 80:
		return "border-left";
	case 81:
		return "border";
	case 82:
		return "outline-width";
	case 83:
		return "outline-style";
	case 84:
		return "outline-color";
	case 85:
		return "outline";
	case 86:
		return "text-decoration";
	default:
		throw new js__$Boot_HaxeError("unknown property");
	}
};
var cocktail_core_css_TypedPropertyVO = function() {
};
$hxClasses["cocktail.core.css.TypedPropertyVO"] = cocktail_core_css_TypedPropertyVO;
cocktail_core_css_TypedPropertyVO.__name__ = true;
cocktail_core_css_TypedPropertyVO.prototype = {
	__class__: cocktail_core_css_TypedPropertyVO
};
var cocktail_core_css_PropertyVO = function() {
	this.important = false;
};
$hxClasses["cocktail.core.css.PropertyVO"] = cocktail_core_css_PropertyVO;
cocktail_core_css_PropertyVO.__name__ = true;
cocktail_core_css_PropertyVO.prototype = {
	__class__: cocktail_core_css_PropertyVO
};
var cocktail_core_css_StyleDeclarationVO = function() {
};
$hxClasses["cocktail.core.css.StyleDeclarationVO"] = cocktail_core_css_StyleDeclarationVO;
cocktail_core_css_StyleDeclarationVO.__name__ = true;
cocktail_core_css_StyleDeclarationVO.prototype = {
	__class__: cocktail_core_css_StyleDeclarationVO
};
var cocktail_core_css_MatchedPseudoClassesVO = function(hover,focus,active,link,enabled,disabled,checked,fullscreen,hasId,hasClasses,nodeId,nodeClassList,nodeType) {
	this.hover = hover;
	this.focus = focus;
	this.active = active;
	this.link = link;
	this.enabled = enabled;
	this.disabled = disabled;
	this.checked = checked;
	this.fullscreen = fullscreen;
	this.hasId = hasId;
	this.hasClasses = false;
	this.nodeId = nodeId;
	this.nodeClassList = nodeClassList;
	this.nodeType = nodeType;
};
$hxClasses["cocktail.core.css.MatchedPseudoClassesVO"] = cocktail_core_css_MatchedPseudoClassesVO;
cocktail_core_css_MatchedPseudoClassesVO.__name__ = true;
cocktail_core_css_MatchedPseudoClassesVO.prototype = {
	__class__: cocktail_core_css_MatchedPseudoClassesVO
};
var cocktail_core_css_PropertyOriginValue = $hxClasses["cocktail.core.css.PropertyOriginValue"] = { __ename__ : true, __constructs__ : ["AUTHOR","USER_AGENT"] };
cocktail_core_css_PropertyOriginValue.AUTHOR = ["AUTHOR",0];
cocktail_core_css_PropertyOriginValue.AUTHOR.toString = $estr;
cocktail_core_css_PropertyOriginValue.AUTHOR.__enum__ = cocktail_core_css_PropertyOriginValue;
cocktail_core_css_PropertyOriginValue.USER_AGENT = ["USER_AGENT",1];
cocktail_core_css_PropertyOriginValue.USER_AGENT.toString = $estr;
cocktail_core_css_PropertyOriginValue.USER_AGENT.__enum__ = cocktail_core_css_PropertyOriginValue;
var cocktail_core_css_UsedValuesVO = function() {
	this.minHeight = 0.0;
	this.maxHeight = 0.0;
	this.minWidth = 0.0;
	this.maxWidth = 0.0;
	this.width = 0.0;
	this.height = 0.0;
	this.marginLeft = 0.0;
	this.marginRight = 0.0;
	this.marginTop = 0.0;
	this.marginBottom = 0.0;
	this.paddingLeft = 0.0;
	this.paddingRight = 0.0;
	this.paddingTop = 0.0;
	this.paddingBottom = 0.0;
	this.left = 0.0;
	this.right = 0.0;
	this.top = 0.0;
	this.bottom = 0.0;
	this.textIndent = 0;
	this.lineHeight = 0.0;
	this.letterSpacing = 0.0;
	this.color = new cocktail_core_css_ColorVO(0,1.0);
	this.transformOrigin = new cocktail_core_geom_PointVO(0.0,0.0);
	this.transform = new cocktail_core_geom_Matrix();
	this.backgroundColor = new cocktail_core_css_ColorVO(0,0.0);
	this.borderLeftWidth = 0.0;
	this.borderRightWidth = 0.0;
	this.borderTopWidth = 0.0;
	this.borderBottomWidth = 0.0;
	this.borderLeftColor = new cocktail_core_css_ColorVO(0,1.0);
	this.borderRightColor = new cocktail_core_css_ColorVO(0,1.0);
	this.borderTopColor = new cocktail_core_css_ColorVO(0,1.0);
	this.borderBottomColor = new cocktail_core_css_ColorVO(0,1.0);
	this.outlineWidth = 0.0;
	this.outlineColor = new cocktail_core_css_ColorVO(0,1.0);
};
$hxClasses["cocktail.core.css.UsedValuesVO"] = cocktail_core_css_UsedValuesVO;
cocktail_core_css_UsedValuesVO.__name__ = true;
cocktail_core_css_UsedValuesVO.prototype = {
	__class__: cocktail_core_css_UsedValuesVO
};
var cocktail_core_css_ColorVO = function(color,alpha) {
	this.color = color;
	this.alpha = alpha;
};
$hxClasses["cocktail.core.css.ColorVO"] = cocktail_core_css_ColorVO;
cocktail_core_css_ColorVO.__name__ = true;
cocktail_core_css_ColorVO.prototype = {
	__class__: cocktail_core_css_ColorVO
};
var cocktail_core_css_SelectorSpecificityVO = function() {
	this.idSelectorsNumber = 0;
	this.classAttributesAndPseudoClassesNumber = 0;
	this.typeAndPseudoElementsNumber = 0;
};
$hxClasses["cocktail.core.css.SelectorSpecificityVO"] = cocktail_core_css_SelectorSpecificityVO;
cocktail_core_css_SelectorSpecificityVO.__name__ = true;
cocktail_core_css_SelectorSpecificityVO.prototype = {
	__class__: cocktail_core_css_SelectorSpecificityVO
};
var cocktail_core_css_SelectorVO = function(components,pseudoElement,beginsWithClass,firstClass,beginsWithId,firstId,beginsWithType,firstType,isSimpleClassSelector,isSimpleIdSelector,isSimpleTypeSelector) {
	this.components = components;
	this.pseudoElement = pseudoElement;
	this.beginsWithClass = beginsWithClass;
	this.firstClass = firstClass;
	this.beginsWithId = beginsWithId;
	this.firstId = firstId;
	this.beginsWithType = beginsWithType;
	this.firstType = firstType;
	this.isSimpleClassSelector = isSimpleClassSelector;
	this.isSimpleIdSelector = isSimpleIdSelector;
	this.isSimpleTypeSelector = isSimpleTypeSelector;
};
$hxClasses["cocktail.core.css.SelectorVO"] = cocktail_core_css_SelectorVO;
cocktail_core_css_SelectorVO.__name__ = true;
cocktail_core_css_SelectorVO.prototype = {
	__class__: cocktail_core_css_SelectorVO
};
var cocktail_core_css_SimpleSelectorSequenceVO = function(startValue,simpleSelectors) {
	this.startValue = startValue;
	this.simpleSelectors = simpleSelectors;
};
$hxClasses["cocktail.core.css.SimpleSelectorSequenceVO"] = cocktail_core_css_SimpleSelectorSequenceVO;
cocktail_core_css_SimpleSelectorSequenceVO.__name__ = true;
cocktail_core_css_SimpleSelectorSequenceVO.prototype = {
	__class__: cocktail_core_css_SimpleSelectorSequenceVO
};
var cocktail_core_css_SelectorComponentValue = $hxClasses["cocktail.core.css.SelectorComponentValue"] = { __ename__ : true, __constructs__ : ["SIMPLE_SELECTOR_SEQUENCE","COMBINATOR"] };
cocktail_core_css_SelectorComponentValue.SIMPLE_SELECTOR_SEQUENCE = function(value) { var $x = ["SIMPLE_SELECTOR_SEQUENCE",0,value]; $x.__enum__ = cocktail_core_css_SelectorComponentValue; $x.toString = $estr; return $x; };
cocktail_core_css_SelectorComponentValue.COMBINATOR = function(value) { var $x = ["COMBINATOR",1,value]; $x.__enum__ = cocktail_core_css_SelectorComponentValue; $x.toString = $estr; return $x; };
var cocktail_core_css_SimpleSelectorSequenceItemValue = $hxClasses["cocktail.core.css.SimpleSelectorSequenceItemValue"] = { __ename__ : true, __constructs__ : ["ATTRIBUTE","PSEUDO_CLASS","CSS_CLASS","ID"] };
cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE = function(value) { var $x = ["ATTRIBUTE",0,value]; $x.__enum__ = cocktail_core_css_SimpleSelectorSequenceItemValue; $x.toString = $estr; return $x; };
cocktail_core_css_SimpleSelectorSequenceItemValue.PSEUDO_CLASS = function(value) { var $x = ["PSEUDO_CLASS",1,value]; $x.__enum__ = cocktail_core_css_SimpleSelectorSequenceItemValue; $x.toString = $estr; return $x; };
cocktail_core_css_SimpleSelectorSequenceItemValue.CSS_CLASS = function(value) { var $x = ["CSS_CLASS",2,value]; $x.__enum__ = cocktail_core_css_SimpleSelectorSequenceItemValue; $x.toString = $estr; return $x; };
cocktail_core_css_SimpleSelectorSequenceItemValue.ID = function(value) { var $x = ["ID",3,value]; $x.__enum__ = cocktail_core_css_SimpleSelectorSequenceItemValue; $x.toString = $estr; return $x; };
var cocktail_core_css_SimpleSelectorSequenceStartValue = $hxClasses["cocktail.core.css.SimpleSelectorSequenceStartValue"] = { __ename__ : true, __constructs__ : ["UNIVERSAL","TYPE"] };
cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL = ["UNIVERSAL",0];
cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL.toString = $estr;
cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL.__enum__ = cocktail_core_css_SimpleSelectorSequenceStartValue;
cocktail_core_css_SimpleSelectorSequenceStartValue.TYPE = function(value) { var $x = ["TYPE",1,value]; $x.__enum__ = cocktail_core_css_SimpleSelectorSequenceStartValue; $x.toString = $estr; return $x; };
var cocktail_core_css_AttributeSelectorValue = $hxClasses["cocktail.core.css.AttributeSelectorValue"] = { __ename__ : true, __constructs__ : ["ATTRIBUTE","ATTRIBUTE_VALUE","ATTRIBUTE_LIST","ATTRIBUTE_VALUE_BEGINS","ATTRIBUTE_VALUE_ENDS","ATTRIBUTE_VALUE_CONTAINS","ATTRIBUTE_VALUE_BEGINS_HYPHEN_LIST"] };
cocktail_core_css_AttributeSelectorValue.ATTRIBUTE = function(value) { var $x = ["ATTRIBUTE",0,value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE = function(name,value) { var $x = ["ATTRIBUTE_VALUE",1,name,value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_LIST = function(name,value) { var $x = ["ATTRIBUTE_LIST",2,name,value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_BEGINS = function(name,value) { var $x = ["ATTRIBUTE_VALUE_BEGINS",3,name,value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_ENDS = function(name,value) { var $x = ["ATTRIBUTE_VALUE_ENDS",4,name,value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_CONTAINS = function(name,value) { var $x = ["ATTRIBUTE_VALUE_CONTAINS",5,name,value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_BEGINS_HYPHEN_LIST = function(name,value) { var $x = ["ATTRIBUTE_VALUE_BEGINS_HYPHEN_LIST",6,name,value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
var cocktail_core_css_PseudoClassSelectorValue = $hxClasses["cocktail.core.css.PseudoClassSelectorValue"] = { __ename__ : true, __constructs__ : ["UNKNOWN","STRUCTURAL","LINK","TARGET","FULLSCREEN","LANG","USER_ACTION","UI_ELEMENT_STATES","NOT"] };
cocktail_core_css_PseudoClassSelectorValue.UNKNOWN = ["UNKNOWN",0];
cocktail_core_css_PseudoClassSelectorValue.UNKNOWN.toString = $estr;
cocktail_core_css_PseudoClassSelectorValue.UNKNOWN.__enum__ = cocktail_core_css_PseudoClassSelectorValue;
cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL = function(value) { var $x = ["STRUCTURAL",1,value]; $x.__enum__ = cocktail_core_css_PseudoClassSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_PseudoClassSelectorValue.LINK = function(value) { var $x = ["LINK",2,value]; $x.__enum__ = cocktail_core_css_PseudoClassSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_PseudoClassSelectorValue.TARGET = ["TARGET",3];
cocktail_core_css_PseudoClassSelectorValue.TARGET.toString = $estr;
cocktail_core_css_PseudoClassSelectorValue.TARGET.__enum__ = cocktail_core_css_PseudoClassSelectorValue;
cocktail_core_css_PseudoClassSelectorValue.FULLSCREEN = ["FULLSCREEN",4];
cocktail_core_css_PseudoClassSelectorValue.FULLSCREEN.toString = $estr;
cocktail_core_css_PseudoClassSelectorValue.FULLSCREEN.__enum__ = cocktail_core_css_PseudoClassSelectorValue;
cocktail_core_css_PseudoClassSelectorValue.LANG = function(value) { var $x = ["LANG",5,value]; $x.__enum__ = cocktail_core_css_PseudoClassSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_PseudoClassSelectorValue.USER_ACTION = function(value) { var $x = ["USER_ACTION",6,value]; $x.__enum__ = cocktail_core_css_PseudoClassSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_PseudoClassSelectorValue.UI_ELEMENT_STATES = function(value) { var $x = ["UI_ELEMENT_STATES",7,value]; $x.__enum__ = cocktail_core_css_PseudoClassSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_PseudoClassSelectorValue.NOT = function(value) { var $x = ["NOT",8,value]; $x.__enum__ = cocktail_core_css_PseudoClassSelectorValue; $x.toString = $estr; return $x; };
var cocktail_core_css_StructuralPseudoClassSelectorValue = $hxClasses["cocktail.core.css.StructuralPseudoClassSelectorValue"] = { __ename__ : true, __constructs__ : ["ROOT","FIRST_CHILD","LAST_CHILD","FIRST_OF_TYPE","LAST_OF_TYPE","ONLY_CHILD","ONLY_OF_TYPE","EMPTY","NTH_CHILD","NTH_LAST_CHILD","NTH_OF_TYPE","NTH_LAST_OF_TYPE"] };
cocktail_core_css_StructuralPseudoClassSelectorValue.ROOT = ["ROOT",0];
cocktail_core_css_StructuralPseudoClassSelectorValue.ROOT.toString = $estr;
cocktail_core_css_StructuralPseudoClassSelectorValue.ROOT.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_CHILD = ["FIRST_CHILD",1];
cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_CHILD.toString = $estr;
cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_CHILD.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_CHILD = ["LAST_CHILD",2];
cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_CHILD.toString = $estr;
cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_CHILD.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_OF_TYPE = ["FIRST_OF_TYPE",3];
cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_OF_TYPE.toString = $estr;
cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_OF_TYPE.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_OF_TYPE = ["LAST_OF_TYPE",4];
cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_OF_TYPE.toString = $estr;
cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_OF_TYPE.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_CHILD = ["ONLY_CHILD",5];
cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_CHILD.toString = $estr;
cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_CHILD.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_OF_TYPE = ["ONLY_OF_TYPE",6];
cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_OF_TYPE.toString = $estr;
cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_OF_TYPE.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
cocktail_core_css_StructuralPseudoClassSelectorValue.EMPTY = ["EMPTY",7];
cocktail_core_css_StructuralPseudoClassSelectorValue.EMPTY.toString = $estr;
cocktail_core_css_StructuralPseudoClassSelectorValue.EMPTY.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
cocktail_core_css_StructuralPseudoClassSelectorValue.NTH_CHILD = function(value) { var $x = ["NTH_CHILD",8,value]; $x.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_StructuralPseudoClassSelectorValue.NTH_LAST_CHILD = function(value) { var $x = ["NTH_LAST_CHILD",9,value]; $x.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_StructuralPseudoClassSelectorValue.NTH_OF_TYPE = function(value) { var $x = ["NTH_OF_TYPE",10,value]; $x.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue; $x.toString = $estr; return $x; };
cocktail_core_css_StructuralPseudoClassSelectorValue.NTH_LAST_OF_TYPE = function(value) { var $x = ["NTH_LAST_OF_TYPE",11,value]; $x.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue; $x.toString = $estr; return $x; };
var cocktail_core_css_StructuralPseudoClassArgumentValue = $hxClasses["cocktail.core.css.StructuralPseudoClassArgumentValue"] = { __ename__ : true, __constructs__ : ["ODD","EVEN"] };
cocktail_core_css_StructuralPseudoClassArgumentValue.ODD = ["ODD",0];
cocktail_core_css_StructuralPseudoClassArgumentValue.ODD.toString = $estr;
cocktail_core_css_StructuralPseudoClassArgumentValue.ODD.__enum__ = cocktail_core_css_StructuralPseudoClassArgumentValue;
cocktail_core_css_StructuralPseudoClassArgumentValue.EVEN = ["EVEN",1];
cocktail_core_css_StructuralPseudoClassArgumentValue.EVEN.toString = $estr;
cocktail_core_css_StructuralPseudoClassArgumentValue.EVEN.__enum__ = cocktail_core_css_StructuralPseudoClassArgumentValue;
var cocktail_core_css_LinkPseudoClassValue = $hxClasses["cocktail.core.css.LinkPseudoClassValue"] = { __ename__ : true, __constructs__ : ["LINK","VISITED"] };
cocktail_core_css_LinkPseudoClassValue.LINK = ["LINK",0];
cocktail_core_css_LinkPseudoClassValue.LINK.toString = $estr;
cocktail_core_css_LinkPseudoClassValue.LINK.__enum__ = cocktail_core_css_LinkPseudoClassValue;
cocktail_core_css_LinkPseudoClassValue.VISITED = ["VISITED",1];
cocktail_core_css_LinkPseudoClassValue.VISITED.toString = $estr;
cocktail_core_css_LinkPseudoClassValue.VISITED.__enum__ = cocktail_core_css_LinkPseudoClassValue;
var cocktail_core_css_UserActionPseudoClassValue = $hxClasses["cocktail.core.css.UserActionPseudoClassValue"] = { __ename__ : true, __constructs__ : ["ACTIVE","HOVER","FOCUS"] };
cocktail_core_css_UserActionPseudoClassValue.ACTIVE = ["ACTIVE",0];
cocktail_core_css_UserActionPseudoClassValue.ACTIVE.toString = $estr;
cocktail_core_css_UserActionPseudoClassValue.ACTIVE.__enum__ = cocktail_core_css_UserActionPseudoClassValue;
cocktail_core_css_UserActionPseudoClassValue.HOVER = ["HOVER",1];
cocktail_core_css_UserActionPseudoClassValue.HOVER.toString = $estr;
cocktail_core_css_UserActionPseudoClassValue.HOVER.__enum__ = cocktail_core_css_UserActionPseudoClassValue;
cocktail_core_css_UserActionPseudoClassValue.FOCUS = ["FOCUS",2];
cocktail_core_css_UserActionPseudoClassValue.FOCUS.toString = $estr;
cocktail_core_css_UserActionPseudoClassValue.FOCUS.__enum__ = cocktail_core_css_UserActionPseudoClassValue;
var cocktail_core_css_UIElementStatesValue = $hxClasses["cocktail.core.css.UIElementStatesValue"] = { __ename__ : true, __constructs__ : ["ENABLED","DISABLED","CHECKED"] };
cocktail_core_css_UIElementStatesValue.ENABLED = ["ENABLED",0];
cocktail_core_css_UIElementStatesValue.ENABLED.toString = $estr;
cocktail_core_css_UIElementStatesValue.ENABLED.__enum__ = cocktail_core_css_UIElementStatesValue;
cocktail_core_css_UIElementStatesValue.DISABLED = ["DISABLED",1];
cocktail_core_css_UIElementStatesValue.DISABLED.toString = $estr;
cocktail_core_css_UIElementStatesValue.DISABLED.__enum__ = cocktail_core_css_UIElementStatesValue;
cocktail_core_css_UIElementStatesValue.CHECKED = ["CHECKED",2];
cocktail_core_css_UIElementStatesValue.CHECKED.toString = $estr;
cocktail_core_css_UIElementStatesValue.CHECKED.__enum__ = cocktail_core_css_UIElementStatesValue;
var cocktail_core_css_PseudoElementSelectorValue = $hxClasses["cocktail.core.css.PseudoElementSelectorValue"] = { __ename__ : true, __constructs__ : ["NONE","FIRST_LINE","FIRST_LETTER","BEFORE","AFTER"] };
cocktail_core_css_PseudoElementSelectorValue.NONE = ["NONE",0];
cocktail_core_css_PseudoElementSelectorValue.NONE.toString = $estr;
cocktail_core_css_PseudoElementSelectorValue.NONE.__enum__ = cocktail_core_css_PseudoElementSelectorValue;
cocktail_core_css_PseudoElementSelectorValue.FIRST_LINE = ["FIRST_LINE",1];
cocktail_core_css_PseudoElementSelectorValue.FIRST_LINE.toString = $estr;
cocktail_core_css_PseudoElementSelectorValue.FIRST_LINE.__enum__ = cocktail_core_css_PseudoElementSelectorValue;
cocktail_core_css_PseudoElementSelectorValue.FIRST_LETTER = ["FIRST_LETTER",2];
cocktail_core_css_PseudoElementSelectorValue.FIRST_LETTER.toString = $estr;
cocktail_core_css_PseudoElementSelectorValue.FIRST_LETTER.__enum__ = cocktail_core_css_PseudoElementSelectorValue;
cocktail_core_css_PseudoElementSelectorValue.BEFORE = ["BEFORE",3];
cocktail_core_css_PseudoElementSelectorValue.BEFORE.toString = $estr;
cocktail_core_css_PseudoElementSelectorValue.BEFORE.__enum__ = cocktail_core_css_PseudoElementSelectorValue;
cocktail_core_css_PseudoElementSelectorValue.AFTER = ["AFTER",4];
cocktail_core_css_PseudoElementSelectorValue.AFTER.toString = $estr;
cocktail_core_css_PseudoElementSelectorValue.AFTER.__enum__ = cocktail_core_css_PseudoElementSelectorValue;
var cocktail_core_css_CombinatorValue = $hxClasses["cocktail.core.css.CombinatorValue"] = { __ename__ : true, __constructs__ : ["DESCENDANT","CHILD","ADJACENT_SIBLING","GENERAL_SIBLING"] };
cocktail_core_css_CombinatorValue.DESCENDANT = ["DESCENDANT",0];
cocktail_core_css_CombinatorValue.DESCENDANT.toString = $estr;
cocktail_core_css_CombinatorValue.DESCENDANT.__enum__ = cocktail_core_css_CombinatorValue;
cocktail_core_css_CombinatorValue.CHILD = ["CHILD",1];
cocktail_core_css_CombinatorValue.CHILD.toString = $estr;
cocktail_core_css_CombinatorValue.CHILD.__enum__ = cocktail_core_css_CombinatorValue;
cocktail_core_css_CombinatorValue.ADJACENT_SIBLING = ["ADJACENT_SIBLING",2];
cocktail_core_css_CombinatorValue.ADJACENT_SIBLING.toString = $estr;
cocktail_core_css_CombinatorValue.ADJACENT_SIBLING.__enum__ = cocktail_core_css_CombinatorValue;
cocktail_core_css_CombinatorValue.GENERAL_SIBLING = ["GENERAL_SIBLING",3];
cocktail_core_css_CombinatorValue.GENERAL_SIBLING.toString = $estr;
cocktail_core_css_CombinatorValue.GENERAL_SIBLING.__enum__ = cocktail_core_css_CombinatorValue;
var cocktail_core_css_CSSPropertyValue = $hxClasses["cocktail.core.css.CSSPropertyValue"] = { __ename__ : true, __constructs__ : ["INTEGER","NUMBER","PERCENTAGE","IDENTIFIER","KEYWORD","URL","STRING","LENGTH","ANGLE","TIME","FREQUENCY","RESOLUTION","COLOR","GROUP","FONT_SIZE_LINE_HEIGHT_GROUP","CSS_LIST","INHERIT","INITIAL","ABSOLUTE_LENGTH","STEPS","CUBIC_BEZIER","TRANSFORM_FUNCTION"] };
cocktail_core_css_CSSPropertyValue.INTEGER = function(value) { var $x = ["INTEGER",0,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.NUMBER = function(value) { var $x = ["NUMBER",1,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.PERCENTAGE = function(value) { var $x = ["PERCENTAGE",2,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.IDENTIFIER = function(value) { var $x = ["IDENTIFIER",3,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.KEYWORD = function(value) { var $x = ["KEYWORD",4,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.URL = function(value) { var $x = ["URL",5,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.STRING = function(value) { var $x = ["STRING",6,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.LENGTH = function(value) { var $x = ["LENGTH",7,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.ANGLE = function(value) { var $x = ["ANGLE",8,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.TIME = function(value) { var $x = ["TIME",9,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.FREQUENCY = function(value) { var $x = ["FREQUENCY",10,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.RESOLUTION = function(value) { var $x = ["RESOLUTION",11,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.COLOR = function(value) { var $x = ["COLOR",12,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.GROUP = function(value) { var $x = ["GROUP",13,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.FONT_SIZE_LINE_HEIGHT_GROUP = function(fontSize,lineHeight) { var $x = ["FONT_SIZE_LINE_HEIGHT_GROUP",14,fontSize,lineHeight]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.CSS_LIST = function(value) { var $x = ["CSS_LIST",15,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.INHERIT = ["INHERIT",16];
cocktail_core_css_CSSPropertyValue.INHERIT.toString = $estr;
cocktail_core_css_CSSPropertyValue.INHERIT.__enum__ = cocktail_core_css_CSSPropertyValue;
cocktail_core_css_CSSPropertyValue.INITIAL = ["INITIAL",17];
cocktail_core_css_CSSPropertyValue.INITIAL.toString = $estr;
cocktail_core_css_CSSPropertyValue.INITIAL.__enum__ = cocktail_core_css_CSSPropertyValue;
cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH = function(value) { var $x = ["ABSOLUTE_LENGTH",18,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.STEPS = function(intervalNumbers,intervalChange) { var $x = ["STEPS",19,intervalNumbers,intervalChange]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.CUBIC_BEZIER = function(x1,y1,x2,y2) { var $x = ["CUBIC_BEZIER",20,x1,y1,x2,y2]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION = function(value) { var $x = ["TRANSFORM_FUNCTION",21,value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
var cocktail_core_css_CSSColorValue = $hxClasses["cocktail.core.css.CSSColorValue"] = { __ename__ : true, __constructs__ : ["RGB","RGB_PERCENTAGE","RGBA","RGBA_PERCENTAGE","HEX","HSL","HSLA","KEYWORD","TRANSPARENT","CURRENT_COLOR"] };
cocktail_core_css_CSSColorValue.RGB = function(red,green,blue) { var $x = ["RGB",0,red,green,blue]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSColorValue.RGB_PERCENTAGE = function(red,green,blue) { var $x = ["RGB_PERCENTAGE",1,red,green,blue]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSColorValue.RGBA = function(red,green,blue,alpha) { var $x = ["RGBA",2,red,green,blue,alpha]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSColorValue.RGBA_PERCENTAGE = function(red,green,blue,alpha) { var $x = ["RGBA_PERCENTAGE",3,red,green,blue,alpha]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSColorValue.HEX = function(value) { var $x = ["HEX",4,value]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSColorValue.HSL = function(hue,saturation,lightness) { var $x = ["HSL",5,hue,saturation,lightness]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSColorValue.HSLA = function(hue,saturation,lightness,alpha) { var $x = ["HSLA",6,hue,saturation,lightness,alpha]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSColorValue.KEYWORD = function(value) { var $x = ["KEYWORD",7,value]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSColorValue.TRANSPARENT = ["TRANSPARENT",8];
cocktail_core_css_CSSColorValue.TRANSPARENT.toString = $estr;
cocktail_core_css_CSSColorValue.TRANSPARENT.__enum__ = cocktail_core_css_CSSColorValue;
cocktail_core_css_CSSColorValue.CURRENT_COLOR = ["CURRENT_COLOR",9];
cocktail_core_css_CSSColorValue.CURRENT_COLOR.toString = $estr;
cocktail_core_css_CSSColorValue.CURRENT_COLOR.__enum__ = cocktail_core_css_CSSColorValue;
var cocktail_core_css_CSSColorKeyword = $hxClasses["cocktail.core.css.CSSColorKeyword"] = { __ename__ : true, __constructs__ : ["ALICE_BLUE","ANTIQUE_WHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHE_DALMOND","BLUE","BLUE_VIOLET","BROWN","BURLY_WOOD","CADET_BLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWER_BLUE","CORNSILK","CRIMSON","CYAN","DARK_BLUE","DARK_CYAN","DARK_GOLDEN_ROD","DARK_GRAY","DARK_GREEN","DARK_GREY","DARK_KHAKI","DARK_MAGENTA","DARK_OLIVE_GREEN","DARK_ORANGE","DARK_ORCHID","DARK_RED","DARK_SALMON","DARK_SEA_GREEN","DARK_SLATE_BLUE","DARK_SLATE_GRAY","DARK_SLATE_GREY","DARK_TURQUOISE","DARK_VIOLET","DEEP_PINK","DEEP_SKY_BLUE","DIM_GRAY","DIM_GREY","DODGER_BLUE","FIRE_BRICK","FLORAL_WHITE","FOREST_GREEN","FUCHSIA","GAINSBORO","GHOST_WHITE","GOLD","GOLDEN_ROD","GRAY","GREEN","GREEN_YELLOW","GREY","HONEY_DEW","HOT_PINK","INDIAN_RED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDER_BLUSH","LAWN_GREEN","LEMON_CHIFFON","LIGHT_BLUE","LIGHT_CORAL","LIGHT_CYAN","LIGHT_GOLDENROD_YELLOW","LIGHT_GRAY","LIGHT_GREEN","LIGHT_GREY","LIGHT_PINK","LIGHT_SALMON","LIGHT_SEA_GREEN","LIGHT_SKY_BLUE","LIGHT_SLATE_GRAY","LIGHT_SLATE_GREY","LIGHT_STEEL_BLUE","LIGHT_YELLOW","LIME","LIME_GREEN","LINEN","MAGENTA","MAROON","MEDIUM_AQUAMARINE","MEDIUM_BLUE","MEDIUM_ORCHID","MEDIUM_PURPLE","MEDIUM_SEA_GREEN","MEDIUM_SLATE_BLUE","MEDIUM_SPRING_GREEN","MEDIUM_TURQUOISE","MEDIUM_VIOLET_RED","MIDNIGHT_BLUE","MINT_CREAM","MISTY_ROSE","MOCCASIN","NAVAJO_WHITE","NAVY","OLD_LACE","OLIVE","OLIVE_DRAB","ORANGE","ORANGE_RED","ORCHID","PALE_GOLDEN_ROD","PALE_GREEN","PALE_TURQUOISE","PALE_VIOLET_RED","PAPAYA_WHIP","PEACH_PUFF","PERU","PINK","PLUM","POWDER_BLUE","PURPLE","RED","ROSY_BROWN","ROYAL_BLUE","SADDLE_BROWN","SALMON","SANDY_BROWN","SEA_GREEN","SEA_SHELL","SIENNA","SILVER","SKY_BLUE","SLATE_BLUE","SLATE_GRAY","SLATE_GREY","SNOW","SPRING_GREEN","STEEL_BLUE","TAN","TEAL","THISLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITE_SMOKE","YELLOW","YELLOW_GREEN"] };
cocktail_core_css_CSSColorKeyword.ALICE_BLUE = ["ALICE_BLUE",0];
cocktail_core_css_CSSColorKeyword.ALICE_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.ALICE_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.ANTIQUE_WHITE = ["ANTIQUE_WHITE",1];
cocktail_core_css_CSSColorKeyword.ANTIQUE_WHITE.toString = $estr;
cocktail_core_css_CSSColorKeyword.ANTIQUE_WHITE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.AQUA = ["AQUA",2];
cocktail_core_css_CSSColorKeyword.AQUA.toString = $estr;
cocktail_core_css_CSSColorKeyword.AQUA.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.AQUAMARINE = ["AQUAMARINE",3];
cocktail_core_css_CSSColorKeyword.AQUAMARINE.toString = $estr;
cocktail_core_css_CSSColorKeyword.AQUAMARINE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.AZURE = ["AZURE",4];
cocktail_core_css_CSSColorKeyword.AZURE.toString = $estr;
cocktail_core_css_CSSColorKeyword.AZURE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.BEIGE = ["BEIGE",5];
cocktail_core_css_CSSColorKeyword.BEIGE.toString = $estr;
cocktail_core_css_CSSColorKeyword.BEIGE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.BISQUE = ["BISQUE",6];
cocktail_core_css_CSSColorKeyword.BISQUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.BISQUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.BLACK = ["BLACK",7];
cocktail_core_css_CSSColorKeyword.BLACK.toString = $estr;
cocktail_core_css_CSSColorKeyword.BLACK.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.BLANCHE_DALMOND = ["BLANCHE_DALMOND",8];
cocktail_core_css_CSSColorKeyword.BLANCHE_DALMOND.toString = $estr;
cocktail_core_css_CSSColorKeyword.BLANCHE_DALMOND.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.BLUE = ["BLUE",9];
cocktail_core_css_CSSColorKeyword.BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.BLUE_VIOLET = ["BLUE_VIOLET",10];
cocktail_core_css_CSSColorKeyword.BLUE_VIOLET.toString = $estr;
cocktail_core_css_CSSColorKeyword.BLUE_VIOLET.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.BROWN = ["BROWN",11];
cocktail_core_css_CSSColorKeyword.BROWN.toString = $estr;
cocktail_core_css_CSSColorKeyword.BROWN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.BURLY_WOOD = ["BURLY_WOOD",12];
cocktail_core_css_CSSColorKeyword.BURLY_WOOD.toString = $estr;
cocktail_core_css_CSSColorKeyword.BURLY_WOOD.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.CADET_BLUE = ["CADET_BLUE",13];
cocktail_core_css_CSSColorKeyword.CADET_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.CADET_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.CHARTREUSE = ["CHARTREUSE",14];
cocktail_core_css_CSSColorKeyword.CHARTREUSE.toString = $estr;
cocktail_core_css_CSSColorKeyword.CHARTREUSE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.CHOCOLATE = ["CHOCOLATE",15];
cocktail_core_css_CSSColorKeyword.CHOCOLATE.toString = $estr;
cocktail_core_css_CSSColorKeyword.CHOCOLATE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.CORAL = ["CORAL",16];
cocktail_core_css_CSSColorKeyword.CORAL.toString = $estr;
cocktail_core_css_CSSColorKeyword.CORAL.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.CORNFLOWER_BLUE = ["CORNFLOWER_BLUE",17];
cocktail_core_css_CSSColorKeyword.CORNFLOWER_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.CORNFLOWER_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.CORNSILK = ["CORNSILK",18];
cocktail_core_css_CSSColorKeyword.CORNSILK.toString = $estr;
cocktail_core_css_CSSColorKeyword.CORNSILK.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.CRIMSON = ["CRIMSON",19];
cocktail_core_css_CSSColorKeyword.CRIMSON.toString = $estr;
cocktail_core_css_CSSColorKeyword.CRIMSON.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.CYAN = ["CYAN",20];
cocktail_core_css_CSSColorKeyword.CYAN.toString = $estr;
cocktail_core_css_CSSColorKeyword.CYAN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_BLUE = ["DARK_BLUE",21];
cocktail_core_css_CSSColorKeyword.DARK_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_CYAN = ["DARK_CYAN",22];
cocktail_core_css_CSSColorKeyword.DARK_CYAN.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_CYAN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_GOLDEN_ROD = ["DARK_GOLDEN_ROD",23];
cocktail_core_css_CSSColorKeyword.DARK_GOLDEN_ROD.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_GOLDEN_ROD.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_GRAY = ["DARK_GRAY",24];
cocktail_core_css_CSSColorKeyword.DARK_GRAY.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_GREEN = ["DARK_GREEN",25];
cocktail_core_css_CSSColorKeyword.DARK_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_GREY = ["DARK_GREY",26];
cocktail_core_css_CSSColorKeyword.DARK_GREY.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_KHAKI = ["DARK_KHAKI",27];
cocktail_core_css_CSSColorKeyword.DARK_KHAKI.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_KHAKI.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_MAGENTA = ["DARK_MAGENTA",28];
cocktail_core_css_CSSColorKeyword.DARK_MAGENTA.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_MAGENTA.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_OLIVE_GREEN = ["DARK_OLIVE_GREEN",29];
cocktail_core_css_CSSColorKeyword.DARK_OLIVE_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_OLIVE_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_ORANGE = ["DARK_ORANGE",30];
cocktail_core_css_CSSColorKeyword.DARK_ORANGE.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_ORANGE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_ORCHID = ["DARK_ORCHID",31];
cocktail_core_css_CSSColorKeyword.DARK_ORCHID.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_ORCHID.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_RED = ["DARK_RED",32];
cocktail_core_css_CSSColorKeyword.DARK_RED.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_RED.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_SALMON = ["DARK_SALMON",33];
cocktail_core_css_CSSColorKeyword.DARK_SALMON.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_SALMON.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_SEA_GREEN = ["DARK_SEA_GREEN",34];
cocktail_core_css_CSSColorKeyword.DARK_SEA_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_SEA_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_SLATE_BLUE = ["DARK_SLATE_BLUE",35];
cocktail_core_css_CSSColorKeyword.DARK_SLATE_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_SLATE_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_SLATE_GRAY = ["DARK_SLATE_GRAY",36];
cocktail_core_css_CSSColorKeyword.DARK_SLATE_GRAY.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_SLATE_GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_SLATE_GREY = ["DARK_SLATE_GREY",37];
cocktail_core_css_CSSColorKeyword.DARK_SLATE_GREY.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_SLATE_GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_TURQUOISE = ["DARK_TURQUOISE",38];
cocktail_core_css_CSSColorKeyword.DARK_TURQUOISE.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_TURQUOISE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DARK_VIOLET = ["DARK_VIOLET",39];
cocktail_core_css_CSSColorKeyword.DARK_VIOLET.toString = $estr;
cocktail_core_css_CSSColorKeyword.DARK_VIOLET.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DEEP_PINK = ["DEEP_PINK",40];
cocktail_core_css_CSSColorKeyword.DEEP_PINK.toString = $estr;
cocktail_core_css_CSSColorKeyword.DEEP_PINK.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DEEP_SKY_BLUE = ["DEEP_SKY_BLUE",41];
cocktail_core_css_CSSColorKeyword.DEEP_SKY_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.DEEP_SKY_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DIM_GRAY = ["DIM_GRAY",42];
cocktail_core_css_CSSColorKeyword.DIM_GRAY.toString = $estr;
cocktail_core_css_CSSColorKeyword.DIM_GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DIM_GREY = ["DIM_GREY",43];
cocktail_core_css_CSSColorKeyword.DIM_GREY.toString = $estr;
cocktail_core_css_CSSColorKeyword.DIM_GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.DODGER_BLUE = ["DODGER_BLUE",44];
cocktail_core_css_CSSColorKeyword.DODGER_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.DODGER_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.FIRE_BRICK = ["FIRE_BRICK",45];
cocktail_core_css_CSSColorKeyword.FIRE_BRICK.toString = $estr;
cocktail_core_css_CSSColorKeyword.FIRE_BRICK.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.FLORAL_WHITE = ["FLORAL_WHITE",46];
cocktail_core_css_CSSColorKeyword.FLORAL_WHITE.toString = $estr;
cocktail_core_css_CSSColorKeyword.FLORAL_WHITE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.FOREST_GREEN = ["FOREST_GREEN",47];
cocktail_core_css_CSSColorKeyword.FOREST_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.FOREST_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.FUCHSIA = ["FUCHSIA",48];
cocktail_core_css_CSSColorKeyword.FUCHSIA.toString = $estr;
cocktail_core_css_CSSColorKeyword.FUCHSIA.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.GAINSBORO = ["GAINSBORO",49];
cocktail_core_css_CSSColorKeyword.GAINSBORO.toString = $estr;
cocktail_core_css_CSSColorKeyword.GAINSBORO.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.GHOST_WHITE = ["GHOST_WHITE",50];
cocktail_core_css_CSSColorKeyword.GHOST_WHITE.toString = $estr;
cocktail_core_css_CSSColorKeyword.GHOST_WHITE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.GOLD = ["GOLD",51];
cocktail_core_css_CSSColorKeyword.GOLD.toString = $estr;
cocktail_core_css_CSSColorKeyword.GOLD.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.GOLDEN_ROD = ["GOLDEN_ROD",52];
cocktail_core_css_CSSColorKeyword.GOLDEN_ROD.toString = $estr;
cocktail_core_css_CSSColorKeyword.GOLDEN_ROD.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.GRAY = ["GRAY",53];
cocktail_core_css_CSSColorKeyword.GRAY.toString = $estr;
cocktail_core_css_CSSColorKeyword.GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.GREEN = ["GREEN",54];
cocktail_core_css_CSSColorKeyword.GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.GREEN_YELLOW = ["GREEN_YELLOW",55];
cocktail_core_css_CSSColorKeyword.GREEN_YELLOW.toString = $estr;
cocktail_core_css_CSSColorKeyword.GREEN_YELLOW.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.GREY = ["GREY",56];
cocktail_core_css_CSSColorKeyword.GREY.toString = $estr;
cocktail_core_css_CSSColorKeyword.GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.HONEY_DEW = ["HONEY_DEW",57];
cocktail_core_css_CSSColorKeyword.HONEY_DEW.toString = $estr;
cocktail_core_css_CSSColorKeyword.HONEY_DEW.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.HOT_PINK = ["HOT_PINK",58];
cocktail_core_css_CSSColorKeyword.HOT_PINK.toString = $estr;
cocktail_core_css_CSSColorKeyword.HOT_PINK.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.INDIAN_RED = ["INDIAN_RED",59];
cocktail_core_css_CSSColorKeyword.INDIAN_RED.toString = $estr;
cocktail_core_css_CSSColorKeyword.INDIAN_RED.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.INDIGO = ["INDIGO",60];
cocktail_core_css_CSSColorKeyword.INDIGO.toString = $estr;
cocktail_core_css_CSSColorKeyword.INDIGO.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.IVORY = ["IVORY",61];
cocktail_core_css_CSSColorKeyword.IVORY.toString = $estr;
cocktail_core_css_CSSColorKeyword.IVORY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.KHAKI = ["KHAKI",62];
cocktail_core_css_CSSColorKeyword.KHAKI.toString = $estr;
cocktail_core_css_CSSColorKeyword.KHAKI.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LAVENDER = ["LAVENDER",63];
cocktail_core_css_CSSColorKeyword.LAVENDER.toString = $estr;
cocktail_core_css_CSSColorKeyword.LAVENDER.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LAVENDER_BLUSH = ["LAVENDER_BLUSH",64];
cocktail_core_css_CSSColorKeyword.LAVENDER_BLUSH.toString = $estr;
cocktail_core_css_CSSColorKeyword.LAVENDER_BLUSH.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LAWN_GREEN = ["LAWN_GREEN",65];
cocktail_core_css_CSSColorKeyword.LAWN_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.LAWN_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LEMON_CHIFFON = ["LEMON_CHIFFON",66];
cocktail_core_css_CSSColorKeyword.LEMON_CHIFFON.toString = $estr;
cocktail_core_css_CSSColorKeyword.LEMON_CHIFFON.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_BLUE = ["LIGHT_BLUE",67];
cocktail_core_css_CSSColorKeyword.LIGHT_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_CORAL = ["LIGHT_CORAL",68];
cocktail_core_css_CSSColorKeyword.LIGHT_CORAL.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_CORAL.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_CYAN = ["LIGHT_CYAN",69];
cocktail_core_css_CSSColorKeyword.LIGHT_CYAN.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_CYAN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_GOLDENROD_YELLOW = ["LIGHT_GOLDENROD_YELLOW",70];
cocktail_core_css_CSSColorKeyword.LIGHT_GOLDENROD_YELLOW.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_GOLDENROD_YELLOW.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_GRAY = ["LIGHT_GRAY",71];
cocktail_core_css_CSSColorKeyword.LIGHT_GRAY.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_GREEN = ["LIGHT_GREEN",72];
cocktail_core_css_CSSColorKeyword.LIGHT_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_GREY = ["LIGHT_GREY",73];
cocktail_core_css_CSSColorKeyword.LIGHT_GREY.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_PINK = ["LIGHT_PINK",74];
cocktail_core_css_CSSColorKeyword.LIGHT_PINK.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_PINK.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_SALMON = ["LIGHT_SALMON",75];
cocktail_core_css_CSSColorKeyword.LIGHT_SALMON.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_SALMON.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_SEA_GREEN = ["LIGHT_SEA_GREEN",76];
cocktail_core_css_CSSColorKeyword.LIGHT_SEA_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_SEA_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_SKY_BLUE = ["LIGHT_SKY_BLUE",77];
cocktail_core_css_CSSColorKeyword.LIGHT_SKY_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_SKY_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GRAY = ["LIGHT_SLATE_GRAY",78];
cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GRAY.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GREY = ["LIGHT_SLATE_GREY",79];
cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GREY.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_STEEL_BLUE = ["LIGHT_STEEL_BLUE",80];
cocktail_core_css_CSSColorKeyword.LIGHT_STEEL_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_STEEL_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIGHT_YELLOW = ["LIGHT_YELLOW",81];
cocktail_core_css_CSSColorKeyword.LIGHT_YELLOW.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIGHT_YELLOW.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIME = ["LIME",82];
cocktail_core_css_CSSColorKeyword.LIME.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIME.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LIME_GREEN = ["LIME_GREEN",83];
cocktail_core_css_CSSColorKeyword.LIME_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.LIME_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.LINEN = ["LINEN",84];
cocktail_core_css_CSSColorKeyword.LINEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.LINEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MAGENTA = ["MAGENTA",85];
cocktail_core_css_CSSColorKeyword.MAGENTA.toString = $estr;
cocktail_core_css_CSSColorKeyword.MAGENTA.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MAROON = ["MAROON",86];
cocktail_core_css_CSSColorKeyword.MAROON.toString = $estr;
cocktail_core_css_CSSColorKeyword.MAROON.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MEDIUM_AQUAMARINE = ["MEDIUM_AQUAMARINE",87];
cocktail_core_css_CSSColorKeyword.MEDIUM_AQUAMARINE.toString = $estr;
cocktail_core_css_CSSColorKeyword.MEDIUM_AQUAMARINE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MEDIUM_BLUE = ["MEDIUM_BLUE",88];
cocktail_core_css_CSSColorKeyword.MEDIUM_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.MEDIUM_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MEDIUM_ORCHID = ["MEDIUM_ORCHID",89];
cocktail_core_css_CSSColorKeyword.MEDIUM_ORCHID.toString = $estr;
cocktail_core_css_CSSColorKeyword.MEDIUM_ORCHID.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MEDIUM_PURPLE = ["MEDIUM_PURPLE",90];
cocktail_core_css_CSSColorKeyword.MEDIUM_PURPLE.toString = $estr;
cocktail_core_css_CSSColorKeyword.MEDIUM_PURPLE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MEDIUM_SEA_GREEN = ["MEDIUM_SEA_GREEN",91];
cocktail_core_css_CSSColorKeyword.MEDIUM_SEA_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.MEDIUM_SEA_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MEDIUM_SLATE_BLUE = ["MEDIUM_SLATE_BLUE",92];
cocktail_core_css_CSSColorKeyword.MEDIUM_SLATE_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.MEDIUM_SLATE_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MEDIUM_SPRING_GREEN = ["MEDIUM_SPRING_GREEN",93];
cocktail_core_css_CSSColorKeyword.MEDIUM_SPRING_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.MEDIUM_SPRING_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MEDIUM_TURQUOISE = ["MEDIUM_TURQUOISE",94];
cocktail_core_css_CSSColorKeyword.MEDIUM_TURQUOISE.toString = $estr;
cocktail_core_css_CSSColorKeyword.MEDIUM_TURQUOISE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MEDIUM_VIOLET_RED = ["MEDIUM_VIOLET_RED",95];
cocktail_core_css_CSSColorKeyword.MEDIUM_VIOLET_RED.toString = $estr;
cocktail_core_css_CSSColorKeyword.MEDIUM_VIOLET_RED.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MIDNIGHT_BLUE = ["MIDNIGHT_BLUE",96];
cocktail_core_css_CSSColorKeyword.MIDNIGHT_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.MIDNIGHT_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MINT_CREAM = ["MINT_CREAM",97];
cocktail_core_css_CSSColorKeyword.MINT_CREAM.toString = $estr;
cocktail_core_css_CSSColorKeyword.MINT_CREAM.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MISTY_ROSE = ["MISTY_ROSE",98];
cocktail_core_css_CSSColorKeyword.MISTY_ROSE.toString = $estr;
cocktail_core_css_CSSColorKeyword.MISTY_ROSE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.MOCCASIN = ["MOCCASIN",99];
cocktail_core_css_CSSColorKeyword.MOCCASIN.toString = $estr;
cocktail_core_css_CSSColorKeyword.MOCCASIN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.NAVAJO_WHITE = ["NAVAJO_WHITE",100];
cocktail_core_css_CSSColorKeyword.NAVAJO_WHITE.toString = $estr;
cocktail_core_css_CSSColorKeyword.NAVAJO_WHITE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.NAVY = ["NAVY",101];
cocktail_core_css_CSSColorKeyword.NAVY.toString = $estr;
cocktail_core_css_CSSColorKeyword.NAVY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.OLD_LACE = ["OLD_LACE",102];
cocktail_core_css_CSSColorKeyword.OLD_LACE.toString = $estr;
cocktail_core_css_CSSColorKeyword.OLD_LACE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.OLIVE = ["OLIVE",103];
cocktail_core_css_CSSColorKeyword.OLIVE.toString = $estr;
cocktail_core_css_CSSColorKeyword.OLIVE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.OLIVE_DRAB = ["OLIVE_DRAB",104];
cocktail_core_css_CSSColorKeyword.OLIVE_DRAB.toString = $estr;
cocktail_core_css_CSSColorKeyword.OLIVE_DRAB.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.ORANGE = ["ORANGE",105];
cocktail_core_css_CSSColorKeyword.ORANGE.toString = $estr;
cocktail_core_css_CSSColorKeyword.ORANGE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.ORANGE_RED = ["ORANGE_RED",106];
cocktail_core_css_CSSColorKeyword.ORANGE_RED.toString = $estr;
cocktail_core_css_CSSColorKeyword.ORANGE_RED.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.ORCHID = ["ORCHID",107];
cocktail_core_css_CSSColorKeyword.ORCHID.toString = $estr;
cocktail_core_css_CSSColorKeyword.ORCHID.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.PALE_GOLDEN_ROD = ["PALE_GOLDEN_ROD",108];
cocktail_core_css_CSSColorKeyword.PALE_GOLDEN_ROD.toString = $estr;
cocktail_core_css_CSSColorKeyword.PALE_GOLDEN_ROD.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.PALE_GREEN = ["PALE_GREEN",109];
cocktail_core_css_CSSColorKeyword.PALE_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.PALE_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.PALE_TURQUOISE = ["PALE_TURQUOISE",110];
cocktail_core_css_CSSColorKeyword.PALE_TURQUOISE.toString = $estr;
cocktail_core_css_CSSColorKeyword.PALE_TURQUOISE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.PALE_VIOLET_RED = ["PALE_VIOLET_RED",111];
cocktail_core_css_CSSColorKeyword.PALE_VIOLET_RED.toString = $estr;
cocktail_core_css_CSSColorKeyword.PALE_VIOLET_RED.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.PAPAYA_WHIP = ["PAPAYA_WHIP",112];
cocktail_core_css_CSSColorKeyword.PAPAYA_WHIP.toString = $estr;
cocktail_core_css_CSSColorKeyword.PAPAYA_WHIP.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.PEACH_PUFF = ["PEACH_PUFF",113];
cocktail_core_css_CSSColorKeyword.PEACH_PUFF.toString = $estr;
cocktail_core_css_CSSColorKeyword.PEACH_PUFF.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.PERU = ["PERU",114];
cocktail_core_css_CSSColorKeyword.PERU.toString = $estr;
cocktail_core_css_CSSColorKeyword.PERU.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.PINK = ["PINK",115];
cocktail_core_css_CSSColorKeyword.PINK.toString = $estr;
cocktail_core_css_CSSColorKeyword.PINK.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.PLUM = ["PLUM",116];
cocktail_core_css_CSSColorKeyword.PLUM.toString = $estr;
cocktail_core_css_CSSColorKeyword.PLUM.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.POWDER_BLUE = ["POWDER_BLUE",117];
cocktail_core_css_CSSColorKeyword.POWDER_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.POWDER_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.PURPLE = ["PURPLE",118];
cocktail_core_css_CSSColorKeyword.PURPLE.toString = $estr;
cocktail_core_css_CSSColorKeyword.PURPLE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.RED = ["RED",119];
cocktail_core_css_CSSColorKeyword.RED.toString = $estr;
cocktail_core_css_CSSColorKeyword.RED.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.ROSY_BROWN = ["ROSY_BROWN",120];
cocktail_core_css_CSSColorKeyword.ROSY_BROWN.toString = $estr;
cocktail_core_css_CSSColorKeyword.ROSY_BROWN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.ROYAL_BLUE = ["ROYAL_BLUE",121];
cocktail_core_css_CSSColorKeyword.ROYAL_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.ROYAL_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.SADDLE_BROWN = ["SADDLE_BROWN",122];
cocktail_core_css_CSSColorKeyword.SADDLE_BROWN.toString = $estr;
cocktail_core_css_CSSColorKeyword.SADDLE_BROWN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.SALMON = ["SALMON",123];
cocktail_core_css_CSSColorKeyword.SALMON.toString = $estr;
cocktail_core_css_CSSColorKeyword.SALMON.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.SANDY_BROWN = ["SANDY_BROWN",124];
cocktail_core_css_CSSColorKeyword.SANDY_BROWN.toString = $estr;
cocktail_core_css_CSSColorKeyword.SANDY_BROWN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.SEA_GREEN = ["SEA_GREEN",125];
cocktail_core_css_CSSColorKeyword.SEA_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.SEA_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.SEA_SHELL = ["SEA_SHELL",126];
cocktail_core_css_CSSColorKeyword.SEA_SHELL.toString = $estr;
cocktail_core_css_CSSColorKeyword.SEA_SHELL.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.SIENNA = ["SIENNA",127];
cocktail_core_css_CSSColorKeyword.SIENNA.toString = $estr;
cocktail_core_css_CSSColorKeyword.SIENNA.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.SILVER = ["SILVER",128];
cocktail_core_css_CSSColorKeyword.SILVER.toString = $estr;
cocktail_core_css_CSSColorKeyword.SILVER.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.SKY_BLUE = ["SKY_BLUE",129];
cocktail_core_css_CSSColorKeyword.SKY_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.SKY_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.SLATE_BLUE = ["SLATE_BLUE",130];
cocktail_core_css_CSSColorKeyword.SLATE_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.SLATE_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.SLATE_GRAY = ["SLATE_GRAY",131];
cocktail_core_css_CSSColorKeyword.SLATE_GRAY.toString = $estr;
cocktail_core_css_CSSColorKeyword.SLATE_GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.SLATE_GREY = ["SLATE_GREY",132];
cocktail_core_css_CSSColorKeyword.SLATE_GREY.toString = $estr;
cocktail_core_css_CSSColorKeyword.SLATE_GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.SNOW = ["SNOW",133];
cocktail_core_css_CSSColorKeyword.SNOW.toString = $estr;
cocktail_core_css_CSSColorKeyword.SNOW.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.SPRING_GREEN = ["SPRING_GREEN",134];
cocktail_core_css_CSSColorKeyword.SPRING_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.SPRING_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.STEEL_BLUE = ["STEEL_BLUE",135];
cocktail_core_css_CSSColorKeyword.STEEL_BLUE.toString = $estr;
cocktail_core_css_CSSColorKeyword.STEEL_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.TAN = ["TAN",136];
cocktail_core_css_CSSColorKeyword.TAN.toString = $estr;
cocktail_core_css_CSSColorKeyword.TAN.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.TEAL = ["TEAL",137];
cocktail_core_css_CSSColorKeyword.TEAL.toString = $estr;
cocktail_core_css_CSSColorKeyword.TEAL.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.THISLE = ["THISLE",138];
cocktail_core_css_CSSColorKeyword.THISLE.toString = $estr;
cocktail_core_css_CSSColorKeyword.THISLE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.TOMATO = ["TOMATO",139];
cocktail_core_css_CSSColorKeyword.TOMATO.toString = $estr;
cocktail_core_css_CSSColorKeyword.TOMATO.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.TURQUOISE = ["TURQUOISE",140];
cocktail_core_css_CSSColorKeyword.TURQUOISE.toString = $estr;
cocktail_core_css_CSSColorKeyword.TURQUOISE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.VIOLET = ["VIOLET",141];
cocktail_core_css_CSSColorKeyword.VIOLET.toString = $estr;
cocktail_core_css_CSSColorKeyword.VIOLET.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.WHEAT = ["WHEAT",142];
cocktail_core_css_CSSColorKeyword.WHEAT.toString = $estr;
cocktail_core_css_CSSColorKeyword.WHEAT.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.WHITE = ["WHITE",143];
cocktail_core_css_CSSColorKeyword.WHITE.toString = $estr;
cocktail_core_css_CSSColorKeyword.WHITE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.WHITE_SMOKE = ["WHITE_SMOKE",144];
cocktail_core_css_CSSColorKeyword.WHITE_SMOKE.toString = $estr;
cocktail_core_css_CSSColorKeyword.WHITE_SMOKE.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.YELLOW = ["YELLOW",145];
cocktail_core_css_CSSColorKeyword.YELLOW.toString = $estr;
cocktail_core_css_CSSColorKeyword.YELLOW.__enum__ = cocktail_core_css_CSSColorKeyword;
cocktail_core_css_CSSColorKeyword.YELLOW_GREEN = ["YELLOW_GREEN",146];
cocktail_core_css_CSSColorKeyword.YELLOW_GREEN.toString = $estr;
cocktail_core_css_CSSColorKeyword.YELLOW_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
var cocktail_core_css_CSSTransformFunctionValue = $hxClasses["cocktail.core.css.CSSTransformFunctionValue"] = { __ename__ : true, __constructs__ : ["MATRIX","TRANSLATE","TRANSLATE_X","TRANSLATE_Y","SCALE","SCALE_X","SCALE_Y","ROTATE","SKEW_X","SKEW_Y","SKEW"] };
cocktail_core_css_CSSTransformFunctionValue.MATRIX = function(a,b,c,d,e,f) { var $x = ["MATRIX",0,a,b,c,d,e,f]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSTransformFunctionValue.TRANSLATE = function(tx,ty) { var $x = ["TRANSLATE",1,tx,ty]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_X = function(tx) { var $x = ["TRANSLATE_X",2,tx]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_Y = function(ty) { var $x = ["TRANSLATE_Y",3,ty]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSTransformFunctionValue.SCALE = function(sx,sy) { var $x = ["SCALE",4,sx,sy]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSTransformFunctionValue.SCALE_X = function(sx) { var $x = ["SCALE_X",5,sx]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSTransformFunctionValue.SCALE_Y = function(sy) { var $x = ["SCALE_Y",6,sy]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSTransformFunctionValue.ROTATE = function(angle) { var $x = ["ROTATE",7,angle]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSTransformFunctionValue.SKEW_X = function(angle) { var $x = ["SKEW_X",8,angle]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSTransformFunctionValue.SKEW_Y = function(angle) { var $x = ["SKEW_Y",9,angle]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSTransformFunctionValue.SKEW = function(angleX,angleY) { var $x = ["SKEW",10,angleX,angleY]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
var cocktail_core_css_CSSTranslationValue = $hxClasses["cocktail.core.css.CSSTranslationValue"] = { __ename__ : true, __constructs__ : ["ABSOLUTE_LENGTH","LENGTH","PERCENTAGE"] };
cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH = function(value) { var $x = ["ABSOLUTE_LENGTH",0,value]; $x.__enum__ = cocktail_core_css_CSSTranslationValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSTranslationValue.LENGTH = function(value) { var $x = ["LENGTH",1,value]; $x.__enum__ = cocktail_core_css_CSSTranslationValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSTranslationValue.PERCENTAGE = function(value) { var $x = ["PERCENTAGE",2,value]; $x.__enum__ = cocktail_core_css_CSSTranslationValue; $x.toString = $estr; return $x; };
var cocktail_core_css_CSSFrequencyValue = $hxClasses["cocktail.core.css.CSSFrequencyValue"] = { __ename__ : true, __constructs__ : ["HERTZ","KILO_HERTZ"] };
cocktail_core_css_CSSFrequencyValue.HERTZ = function(value) { var $x = ["HERTZ",0,value]; $x.__enum__ = cocktail_core_css_CSSFrequencyValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSFrequencyValue.KILO_HERTZ = function(value) { var $x = ["KILO_HERTZ",1,value]; $x.__enum__ = cocktail_core_css_CSSFrequencyValue; $x.toString = $estr; return $x; };
var cocktail_core_css_CSSResolutionValue = $hxClasses["cocktail.core.css.CSSResolutionValue"] = { __ename__ : true, __constructs__ : ["DPI","DPCM","DPPX"] };
cocktail_core_css_CSSResolutionValue.DPI = function(value) { var $x = ["DPI",0,value]; $x.__enum__ = cocktail_core_css_CSSResolutionValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSResolutionValue.DPCM = function(value) { var $x = ["DPCM",1,value]; $x.__enum__ = cocktail_core_css_CSSResolutionValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSResolutionValue.DPPX = function(value) { var $x = ["DPPX",2,value]; $x.__enum__ = cocktail_core_css_CSSResolutionValue; $x.toString = $estr; return $x; };
var cocktail_core_css_CSSAngleValue = $hxClasses["cocktail.core.css.CSSAngleValue"] = { __ename__ : true, __constructs__ : ["DEG","GRAD","RAD","TURN"] };
cocktail_core_css_CSSAngleValue.DEG = function(value) { var $x = ["DEG",0,value]; $x.__enum__ = cocktail_core_css_CSSAngleValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSAngleValue.GRAD = function(value) { var $x = ["GRAD",1,value]; $x.__enum__ = cocktail_core_css_CSSAngleValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSAngleValue.RAD = function(value) { var $x = ["RAD",2,value]; $x.__enum__ = cocktail_core_css_CSSAngleValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSAngleValue.TURN = function(value) { var $x = ["TURN",3,value]; $x.__enum__ = cocktail_core_css_CSSAngleValue; $x.toString = $estr; return $x; };
var cocktail_core_css_CSSLengthValue = $hxClasses["cocktail.core.css.CSSLengthValue"] = { __ename__ : true, __constructs__ : ["PX","CM","MM","PT","PC","IN","EM","REM","EX","CH","VW","VH","VMIN","VMAX"] };
cocktail_core_css_CSSLengthValue.PX = function(value) { var $x = ["PX",0,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSLengthValue.CM = function(value) { var $x = ["CM",1,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSLengthValue.MM = function(value) { var $x = ["MM",2,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSLengthValue.PT = function(value) { var $x = ["PT",3,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSLengthValue.PC = function(value) { var $x = ["PC",4,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSLengthValue.IN = function(value) { var $x = ["IN",5,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSLengthValue.EM = function(value) { var $x = ["EM",6,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSLengthValue.REM = function(value) { var $x = ["REM",7,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSLengthValue.EX = function(value) { var $x = ["EX",8,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSLengthValue.CH = function(value) { var $x = ["CH",9,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSLengthValue.VW = function(value) { var $x = ["VW",10,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSLengthValue.VH = function(value) { var $x = ["VH",11,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSLengthValue.VMIN = function(value) { var $x = ["VMIN",12,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSLengthValue.VMAX = function(value) { var $x = ["VMAX",13,value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
var cocktail_core_css_RelativeLengthReferenceData = function() {
	this.em = 0;
	this.rem = 0;
	this.viewportHeight = 0;
	this.viewportWidth = 0;
	this.ch = 0;
	this.ex = 0;
};
$hxClasses["cocktail.core.css.RelativeLengthReferenceData"] = cocktail_core_css_RelativeLengthReferenceData;
cocktail_core_css_RelativeLengthReferenceData.__name__ = true;
cocktail_core_css_RelativeLengthReferenceData.prototype = {
	__class__: cocktail_core_css_RelativeLengthReferenceData
};
var cocktail_core_css_CSSTimeValue = $hxClasses["cocktail.core.css.CSSTimeValue"] = { __ename__ : true, __constructs__ : ["SECONDS","MILLISECONDS"] };
cocktail_core_css_CSSTimeValue.SECONDS = function(value) { var $x = ["SECONDS",0,value]; $x.__enum__ = cocktail_core_css_CSSTimeValue; $x.toString = $estr; return $x; };
cocktail_core_css_CSSTimeValue.MILLISECONDS = function(value) { var $x = ["MILLISECONDS",1,value]; $x.__enum__ = cocktail_core_css_CSSTimeValue; $x.toString = $estr; return $x; };
var cocktail_core_css_CSSKeywordValue = $hxClasses["cocktail.core.css.CSSKeywordValue"] = { __ename__ : true, __constructs__ : ["NORMAL","BOLD","BOLDER","LIGHTER","ITALIC","OBLIQUE","SMALL_CAPS","PRE","NO_WRAP","PRE_WRAP","PRE_LINE","LEFT","RIGHT","CENTER","JUSTIFY","CAPITALIZE","UPPERCASE","LOWERCASE","NONE","BASELINE","SUB","SUPER","TOP","TEXT_TOP","MIDDLE","BOTTOM","TEXT_BOTTOM","AUTO","BLOCK","INLINE_BLOCK","INLINE","BOTH","STATIC","RELATIVE","ABSOLUTE","FIXED","VISIBLE","HIDDEN","SCROLL","BORDER_BOX","PADDING_BOX","CONTENT_BOX","CONTAIN","COVER","CROSSHAIR","DEFAULT","POINTER","TEXT","ALL","EASE","LINEAR","EASE_IN","EASE_OUT","EASE_IN_OUT","STEP_START","STEP_END","START","END","XX_SMALL","X_SMALL","SMALL","MEDIUM","LARGE","X_LARGE","XX_LARGE","LARGER","SMALLER","REPEAT","REPEAT_X","REPEAT_Y","SPACE","ROUND","NO_REPEAT","THIN","THICK","DOTTED","DASHED","SOLID","DOUBLE","GROOVE","RIDGE","INSET","OUTSET","INVERT","UNDERLINE","OVERLINE","LINE_THROUGH","BLINK"] };
cocktail_core_css_CSSKeywordValue.NORMAL = ["NORMAL",0];
cocktail_core_css_CSSKeywordValue.NORMAL.toString = $estr;
cocktail_core_css_CSSKeywordValue.NORMAL.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.BOLD = ["BOLD",1];
cocktail_core_css_CSSKeywordValue.BOLD.toString = $estr;
cocktail_core_css_CSSKeywordValue.BOLD.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.BOLDER = ["BOLDER",2];
cocktail_core_css_CSSKeywordValue.BOLDER.toString = $estr;
cocktail_core_css_CSSKeywordValue.BOLDER.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.LIGHTER = ["LIGHTER",3];
cocktail_core_css_CSSKeywordValue.LIGHTER.toString = $estr;
cocktail_core_css_CSSKeywordValue.LIGHTER.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.ITALIC = ["ITALIC",4];
cocktail_core_css_CSSKeywordValue.ITALIC.toString = $estr;
cocktail_core_css_CSSKeywordValue.ITALIC.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.OBLIQUE = ["OBLIQUE",5];
cocktail_core_css_CSSKeywordValue.OBLIQUE.toString = $estr;
cocktail_core_css_CSSKeywordValue.OBLIQUE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.SMALL_CAPS = ["SMALL_CAPS",6];
cocktail_core_css_CSSKeywordValue.SMALL_CAPS.toString = $estr;
cocktail_core_css_CSSKeywordValue.SMALL_CAPS.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.PRE = ["PRE",7];
cocktail_core_css_CSSKeywordValue.PRE.toString = $estr;
cocktail_core_css_CSSKeywordValue.PRE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.NO_WRAP = ["NO_WRAP",8];
cocktail_core_css_CSSKeywordValue.NO_WRAP.toString = $estr;
cocktail_core_css_CSSKeywordValue.NO_WRAP.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.PRE_WRAP = ["PRE_WRAP",9];
cocktail_core_css_CSSKeywordValue.PRE_WRAP.toString = $estr;
cocktail_core_css_CSSKeywordValue.PRE_WRAP.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.PRE_LINE = ["PRE_LINE",10];
cocktail_core_css_CSSKeywordValue.PRE_LINE.toString = $estr;
cocktail_core_css_CSSKeywordValue.PRE_LINE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.LEFT = ["LEFT",11];
cocktail_core_css_CSSKeywordValue.LEFT.toString = $estr;
cocktail_core_css_CSSKeywordValue.LEFT.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.RIGHT = ["RIGHT",12];
cocktail_core_css_CSSKeywordValue.RIGHT.toString = $estr;
cocktail_core_css_CSSKeywordValue.RIGHT.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.CENTER = ["CENTER",13];
cocktail_core_css_CSSKeywordValue.CENTER.toString = $estr;
cocktail_core_css_CSSKeywordValue.CENTER.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.JUSTIFY = ["JUSTIFY",14];
cocktail_core_css_CSSKeywordValue.JUSTIFY.toString = $estr;
cocktail_core_css_CSSKeywordValue.JUSTIFY.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.CAPITALIZE = ["CAPITALIZE",15];
cocktail_core_css_CSSKeywordValue.CAPITALIZE.toString = $estr;
cocktail_core_css_CSSKeywordValue.CAPITALIZE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.UPPERCASE = ["UPPERCASE",16];
cocktail_core_css_CSSKeywordValue.UPPERCASE.toString = $estr;
cocktail_core_css_CSSKeywordValue.UPPERCASE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.LOWERCASE = ["LOWERCASE",17];
cocktail_core_css_CSSKeywordValue.LOWERCASE.toString = $estr;
cocktail_core_css_CSSKeywordValue.LOWERCASE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.NONE = ["NONE",18];
cocktail_core_css_CSSKeywordValue.NONE.toString = $estr;
cocktail_core_css_CSSKeywordValue.NONE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.BASELINE = ["BASELINE",19];
cocktail_core_css_CSSKeywordValue.BASELINE.toString = $estr;
cocktail_core_css_CSSKeywordValue.BASELINE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.SUB = ["SUB",20];
cocktail_core_css_CSSKeywordValue.SUB.toString = $estr;
cocktail_core_css_CSSKeywordValue.SUB.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.SUPER = ["SUPER",21];
cocktail_core_css_CSSKeywordValue.SUPER.toString = $estr;
cocktail_core_css_CSSKeywordValue.SUPER.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.TOP = ["TOP",22];
cocktail_core_css_CSSKeywordValue.TOP.toString = $estr;
cocktail_core_css_CSSKeywordValue.TOP.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.TEXT_TOP = ["TEXT_TOP",23];
cocktail_core_css_CSSKeywordValue.TEXT_TOP.toString = $estr;
cocktail_core_css_CSSKeywordValue.TEXT_TOP.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.MIDDLE = ["MIDDLE",24];
cocktail_core_css_CSSKeywordValue.MIDDLE.toString = $estr;
cocktail_core_css_CSSKeywordValue.MIDDLE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.BOTTOM = ["BOTTOM",25];
cocktail_core_css_CSSKeywordValue.BOTTOM.toString = $estr;
cocktail_core_css_CSSKeywordValue.BOTTOM.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.TEXT_BOTTOM = ["TEXT_BOTTOM",26];
cocktail_core_css_CSSKeywordValue.TEXT_BOTTOM.toString = $estr;
cocktail_core_css_CSSKeywordValue.TEXT_BOTTOM.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.AUTO = ["AUTO",27];
cocktail_core_css_CSSKeywordValue.AUTO.toString = $estr;
cocktail_core_css_CSSKeywordValue.AUTO.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.BLOCK = ["BLOCK",28];
cocktail_core_css_CSSKeywordValue.BLOCK.toString = $estr;
cocktail_core_css_CSSKeywordValue.BLOCK.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.INLINE_BLOCK = ["INLINE_BLOCK",29];
cocktail_core_css_CSSKeywordValue.INLINE_BLOCK.toString = $estr;
cocktail_core_css_CSSKeywordValue.INLINE_BLOCK.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.INLINE = ["INLINE",30];
cocktail_core_css_CSSKeywordValue.INLINE.toString = $estr;
cocktail_core_css_CSSKeywordValue.INLINE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.BOTH = ["BOTH",31];
cocktail_core_css_CSSKeywordValue.BOTH.toString = $estr;
cocktail_core_css_CSSKeywordValue.BOTH.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.STATIC = ["STATIC",32];
cocktail_core_css_CSSKeywordValue.STATIC.toString = $estr;
cocktail_core_css_CSSKeywordValue.STATIC.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.RELATIVE = ["RELATIVE",33];
cocktail_core_css_CSSKeywordValue.RELATIVE.toString = $estr;
cocktail_core_css_CSSKeywordValue.RELATIVE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.ABSOLUTE = ["ABSOLUTE",34];
cocktail_core_css_CSSKeywordValue.ABSOLUTE.toString = $estr;
cocktail_core_css_CSSKeywordValue.ABSOLUTE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.FIXED = ["FIXED",35];
cocktail_core_css_CSSKeywordValue.FIXED.toString = $estr;
cocktail_core_css_CSSKeywordValue.FIXED.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.VISIBLE = ["VISIBLE",36];
cocktail_core_css_CSSKeywordValue.VISIBLE.toString = $estr;
cocktail_core_css_CSSKeywordValue.VISIBLE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.HIDDEN = ["HIDDEN",37];
cocktail_core_css_CSSKeywordValue.HIDDEN.toString = $estr;
cocktail_core_css_CSSKeywordValue.HIDDEN.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.SCROLL = ["SCROLL",38];
cocktail_core_css_CSSKeywordValue.SCROLL.toString = $estr;
cocktail_core_css_CSSKeywordValue.SCROLL.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.BORDER_BOX = ["BORDER_BOX",39];
cocktail_core_css_CSSKeywordValue.BORDER_BOX.toString = $estr;
cocktail_core_css_CSSKeywordValue.BORDER_BOX.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.PADDING_BOX = ["PADDING_BOX",40];
cocktail_core_css_CSSKeywordValue.PADDING_BOX.toString = $estr;
cocktail_core_css_CSSKeywordValue.PADDING_BOX.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.CONTENT_BOX = ["CONTENT_BOX",41];
cocktail_core_css_CSSKeywordValue.CONTENT_BOX.toString = $estr;
cocktail_core_css_CSSKeywordValue.CONTENT_BOX.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.CONTAIN = ["CONTAIN",42];
cocktail_core_css_CSSKeywordValue.CONTAIN.toString = $estr;
cocktail_core_css_CSSKeywordValue.CONTAIN.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.COVER = ["COVER",43];
cocktail_core_css_CSSKeywordValue.COVER.toString = $estr;
cocktail_core_css_CSSKeywordValue.COVER.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.CROSSHAIR = ["CROSSHAIR",44];
cocktail_core_css_CSSKeywordValue.CROSSHAIR.toString = $estr;
cocktail_core_css_CSSKeywordValue.CROSSHAIR.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.DEFAULT = ["DEFAULT",45];
cocktail_core_css_CSSKeywordValue.DEFAULT.toString = $estr;
cocktail_core_css_CSSKeywordValue.DEFAULT.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.POINTER = ["POINTER",46];
cocktail_core_css_CSSKeywordValue.POINTER.toString = $estr;
cocktail_core_css_CSSKeywordValue.POINTER.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.TEXT = ["TEXT",47];
cocktail_core_css_CSSKeywordValue.TEXT.toString = $estr;
cocktail_core_css_CSSKeywordValue.TEXT.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.ALL = ["ALL",48];
cocktail_core_css_CSSKeywordValue.ALL.toString = $estr;
cocktail_core_css_CSSKeywordValue.ALL.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.EASE = ["EASE",49];
cocktail_core_css_CSSKeywordValue.EASE.toString = $estr;
cocktail_core_css_CSSKeywordValue.EASE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.LINEAR = ["LINEAR",50];
cocktail_core_css_CSSKeywordValue.LINEAR.toString = $estr;
cocktail_core_css_CSSKeywordValue.LINEAR.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.EASE_IN = ["EASE_IN",51];
cocktail_core_css_CSSKeywordValue.EASE_IN.toString = $estr;
cocktail_core_css_CSSKeywordValue.EASE_IN.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.EASE_OUT = ["EASE_OUT",52];
cocktail_core_css_CSSKeywordValue.EASE_OUT.toString = $estr;
cocktail_core_css_CSSKeywordValue.EASE_OUT.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.EASE_IN_OUT = ["EASE_IN_OUT",53];
cocktail_core_css_CSSKeywordValue.EASE_IN_OUT.toString = $estr;
cocktail_core_css_CSSKeywordValue.EASE_IN_OUT.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.STEP_START = ["STEP_START",54];
cocktail_core_css_CSSKeywordValue.STEP_START.toString = $estr;
cocktail_core_css_CSSKeywordValue.STEP_START.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.STEP_END = ["STEP_END",55];
cocktail_core_css_CSSKeywordValue.STEP_END.toString = $estr;
cocktail_core_css_CSSKeywordValue.STEP_END.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.START = ["START",56];
cocktail_core_css_CSSKeywordValue.START.toString = $estr;
cocktail_core_css_CSSKeywordValue.START.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.END = ["END",57];
cocktail_core_css_CSSKeywordValue.END.toString = $estr;
cocktail_core_css_CSSKeywordValue.END.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.XX_SMALL = ["XX_SMALL",58];
cocktail_core_css_CSSKeywordValue.XX_SMALL.toString = $estr;
cocktail_core_css_CSSKeywordValue.XX_SMALL.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.X_SMALL = ["X_SMALL",59];
cocktail_core_css_CSSKeywordValue.X_SMALL.toString = $estr;
cocktail_core_css_CSSKeywordValue.X_SMALL.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.SMALL = ["SMALL",60];
cocktail_core_css_CSSKeywordValue.SMALL.toString = $estr;
cocktail_core_css_CSSKeywordValue.SMALL.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.MEDIUM = ["MEDIUM",61];
cocktail_core_css_CSSKeywordValue.MEDIUM.toString = $estr;
cocktail_core_css_CSSKeywordValue.MEDIUM.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.LARGE = ["LARGE",62];
cocktail_core_css_CSSKeywordValue.LARGE.toString = $estr;
cocktail_core_css_CSSKeywordValue.LARGE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.X_LARGE = ["X_LARGE",63];
cocktail_core_css_CSSKeywordValue.X_LARGE.toString = $estr;
cocktail_core_css_CSSKeywordValue.X_LARGE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.XX_LARGE = ["XX_LARGE",64];
cocktail_core_css_CSSKeywordValue.XX_LARGE.toString = $estr;
cocktail_core_css_CSSKeywordValue.XX_LARGE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.LARGER = ["LARGER",65];
cocktail_core_css_CSSKeywordValue.LARGER.toString = $estr;
cocktail_core_css_CSSKeywordValue.LARGER.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.SMALLER = ["SMALLER",66];
cocktail_core_css_CSSKeywordValue.SMALLER.toString = $estr;
cocktail_core_css_CSSKeywordValue.SMALLER.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.REPEAT = ["REPEAT",67];
cocktail_core_css_CSSKeywordValue.REPEAT.toString = $estr;
cocktail_core_css_CSSKeywordValue.REPEAT.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.REPEAT_X = ["REPEAT_X",68];
cocktail_core_css_CSSKeywordValue.REPEAT_X.toString = $estr;
cocktail_core_css_CSSKeywordValue.REPEAT_X.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.REPEAT_Y = ["REPEAT_Y",69];
cocktail_core_css_CSSKeywordValue.REPEAT_Y.toString = $estr;
cocktail_core_css_CSSKeywordValue.REPEAT_Y.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.SPACE = ["SPACE",70];
cocktail_core_css_CSSKeywordValue.SPACE.toString = $estr;
cocktail_core_css_CSSKeywordValue.SPACE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.ROUND = ["ROUND",71];
cocktail_core_css_CSSKeywordValue.ROUND.toString = $estr;
cocktail_core_css_CSSKeywordValue.ROUND.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.NO_REPEAT = ["NO_REPEAT",72];
cocktail_core_css_CSSKeywordValue.NO_REPEAT.toString = $estr;
cocktail_core_css_CSSKeywordValue.NO_REPEAT.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.THIN = ["THIN",73];
cocktail_core_css_CSSKeywordValue.THIN.toString = $estr;
cocktail_core_css_CSSKeywordValue.THIN.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.THICK = ["THICK",74];
cocktail_core_css_CSSKeywordValue.THICK.toString = $estr;
cocktail_core_css_CSSKeywordValue.THICK.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.DOTTED = ["DOTTED",75];
cocktail_core_css_CSSKeywordValue.DOTTED.toString = $estr;
cocktail_core_css_CSSKeywordValue.DOTTED.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.DASHED = ["DASHED",76];
cocktail_core_css_CSSKeywordValue.DASHED.toString = $estr;
cocktail_core_css_CSSKeywordValue.DASHED.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.SOLID = ["SOLID",77];
cocktail_core_css_CSSKeywordValue.SOLID.toString = $estr;
cocktail_core_css_CSSKeywordValue.SOLID.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.DOUBLE = ["DOUBLE",78];
cocktail_core_css_CSSKeywordValue.DOUBLE.toString = $estr;
cocktail_core_css_CSSKeywordValue.DOUBLE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.GROOVE = ["GROOVE",79];
cocktail_core_css_CSSKeywordValue.GROOVE.toString = $estr;
cocktail_core_css_CSSKeywordValue.GROOVE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.RIDGE = ["RIDGE",80];
cocktail_core_css_CSSKeywordValue.RIDGE.toString = $estr;
cocktail_core_css_CSSKeywordValue.RIDGE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.INSET = ["INSET",81];
cocktail_core_css_CSSKeywordValue.INSET.toString = $estr;
cocktail_core_css_CSSKeywordValue.INSET.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.OUTSET = ["OUTSET",82];
cocktail_core_css_CSSKeywordValue.OUTSET.toString = $estr;
cocktail_core_css_CSSKeywordValue.OUTSET.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.INVERT = ["INVERT",83];
cocktail_core_css_CSSKeywordValue.INVERT.toString = $estr;
cocktail_core_css_CSSKeywordValue.INVERT.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.UNDERLINE = ["UNDERLINE",84];
cocktail_core_css_CSSKeywordValue.UNDERLINE.toString = $estr;
cocktail_core_css_CSSKeywordValue.UNDERLINE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.OVERLINE = ["OVERLINE",85];
cocktail_core_css_CSSKeywordValue.OVERLINE.toString = $estr;
cocktail_core_css_CSSKeywordValue.OVERLINE.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.LINE_THROUGH = ["LINE_THROUGH",86];
cocktail_core_css_CSSKeywordValue.LINE_THROUGH.toString = $estr;
cocktail_core_css_CSSKeywordValue.LINE_THROUGH.__enum__ = cocktail_core_css_CSSKeywordValue;
cocktail_core_css_CSSKeywordValue.BLINK = ["BLINK",87];
cocktail_core_css_CSSKeywordValue.BLINK.toString = $estr;
cocktail_core_css_CSSKeywordValue.BLINK.__enum__ = cocktail_core_css_CSSKeywordValue;
var cocktail_core_css_CSSRule = function(parentStyleSheet,parentRule) {
	this.parentStyleSheet = parentStyleSheet;
	this.parentRule = parentRule;
};
$hxClasses["cocktail.core.css.CSSRule"] = cocktail_core_css_CSSRule;
cocktail_core_css_CSSRule.__name__ = true;
cocktail_core_css_CSSRule.prototype = {
	dispose: function() {
		if(this.parentRule != null) {
			this.parentRule.dispose();
			this.parentRule = null;
		}
		if(this.parentStyleSheet != null) this.parentStyleSheet.dispose();
	}
	,set_cssText: function(value) {
		return this.cssText = value;
	}
	,__class__: cocktail_core_css_CSSRule
	,__properties__: {set_cssText:"set_cssText"}
};
var cocktail_core_css_CSSMediaRule = function(parentStyleSheet,parentRule) {
	cocktail_core_css_CSSRule.call(this,parentStyleSheet,parentRule);
};
$hxClasses["cocktail.core.css.CSSMediaRule"] = cocktail_core_css_CSSMediaRule;
cocktail_core_css_CSSMediaRule.__name__ = true;
cocktail_core_css_CSSMediaRule.__super__ = cocktail_core_css_CSSRule;
cocktail_core_css_CSSMediaRule.prototype = $extend(cocktail_core_css_CSSRule.prototype,{
	__class__: cocktail_core_css_CSSMediaRule
});
var cocktail_core_css_CSSStyleDeclaration = function(parentRule,onStyleChange) {
	this._onStyleChange = onStyleChange;
	this.parentRule = parentRule;
	this.length = 0;
};
$hxClasses["cocktail.core.css.CSSStyleDeclaration"] = cocktail_core_css_CSSStyleDeclaration;
cocktail_core_css_CSSStyleDeclaration.__name__ = true;
cocktail_core_css_CSSStyleDeclaration.prototype = {
	dispose: function() {
		this._indexedProperties = null;
		this._propertiesPositions = null;
		this._onStyleChange = null;
		if(this.parentRule != null) {
			this.parentRule.dispose();
			this.parentRule = null;
		}
	}
	,reset: function() {
		this._onStyleChange = null;
		this.parentRule = null;
		this.length = 0;
		this.resetIndexedProperties();
		this.resetPropertiesPositions();
	}
	,resetIndexedProperties: function() {
		if(this._indexedProperties == null) this._indexedProperties = [];
		var _g = 0;
		while(_g < 87) {
			var i = _g++;
			this._indexedProperties[i] = null;
		}
	}
	,resetPropertiesPositions: function() {
		if(this._propertiesPositions == null) this._propertiesPositions = [];
		var _g = 0;
		while(_g < 87) {
			var i = _g++;
			this._propertiesPositions[i] = -1;
		}
	}
	,decrementPropertiesPositions: function(removedPropertyIndex) {
		var foundProperty = false;
		var _g1 = 0;
		var _g = this.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(foundProperty == true) this._propertiesPositions[i] = this._propertiesPositions[i - 1];
			if(this._propertiesPositions[i] == removedPropertyIndex) foundProperty = true;
		}
	}
	,item: function(index) {
		if(index > this.length - 1) return -1;
		return this._propertiesPositions[index];
	}
	,getPropertyValue: function(propertyIndex) {
		var typedProperty;
		if(this._indexedProperties == null) {
			this.resetIndexedProperties();
			this.resetPropertiesPositions();
		}
		typedProperty = this._indexedProperties[propertyIndex];
		if(typedProperty != null) return cocktail_core_css_parsers_CSSStyleSerializer.serialize(typedProperty.typedValue);
		return null;
	}
	,setProperty: function(index,value,priority) {
		if(this._indexedProperties == null) {
			this.resetIndexedProperties();
			this.resetPropertiesPositions();
		}
		if(value == null) this.removeProperty(index); else {
			var typedProperty = cocktail_core_css_parsers_CSSStyleParser.parseStyleValue(cocktail_core_css_CSSConstants.getPropertyNameFromIndex(index),value,0,null);
			if(typedProperty != null) this.applyProperty(typedProperty.index,typedProperty.typedValue,typedProperty.important);
		}
	}
	,removeProperty: function(index) {
		var typedProperty;
		if(this._indexedProperties == null) {
			this.resetIndexedProperties();
			this.resetPropertiesPositions();
		}
		typedProperty = this._indexedProperties[index];
		if(typedProperty != null) {
			this.decrementPropertiesPositions(index);
			this._propertiesPositions[this.length] = -1;
			this.length--;
			this._indexedProperties[index] = null;
			if(this._onStyleChange != null) this._onStyleChange(index);
			return index;
		}
		return -1;
	}
	,getTypedProperty: function(propertyIndex) {
		if(this._indexedProperties == null) {
			this.resetIndexedProperties();
			this.resetPropertiesPositions();
		}
		return this._indexedProperties[propertyIndex];
	}
	,setTypedProperty: function(propertyIndex,typedValue,important) {
		if(this._indexedProperties == null) {
			this.resetIndexedProperties();
			this.resetPropertiesPositions();
		}
		var currentProperty;
		if(this._indexedProperties == null) {
			this.resetIndexedProperties();
			this.resetPropertiesPositions();
		}
		currentProperty = this._indexedProperties[propertyIndex];
		if(currentProperty == null) {
			var newProperty = new cocktail_core_css_TypedPropertyVO();
			newProperty.important = important;
			newProperty.typedValue = typedValue;
			newProperty.index = propertyIndex;
			this._propertiesPositions[this.length] = propertyIndex;
			this.length++;
			this._indexedProperties[propertyIndex] = newProperty;
			if(this._onStyleChange != null) this._onStyleChange(propertyIndex);
		} else if(currentProperty.typedValue != typedValue || currentProperty.important != important) {
			currentProperty.typedValue = typedValue;
			currentProperty.important = important;
			if(this._onStyleChange != null) this._onStyleChange(propertyIndex);
		}
	}
	,setTypedPropertyInitial: function(propertyIndex,typedValue,important) {
		var newProperty = new cocktail_core_css_TypedPropertyVO();
		newProperty.important = important;
		newProperty.typedValue = typedValue;
		newProperty.index = propertyIndex;
		if(this._indexedProperties == null) {
			this.resetIndexedProperties();
			this.resetPropertiesPositions();
		}
		this._propertiesPositions[this.length] = propertyIndex;
		this.length++;
		this._indexedProperties[propertyIndex] = newProperty;
		if(this._onStyleChange != null) this._onStyleChange(propertyIndex);
	}
	,applyProperty: function(propertyIndex,styleValue,important) {
		if(this.isShorthand(propertyIndex) == true) {
			if(this.isValidShorthand(propertyIndex,styleValue) == true) this.setShorthand(propertyIndex,styleValue,important);
		} else if(this.isValidProperty(propertyIndex,styleValue) == true) this.setTypedProperty(propertyIndex,styleValue,important);
	}
	,isValidProperty: function(propertyIndex,styleValue) {
		switch(propertyIndex) {
		case 15:case 16:
			switch(styleValue[1]) {
			case 7:
				var value = styleValue[2];
				if(this.isPositiveLength(value) == true) return true;
				break;
			case 0:
				var value1 = styleValue[2];
				if(value1 == 0) return true;
				break;
			case 2:
				var value2 = styleValue[2];
				if(value2 >= 0) return true;
				break;
			case 4:
				var value3 = styleValue[2];
				if(value3 == cocktail_core_css_CSSKeywordValue.AUTO) return true;
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 0:
			switch(styleValue[1]) {
			case 4:
				var value4 = styleValue[2];
				switch(value4[1]) {
				case 30:case 29:case 18:case 28:
					return true;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 49:
			switch(styleValue[1]) {
			case 4:
				var value5 = styleValue[2];
				switch(value5[1]) {
				case 36:case 37:
					return true;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 1:
			switch(styleValue[1]) {
			case 4:
				var value6 = styleValue[2];
				switch(value6[1]) {
				case 32:case 35:case 34:case 33:
					return true;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 34:
			switch(styleValue[1]) {
			case 7:
				var value7 = styleValue[2];
				if(this.isPositiveLength(value7) == true) return true;
				break;
			case 2:
				var value8 = styleValue[2];
				if(value8 >= 0) return true;
				break;
			case 4:
				var value9 = styleValue[2];
				switch(value9[1]) {
				case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 65:case 66:
					return true;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 8:case 6:case 9:case 7:
			return this.isValidMarginProperty(styleValue);
		case 13:case 14:case 11:case 12:
			return this.isValidPaddingProperty(styleValue);
		case 20:case 18:
			switch(styleValue[1]) {
			case 4:
				var value10 = styleValue[2];
				switch(value10[1]) {
				case 18:
					return true;
				default:
				}
				break;
			case 7:
				var value11 = styleValue[2];
				if(this.isPositiveLength(value11) == true) return true;
				break;
			case 2:
				var value12 = styleValue[2];
				if(value12 >= 0) return true;
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 53:
			switch(styleValue[1]) {
			case 1:
				var value13 = styleValue[2];
				return true;
			case 0:
				var value14 = styleValue[2];
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 19:case 17:
			switch(styleValue[1]) {
			case 7:
				var value15 = styleValue[2];
				if(this.isPositiveLength(value15) == true) return true;
				break;
			case 2:
				var value16 = styleValue[2];
				if(value16 >= 0) return true;
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 22:case 23:case 21:case 24:
			switch(styleValue[1]) {
			case 7:
				var value17 = styleValue[2];
				return true;
			case 2:
				var value18 = styleValue[2];
				return true;
			case 0:
				var value19 = styleValue[2];
				if(value19 == 0) return true;
				break;
			case 4:
				var value20 = styleValue[2];
				if(value20 == cocktail_core_css_CSSKeywordValue.AUTO) return true;
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 36:
			switch(styleValue[1]) {
			case 4:
				var value21 = styleValue[2];
				switch(value21[1]) {
				case 4:case 5:case 0:
					return true;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 61:
			switch(styleValue[1]) {
			case 4:
				var value22 = styleValue[2];
				switch(value22[1]) {
				case 18:
					return true;
				default:
				}
				break;
			case 21:
				var value23 = styleValue[2];
				return true;
			case 15:
				var value24 = styleValue[2];
				var _g1 = 0;
				var _g = value24.length;
				while(_g1 < _g) {
					var i = _g1++;
					{
						var _g2 = value24[i];
						switch(_g2[1]) {
						case 21:
							var value25 = _g2[2];
							break;
						default:
							return false;
						}
					}
				}
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 60:
			switch(styleValue[1]) {
			case 13:
				var value26 = styleValue[2];
				if(value26.length != 2) return false;
				var horizontalValueIsValid = this.isValidTransformOrigin(value26[0],true,false);
				if(horizontalValueIsValid == false) return false;
				return this.isValidTransformOrigin(value26[1],false,true);
			case 16:case 17:
				return true;
			default:
				return this.isValidTransformOrigin(styleValue,true,true);
			}
			break;
		case 51:case 52:
			switch(styleValue[1]) {
			case 4:
				var value27 = styleValue[2];
				switch(value27[1]) {
				case 36:case 38:case 37:case 27:
					return true;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 37:
			switch(styleValue[1]) {
			case 15:
				var values = styleValue[2];
				var length = values.length;
				var _g3 = 0;
				while(_g3 < length) {
					var i1 = _g3++;
					{
						var _g11 = values[i1];
						switch(_g11[1]) {
						case 3:
							var value28 = _g11[2];
							break;
						case 6:
							var value29 = _g11[2];
							break;
						default:
							return false;
						}
					}
				}
				return true;
			case 3:
				var value30 = styleValue[2];
				return true;
			case 6:
				var value31 = styleValue[2];
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 2:case 3:
			switch(styleValue[1]) {
			case 4:
				var value32 = styleValue[2];
				switch(value32[1]) {
				case 11:case 12:case 31:case 18:
					return true;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 45:
			switch(styleValue[1]) {
			case 4:
				var value33 = styleValue[2];
				switch(value33[1]) {
				case 0:case 8:case 10:case 7:case 9:
					return true;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 42:
			switch(styleValue[1]) {
			case 4:
				var value34 = styleValue[2];
				switch(value34[1]) {
				case 18:case 16:case 17:case 15:
					return true;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 35:
			switch(styleValue[1]) {
			case 4:
				var value35 = styleValue[2];
				switch(value35[1]) {
				case 0:case 1:case 2:case 3:
					return true;
				default:
				}
				break;
			case 0:
				var value36 = styleValue[2];
				switch(value36) {
				case 100:case 200:case 300:case 400:case 500:case 600:case 700:case 800:case 900:
					return true;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 38:
			switch(styleValue[1]) {
			case 4:
				var value37 = styleValue[2];
				switch(value37[1]) {
				case 0:case 6:
					return true;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 46:
			switch(styleValue[1]) {
			case 4:
				var value38 = styleValue[2];
				switch(value38[1]) {
				case 11:case 12:case 13:case 14:
					return true;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 48:
			switch(styleValue[1]) {
			case 4:
				var value39 = styleValue[2];
				switch(value39[1]) {
				case 19:case 20:case 21:case 26:case 23:case 24:case 22:case 25:
					return true;
				default:
				}
				break;
			case 2:
				var value40 = styleValue[2];
				return true;
			case 7:
				var value41 = styleValue[2];
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 54:
			switch(styleValue[1]) {
			case 4:
				var value42 = styleValue[2];
				switch(value42[1]) {
				case 27:case 44:case 45:case 46:case 47:
					return true;
				default:
				}
				break;
			case 5:
				var value43 = styleValue[2];
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 4:
			switch(styleValue[1]) {
			case 4:
				var value44 = styleValue[2];
				if(value44 == cocktail_core_css_CSSKeywordValue.AUTO) return true;
				break;
			case 0:
				var value45 = styleValue[2];
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 41:
			switch(styleValue[1]) {
			case 4:
				var value46 = styleValue[2];
				if(value46 == cocktail_core_css_CSSKeywordValue.NORMAL) return true;
				break;
			case 7:
				var value47 = styleValue[2];
				if(this.isPositiveLength(value47) == true) return true;
				break;
			case 1:
				var value48 = styleValue[2];
				if(value48 >= 0) return true;
				break;
			case 0:
				var value49 = styleValue[2];
				if(value49 >= 0) return true;
				break;
			case 2:
				var value50 = styleValue[2];
				if(value50 >= 0) return true;
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 47:
			switch(styleValue[1]) {
			case 0:
				var value51 = styleValue[2];
				if(value51 == 0) return true;
				break;
			case 7:
				var value52 = styleValue[2];
				return true;
			case 2:
				var value53 = styleValue[2];
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 43:case 44:
			switch(styleValue[1]) {
			case 4:
				var value54 = styleValue[2];
				if(value54 == cocktail_core_css_CSSKeywordValue.NORMAL) return true;
				break;
			case 7:
				var value55 = styleValue[2];
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 40:case 25:
			switch(styleValue[1]) {
			case 12:
				var value56 = styleValue[2];
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 26:
			switch(styleValue[1]) {
			case 4:
				var value57 = styleValue[2];
				if(value57 == cocktail_core_css_CSSKeywordValue.NONE) return true;
				break;
			case 5:
				var value58 = styleValue[2];
				return true;
			case 15:
				var value59 = styleValue[2];
				var isImageList = true;
				var _g12 = 0;
				var _g4 = value59.length;
				while(_g12 < _g4) {
					var i2 = _g12++;
					{
						var _g21 = value59[i2];
						switch(_g21[1]) {
						case 5:
							var value60 = _g21[2];
							break;
						case 4:
							var value61 = _g21[2];
							if(value61 != cocktail_core_css_CSSKeywordValue.NONE) isImageList = false;
							break;
						default:
							isImageList = false;
						}
					}
				}
				if(isImageList == true) return true;
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 32:
			switch(styleValue[1]) {
			case 4:
				var value62 = styleValue[2];
				switch(value62[1]) {
				case 38:case 35:
					return true;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 30:
			switch(styleValue[1]) {
			case 13:
				var value63 = styleValue[2];
				var _g5 = value63.length;
				switch(_g5) {
				case 2:
					var isValidHorizontalPosition = this.isValidBackgroundPosition(value63[0]);
					if(isValidHorizontalPosition == false) return false;
					return this.isValidBackgroundPosition(value63[1]);
				}
				break;
			default:
				return this.isValidBackgroundPosition(styleValue);
			}
			break;
		case 27:
			switch(styleValue[1]) {
			case 4:
				var value64 = styleValue[2];
				switch(value64[1]) {
				case 67:case 68:case 69:case 72:case 71:case 70:
					return true;
				default:
				}
				break;
			case 13:
				var value65 = styleValue[2];
				if(value65.length == 2) {
					var isFirstValueValid = false;
					{
						var _g6 = value65[0];
						switch(_g6[1]) {
						case 4:
							var value66 = _g6[2];
							switch(value66[1]) {
							case 67:case 70:case 71:case 72:
								isFirstValueValid = true;
								break;
							default:
							}
							break;
						default:
						}
					}
					var isSecondValueValid = false;
					{
						var _g7 = value65[1];
						switch(_g7[1]) {
						case 4:
							var value67 = _g7[2];
							switch(value67[1]) {
							case 67:case 70:case 71:case 72:
								isSecondValueValid = true;
								break;
							default:
							}
							break;
						default:
						}
					}
					if(isFirstValueValid == true && isSecondValueValid == true) return true;
				}
				break;
			case 15:
				var value68 = styleValue[2];
				var _g13 = 0;
				var _g8 = value68.length;
				while(_g13 < _g8) {
					var i3 = _g13++;
					if(this.isValidProperty(27,value68[i3]) == false) return false;
				}
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 29:
			switch(styleValue[1]) {
			case 4:
				var value69 = styleValue[2];
				switch(value69[1]) {
				case 43:case 42:case 27:
					return true;
				default:
				}
				break;
			case 13:
				var value70 = styleValue[2];
				if(value70.length == 2) {
					var isFirstValueValid1 = this.isValidBackgroundSize(value70[0]);
					if(isFirstValueValid1 == false) return false;
					return this.isValidBackgroundSize(value70[1]);
				}
				break;
			case 15:
				var value71 = styleValue[2];
				var _g14 = 0;
				var _g9 = value71.length;
				while(_g14 < _g9) {
					var i4 = _g14++;
					if(this.isValidProperty(29,value71[i4]) == false) return false;
				}
				return true;
			default:
				return this.isValidBackgroundSize(styleValue);
			}
			break;
		case 31:case 28:
			switch(styleValue[1]) {
			case 4:
				var value72 = styleValue[2];
				switch(value72[1]) {
				case 39:case 40:case 41:
					return true;
				default:
				}
				break;
			case 15:
				var value73 = styleValue[2];
				var _g15 = 0;
				var _g10 = value73.length;
				while(_g15 < _g10) {
					var i5 = _g15++;
					if(this.isValidProperty(propertyIndex,value73[i5]) == false) return false;
				}
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 57:
			switch(styleValue[1]) {
			case 15:
				var value74 = styleValue[2];
				var length1 = value74.length;
				var _g16 = 0;
				while(_g16 < length1) {
					var i6 = _g16++;
					var isValid = this.isValidTransitionProperty(value74[i6]);
					if(isValid == false) return false;
				}
				return true;
			default:
				return this.isValidTransitionProperty(styleValue);
			}
			break;
		case 55:case 56:
			switch(styleValue[1]) {
			case 15:
				var value75 = styleValue[2];
				var length2 = value75.length;
				var _g17 = 0;
				while(_g17 < length2) {
					var i7 = _g17++;
					var isValid1 = this.isValidTransitionDelayOrDuration(value75[i7]);
					if(isValid1 == false) return false;
				}
				return true;
			default:
				return this.isValidTransitionDelayOrDuration(styleValue);
			}
			break;
		case 58:
			switch(styleValue[1]) {
			case 15:
				var value76 = styleValue[2];
				var length3 = value76.length;
				var _g18 = 0;
				while(_g18 < length3) {
					var i8 = _g18++;
					var isValid2 = this.isValidTransitionTimingFunction(value76[i8]);
					if(isValid2 == false) return false;
				}
				break;
			default:
				return this.isValidTransitionTimingFunction(styleValue);
			}
			break;
		case 62:case 63:case 64:case 65:case 82:
			switch(styleValue[1]) {
			case 16:case 17:
				return true;
			default:
				return this.isValidBorderWidthValue(styleValue);
			}
			break;
		case 67:case 68:case 69:case 70:
			switch(styleValue[1]) {
			case 16:case 17:
				return true;
			default:
				return this.isValidBorderColorValue(styleValue);
			}
			break;
		case 72:case 73:case 74:case 75:
			switch(styleValue[1]) {
			case 16:case 17:
				return true;
			default:
				return this.isValidBorderStyleValue(styleValue);
			}
			break;
		case 83:
			switch(styleValue[1]) {
			case 16:case 17:
				return true;
			default:
				return this.isValidOutlineStyleValue(styleValue);
			}
			break;
		case 84:
			switch(styleValue[1]) {
			case 16:case 17:
				return true;
			default:
				return this.isValidOutlineColorValue(styleValue);
			}
			break;
		case 86:
			switch(styleValue[1]) {
			case 4:
				var value77 = styleValue[2];
				switch(value77[1]) {
				case 18:case 84:case 85:case 86:case 87:
					return true;
				default:
				}
				break;
			case 13:
				var value78 = styleValue[2];
				if(value78.length != 2 && value78.length != 3 && value78.length != 4) return false;
				var foundUnderline = false;
				var foundOverline = false;
				var foundLineThrough = false;
				var foundBlink = false;
				var _g19 = 0;
				var _g20 = value78.length;
				while(_g19 < _g20) {
					var i9 = _g19++;
					{
						var _g22 = value78[i9];
						switch(_g22[1]) {
						case 4:
							var value79 = _g22[2];
							switch(value79[1]) {
							case 84:
								if(foundUnderline == true) return false;
								foundUnderline = true;
								break;
							case 85:
								if(foundOverline == true) return false;
								foundOverline = true;
								break;
							case 86:
								if(foundLineThrough == true) return false;
								foundLineThrough = true;
								break;
							case 87:
								if(foundBlink == true) return false;
								foundBlink = true;
								break;
							default:
								false;
							}
							break;
						default:
							false;
						}
					}
				}
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		}
		return false;
	}
	,isValidTransitionTimingFunction: function(property) {
		switch(property[1]) {
		case 4:
			var value = property[2];
			switch(value[1]) {
			case 49:case 51:case 50:case 52:case 53:case 54:case 55:
				return true;
			default:
			}
			break;
		case 19:
			var intervalChange = property[3];
			var intervalNumbers = property[2];
			return true;
		case 20:
			var y2 = property[5];
			var x2 = property[4];
			var y1 = property[3];
			var x1 = property[2];
			return true;
		default:
		}
		return false;
	}
	,isValidTransitionProperty: function(property) {
		switch(property[1]) {
		case 4:
			var value = property[2];
			switch(value[1]) {
			case 18:case 48:case 11:case 12:case 22:case 25:
				return true;
			default:
			}
			break;
		case 3:
			var value1 = property[2];
			return true;
		case 16:case 17:
			return true;
		default:
		}
		return false;
	}
	,isValidTransitionDelayOrDuration: function(property) {
		switch(property[1]) {
		case 0:
			var value = property[2];
			if(value == 0) return true;
			break;
		case 9:
			var value1 = property[2];
			return true;
		case 16:case 17:
			return true;
		default:
		}
		return false;
	}
	,isValidBackgroundPosition: function(property) {
		switch(property[1]) {
		case 7:
			var value = property[2];
			return true;
		case 0:
			var value1 = property[2];
			return value1 == 0;
		case 2:
			var value2 = property[2];
			return true;
		case 4:
			var value3 = property[2];
			switch(value3[1]) {
			case 11:case 13:case 12:case 25:case 22:
				return true;
			default:
			}
			break;
		case 16:case 17:
			return true;
		default:
		}
		return false;
	}
	,isValidBackgroundSize: function(property) {
		switch(property[1]) {
		case 4:
			var value = property[2];
			return value == cocktail_core_css_CSSKeywordValue.AUTO;
		case 7:
			var value1 = property[2];
			if(this.isPositiveLength(value1)) return true;
			break;
		case 0:
			var value2 = property[2];
			return value2 == 0;
		case 2:
			var value3 = property[2];
			return true;
		case 16:case 17:
			return true;
		default:
		}
		return false;
	}
	,isShorthand: function(propertyIndex) {
		switch(propertyIndex) {
		case 5:case 10:case 50:case 59:case 33:case 39:case 77:case 80:case 78:case 79:case 66:case 71:case 76:case 81:case 85:
			return true;
		default:
			return false;
		}
	}
	,setShorthand: function(propertyIndex,styleValue,important) {
		switch(propertyIndex) {
		case 5:
			switch(styleValue[1]) {
			case 7:
				var value = styleValue[2];
				this.setTypedProperty(6,styleValue,important);
				this.setTypedProperty(7,styleValue,important);
				this.setTypedProperty(8,styleValue,important);
				this.setTypedProperty(9,styleValue,important);
				break;
			case 2:
				var value1 = styleValue[2];
				this.setTypedProperty(6,styleValue,important);
				this.setTypedProperty(7,styleValue,important);
				this.setTypedProperty(8,styleValue,important);
				this.setTypedProperty(9,styleValue,important);
				break;
			case 0:
				var value2 = styleValue[2];
				this.setTypedProperty(6,styleValue,important);
				this.setTypedProperty(7,styleValue,important);
				this.setTypedProperty(8,styleValue,important);
				this.setTypedProperty(9,styleValue,important);
				break;
			case 16:case 17:
				this.setTypedProperty(6,styleValue,important);
				this.setTypedProperty(7,styleValue,important);
				this.setTypedProperty(8,styleValue,important);
				this.setTypedProperty(9,styleValue,important);
				break;
			case 4:
				var value3 = styleValue[2];
				if(value3 == cocktail_core_css_CSSKeywordValue.AUTO) {
					this.setTypedProperty(6,styleValue,important);
					this.setTypedProperty(7,styleValue,important);
					this.setTypedProperty(8,styleValue,important);
					this.setTypedProperty(9,styleValue,important);
				}
				break;
			case 13:
				var value4 = styleValue[2];
				var _g = value4.length;
				switch(_g) {
				case 2:
					this.setTypedProperty(6,value4[1],important);
					this.setTypedProperty(7,value4[1],important);
					this.setTypedProperty(8,value4[0],important);
					this.setTypedProperty(9,value4[0],important);
					break;
				case 3:
					this.setTypedProperty(6,value4[1],important);
					this.setTypedProperty(7,value4[1],important);
					this.setTypedProperty(8,value4[0],important);
					this.setTypedProperty(9,value4[2],important);
					break;
				case 4:
					this.setTypedProperty(6,value4[3],important);
					this.setTypedProperty(7,value4[1],important);
					this.setTypedProperty(8,value4[0],important);
					this.setTypedProperty(9,value4[2],important);
					break;
				}
				break;
			default:
			}
			break;
		case 10:
			switch(styleValue[1]) {
			case 7:
				var value5 = styleValue[2];
				this.setTypedProperty(11,styleValue,important);
				this.setTypedProperty(12,styleValue,important);
				this.setTypedProperty(13,styleValue,important);
				this.setTypedProperty(14,styleValue,important);
				break;
			case 2:
				var value6 = styleValue[2];
				this.setTypedProperty(11,styleValue,important);
				this.setTypedProperty(12,styleValue,important);
				this.setTypedProperty(13,styleValue,important);
				this.setTypedProperty(14,styleValue,important);
				break;
			case 0:
				var value7 = styleValue[2];
				this.setTypedProperty(11,styleValue,important);
				this.setTypedProperty(12,styleValue,important);
				this.setTypedProperty(13,styleValue,important);
				this.setTypedProperty(14,styleValue,important);
				break;
			case 16:case 17:
				this.setTypedProperty(11,styleValue,important);
				this.setTypedProperty(12,styleValue,important);
				this.setTypedProperty(13,styleValue,important);
				this.setTypedProperty(14,styleValue,important);
				break;
			case 13:
				var value8 = styleValue[2];
				var _g1 = value8.length;
				switch(_g1) {
				case 2:
					this.setTypedProperty(11,value8[1],important);
					this.setTypedProperty(12,value8[1],important);
					this.setTypedProperty(13,value8[0],important);
					this.setTypedProperty(14,value8[0],important);
					break;
				case 3:
					this.setTypedProperty(11,value8[1],important);
					this.setTypedProperty(12,value8[1],important);
					this.setTypedProperty(13,value8[0],important);
					this.setTypedProperty(14,value8[2],important);
					break;
				case 4:
					this.setTypedProperty(11,value8[3],important);
					this.setTypedProperty(12,value8[1],important);
					this.setTypedProperty(13,value8[0],important);
					this.setTypedProperty(14,value8[2],important);
					break;
				}
				break;
			default:
			}
			break;
		case 50:
			switch(styleValue[1]) {
			case 4:
				var value9 = styleValue[2];
				this.setTypedProperty(51,styleValue,important);
				this.setTypedProperty(52,styleValue,important);
				break;
			case 13:
				var value10 = styleValue[2];
				this.setTypedProperty(51,value10[0],important);
				this.setTypedProperty(52,value10[1],important);
				break;
			default:
			}
			break;
		case 33:
			switch(styleValue[1]) {
			case 5:
				var value11 = styleValue[2];
				this.setTypedProperty(26,styleValue,important);
				break;
			case 12:
				var value12 = styleValue[2];
				this.setTypedProperty(25,styleValue,important);
				break;
			case 4:
				var value13 = styleValue[2];
				if(this.isValidBackgroundRepeat(styleValue) == true) this.setTypedProperty(27,styleValue,important); else if(this.isValidBackgroundPosition(styleValue) == true) this.setTypedProperty(30,styleValue,important); else if(this.isValidBackgroundAttachment(styleValue) == true) this.setTypedProperty(32,styleValue,important); else switch(value13[1]) {
				case 18:
					var initialStyleDeclaration = cocktail_core_css_InitialStyleDeclaration.getInstance();
					this.setTypedProperty(32,((function($this) {
						var $r;
						if(initialStyleDeclaration._indexedProperties == null) {
							initialStyleDeclaration.resetIndexedProperties();
							initialStyleDeclaration.resetPropertiesPositions();
						}
						$r = initialStyleDeclaration._indexedProperties[32];
						return $r;
					}(this))).typedValue,important);
					this.setTypedProperty(30,((function($this) {
						var $r;
						if(initialStyleDeclaration._indexedProperties == null) {
							initialStyleDeclaration.resetIndexedProperties();
							initialStyleDeclaration.resetPropertiesPositions();
						}
						$r = initialStyleDeclaration._indexedProperties[30];
						return $r;
					}(this))).typedValue,important);
					this.setTypedProperty(25,((function($this) {
						var $r;
						if(initialStyleDeclaration._indexedProperties == null) {
							initialStyleDeclaration.resetIndexedProperties();
							initialStyleDeclaration.resetPropertiesPositions();
						}
						$r = initialStyleDeclaration._indexedProperties[25];
						return $r;
					}(this))).typedValue,important);
					this.setTypedProperty(27,((function($this) {
						var $r;
						if(initialStyleDeclaration._indexedProperties == null) {
							initialStyleDeclaration.resetIndexedProperties();
							initialStyleDeclaration.resetPropertiesPositions();
						}
						$r = initialStyleDeclaration._indexedProperties[27];
						return $r;
					}(this))).typedValue,important);
					this.setTypedProperty(26,((function($this) {
						var $r;
						if(initialStyleDeclaration._indexedProperties == null) {
							initialStyleDeclaration.resetIndexedProperties();
							initialStyleDeclaration.resetPropertiesPositions();
						}
						$r = initialStyleDeclaration._indexedProperties[26];
						return $r;
					}(this))).typedValue,important);
					break;
				default:
				}
				break;
			case 13:
				var value14 = styleValue[2];
				var length = value14.length;
				var firstBackgroundPosition = null;
				var _g2 = 0;
				while(_g2 < length) {
					var i = _g2++;
					{
						var _g11 = value14[i];
						switch(_g11[1]) {
						case 12:
							var color = _g11[2];
							this.setTypedProperty(25,value14[i],important);
							break;
						case 5:
							var url = _g11[2];
							this.setTypedProperty(26,value14[i],important);
							break;
						default:
							if(this.isValidBackgroundRepeat(value14[i]) == true) this.setTypedProperty(27,value14[i],important); else if(this.isValidBackgroundAttachment(value14[i]) == true) this.setTypedProperty(32,value14[i],important); else if(this.isValidBackgroundPosition(value14[i]) == true) {
								if(firstBackgroundPosition == null) {
									this.setTypedProperty(30,value14[i],important);
									firstBackgroundPosition = value14[i];
								} else this.setTypedProperty(30,cocktail_core_css_CSSPropertyValue.GROUP([firstBackgroundPosition,value14[i]]),important);
							}
						}
					}
				}
				break;
			default:
			}
			break;
		case 39:
			switch(styleValue[1]) {
			case 13:
				var values = styleValue[2];
				this.setFontShorthandGoup(values,important);
				this.setTypedProperty(37,values[values.length - 1],important);
				break;
			case 15:
				var values1 = styleValue[2];
				{
					var _g3 = values1[0];
					switch(_g3[1]) {
					case 13:
						var groupValues = _g3[2];
						this.setFontShorthandGoup(groupValues,important);
						var fontNames = [];
						fontNames.push(groupValues[groupValues.length - 1]);
						var length1 = values1.length;
						var i1 = 1;
						while(i1 < length1) {
							fontNames.push(values1[i1]);
							i1++;
						}
						this.setTypedProperty(37,cocktail_core_css_CSSPropertyValue.CSS_LIST(fontNames),important);
						break;
					default:
					}
				}
				break;
			default:
			}
			break;
		case 59:
			var transitionPropertyValues = [];
			var transitionDurationValues = [];
			var transitionDelayValues = [];
			var transitionTimingFunctionValues = [];
			switch(styleValue[1]) {
			case 15:
				var value15 = styleValue[2];
				var _g12 = 0;
				var _g4 = value15.length;
				while(_g12 < _g4) {
					var i2 = _g12++;
					{
						var _g21 = value15[i2];
						switch(_g21[1]) {
						case 13:
							var value16 = _g21[2];
							this.setTransitionGroupShorthand(value16,transitionPropertyValues,transitionDurationValues,transitionDelayValues,transitionTimingFunctionValues);
							break;
						default:
							this.setTransitionShorthand(value15[i2],false,transitionPropertyValues,transitionDurationValues,transitionDelayValues,transitionTimingFunctionValues);
						}
					}
				}
				break;
			case 13:
				var value17 = styleValue[2];
				this.setTransitionGroupShorthand(value17,transitionPropertyValues,transitionDurationValues,transitionDelayValues,transitionTimingFunctionValues);
				break;
			default:
				this.setTransitionShorthand(styleValue,false,transitionPropertyValues,transitionDurationValues,transitionDelayValues,transitionTimingFunctionValues);
			}
			if(transitionPropertyValues.length > 0) {
				if(transitionPropertyValues.length == 1) this.setTypedProperty(57,transitionPropertyValues[0],important); else this.setTypedProperty(57,cocktail_core_css_CSSPropertyValue.CSS_LIST(transitionPropertyValues),important);
			}
			if(transitionDelayValues.length > 0) {
				if(transitionDelayValues.length == 1) this.setTypedProperty(56,transitionDelayValues[0],important); else this.setTypedProperty(56,cocktail_core_css_CSSPropertyValue.CSS_LIST(transitionDelayValues),important);
			}
			if(transitionDurationValues.length > 0) {
				if(transitionDurationValues.length == 1) this.setTypedProperty(55,transitionDurationValues[0],important); else this.setTypedProperty(55,cocktail_core_css_CSSPropertyValue.CSS_LIST(transitionDurationValues),important);
			}
			if(transitionTimingFunctionValues.length > 0) {
				if(transitionTimingFunctionValues.length == 1) this.setTypedProperty(58,transitionTimingFunctionValues[0],important); else this.setTypedProperty(58,cocktail_core_css_CSSPropertyValue.CSS_LIST(transitionTimingFunctionValues),important);
			}
			break;
		case 66:
			switch(styleValue[1]) {
			case 4:
				var value18 = styleValue[2];
				this.setTypedProperty(62,styleValue,important);
				this.setTypedProperty(63,styleValue,important);
				this.setTypedProperty(64,styleValue,important);
				this.setTypedProperty(65,styleValue,important);
				break;
			case 7:
				var value19 = styleValue[2];
				this.setTypedProperty(62,styleValue,important);
				this.setTypedProperty(63,styleValue,important);
				this.setTypedProperty(64,styleValue,important);
				this.setTypedProperty(65,styleValue,important);
				break;
			case 0:
				var value20 = styleValue[2];
				this.setTypedProperty(62,styleValue,important);
				this.setTypedProperty(63,styleValue,important);
				this.setTypedProperty(64,styleValue,important);
				this.setTypedProperty(65,styleValue,important);
				break;
			case 13:
				var value21 = styleValue[2];
				var _g5 = value21.length;
				switch(_g5) {
				case 2:
					this.setTypedProperty(62,value21[0],important);
					this.setTypedProperty(63,value21[1],important);
					this.setTypedProperty(64,value21[0],important);
					this.setTypedProperty(65,value21[1],important);
					break;
				case 3:
					this.setTypedProperty(62,value21[0],important);
					this.setTypedProperty(63,value21[1],important);
					this.setTypedProperty(64,value21[3],important);
					this.setTypedProperty(65,value21[1],important);
					break;
				case 4:
					this.setTypedProperty(62,value21[0],important);
					this.setTypedProperty(63,value21[1],important);
					this.setTypedProperty(64,value21[2],important);
					this.setTypedProperty(65,value21[3],important);
					break;
				default:
				}
				break;
			case 16:case 17:
				this.setTypedProperty(62,styleValue,important);
				this.setTypedProperty(63,styleValue,important);
				this.setTypedProperty(64,styleValue,important);
				this.setTypedProperty(65,styleValue,important);
				break;
			default:
			}
			break;
		case 71:
			switch(styleValue[1]) {
			case 12:
				var value22 = styleValue[2];
				this.setTypedProperty(67,styleValue,important);
				this.setTypedProperty(68,styleValue,important);
				this.setTypedProperty(69,styleValue,important);
				this.setTypedProperty(70,styleValue,important);
				break;
			case 13:
				var value23 = styleValue[2];
				var _g6 = value23.length;
				switch(_g6) {
				case 2:
					this.setTypedProperty(67,value23[0],important);
					this.setTypedProperty(68,value23[1],important);
					this.setTypedProperty(69,value23[0],important);
					this.setTypedProperty(70,value23[1],important);
					break;
				case 3:
					this.setTypedProperty(67,value23[0],important);
					this.setTypedProperty(68,value23[1],important);
					this.setTypedProperty(69,value23[3],important);
					this.setTypedProperty(70,value23[1],important);
					break;
				case 4:
					this.setTypedProperty(67,value23[0],important);
					this.setTypedProperty(68,value23[1],important);
					this.setTypedProperty(69,value23[2],important);
					this.setTypedProperty(70,value23[3],important);
					break;
				default:
				}
				break;
			case 16:case 17:
				this.setTypedProperty(62,styleValue,important);
				this.setTypedProperty(63,styleValue,important);
				this.setTypedProperty(64,styleValue,important);
				this.setTypedProperty(65,styleValue,important);
				break;
			default:
			}
			break;
		case 76:
			switch(styleValue[1]) {
			case 4:
				var value24 = styleValue[2];
				this.setTypedProperty(72,styleValue,important);
				this.setTypedProperty(73,styleValue,important);
				this.setTypedProperty(74,styleValue,important);
				this.setTypedProperty(75,styleValue,important);
				break;
			case 13:
				var value25 = styleValue[2];
				var _g7 = value25.length;
				switch(_g7) {
				case 2:
					this.setTypedProperty(72,value25[0],important);
					this.setTypedProperty(73,value25[1],important);
					this.setTypedProperty(74,value25[0],important);
					this.setTypedProperty(75,value25[1],important);
					break;
				case 3:
					this.setTypedProperty(72,value25[0],important);
					this.setTypedProperty(73,value25[1],important);
					this.setTypedProperty(74,value25[3],important);
					this.setTypedProperty(75,value25[1],important);
					break;
				case 4:
					this.setTypedProperty(72,value25[0],important);
					this.setTypedProperty(73,value25[1],important);
					this.setTypedProperty(74,value25[2],important);
					this.setTypedProperty(75,value25[3],important);
					break;
				default:
				}
				break;
			case 16:case 17:
				this.setTypedProperty(72,styleValue,important);
				this.setTypedProperty(73,styleValue,important);
				this.setTypedProperty(74,styleValue,important);
				this.setTypedProperty(75,styleValue,important);
				break;
			default:
			}
			break;
		case 77:case 79:case 80:case 78:case 81:
			switch(styleValue[1]) {
			case 13:
				var value26 = styleValue[2];
				var borderColor = null;
				var borderWidth = null;
				var borderStyle = null;
				var _g13 = 0;
				var _g8 = value26.length;
				while(_g13 < _g8) {
					var i3 = _g13++;
					if(this.isValidBorderColorValue(value26[i3]) == true) borderColor = value26[i3]; else if(this.isValidBorderWidthValue(value26[i3]) == true) borderWidth = value26[i3]; else if(this.isValidBorderStyleValue(value26[i3]) == true) borderStyle = value26[i3];
				}
				this.setTypedBordersProperties(propertyIndex,borderWidth,borderColor,borderStyle,important);
				break;
			default:
				this.setBorderShorthand(propertyIndex,styleValue,important);
			}
			break;
		case 85:
			switch(styleValue[1]) {
			case 13:
				var value27 = styleValue[2];
				var outlineColor = null;
				var outlineWidth = null;
				var outlineStyle = null;
				var _g14 = 0;
				var _g9 = value27.length;
				while(_g14 < _g9) {
					var i4 = _g14++;
					if(this.isValidOutlineColorValue(value27[i4]) == true) outlineColor = value27[i4]; else if(this.isValidBorderWidthValue(value27[i4]) == true) outlineWidth = value27[i4]; else if(this.isValidOutlineStyleValue(value27[i4]) == true) outlineStyle = value27[i4];
				}
				this.setTypedOutlineProperties(outlineWidth,outlineColor,outlineStyle,important);
				break;
			default:
				if(this.isValidOutlineColorValue(styleValue) == true) this.setTypedOutlineProperties(null,styleValue,null,important); else if(this.isValidOutlineStyleValue(styleValue) == true) this.setTypedOutlineProperties(null,null,styleValue,important); else if(this.isValidBorderWidthValue(styleValue) == true) this.setTypedOutlineProperties(styleValue,null,null,important);
			}
			break;
		default:
		}
	}
	,setBorderShorthand: function(propertyIndex,styleValue,important) {
		switch(styleValue[1]) {
		case 4:
			var value = styleValue[2];
			if(this.isValidBorderWidthValue(styleValue) == true) this.setTypedBordersProperties(propertyIndex,styleValue,null,null,important); else if(this.isValidBorderStyleValue(styleValue) == true) this.setTypedBordersProperties(propertyIndex,null,null,styleValue,important);
			break;
		case 0:
			var value1 = styleValue[2];
			this.setTypedBordersProperties(propertyIndex,styleValue,null,null,important);
			break;
		case 7:
			var value2 = styleValue[2];
			this.setTypedBordersProperties(propertyIndex,styleValue,null,null,important);
			break;
		case 12:
			var value3 = styleValue[2];
			this.setTypedBordersProperties(propertyIndex,null,styleValue,null,important);
			break;
		case 16:case 17:
			this.setTypedBordersProperties(propertyIndex,styleValue,styleValue,styleValue,important);
			break;
		default:
		}
	}
	,setTypedBordersProperties: function(propertyIndex,borderWidth,borderColor,borderStyle,important) {
		switch(propertyIndex) {
		case 77:
			this.setTypedBorderProperties(62,borderWidth,67,borderColor,72,borderStyle,important);
			break;
		case 78:
			this.setTypedBorderProperties(63,borderWidth,68,borderColor,73,borderStyle,important);
			break;
		case 79:
			this.setTypedBorderProperties(64,borderWidth,69,borderColor,74,borderStyle,important);
			break;
		case 80:
			this.setTypedBorderProperties(65,borderWidth,70,borderColor,75,borderStyle,important);
			break;
		case 81:
			this.setTypedBorderProperties(62,borderWidth,67,borderColor,72,borderStyle,important);
			this.setTypedBorderProperties(63,borderWidth,68,borderColor,73,borderStyle,important);
			this.setTypedBorderProperties(64,borderWidth,69,borderColor,74,borderStyle,important);
			this.setTypedBorderProperties(65,borderWidth,70,borderColor,75,borderStyle,important);
			break;
		default:
		}
	}
	,setTypedBorderProperties: function(borderWidthPropertyIndex,borderWidth,borderColorPropertyIndex,borderColor,borderStylePropertyIndex,borderStyle,important) {
		if(borderWidth == null) borderWidth = cocktail_core_css_InitialStyleDeclaration.getInstance().getTypedProperty(62).typedValue;
		this.setTypedProperty(borderWidthPropertyIndex,borderWidth,important);
		if(borderColor == null) borderColor = cocktail_core_css_InitialStyleDeclaration.getInstance().getTypedProperty(67).typedValue;
		this.setTypedProperty(borderColorPropertyIndex,borderColor,important);
		if(borderStyle == null) borderStyle = cocktail_core_css_InitialStyleDeclaration.getInstance().getTypedProperty(72).typedValue;
		this.setTypedProperty(borderStylePropertyIndex,borderStyle,important);
	}
	,setTypedOutlineProperties: function(outlineWidth,outlineColor,outlineStyle,important) {
		if(outlineWidth == null) outlineWidth = cocktail_core_css_InitialStyleDeclaration.getInstance().getTypedProperty(82).typedValue;
		this.setTypedProperty(82,outlineWidth,important);
		if(outlineColor == null) outlineColor = cocktail_core_css_InitialStyleDeclaration.getInstance().getTypedProperty(84).typedValue;
		this.setTypedProperty(84,outlineColor,important);
		if(outlineStyle == null) outlineStyle = cocktail_core_css_InitialStyleDeclaration.getInstance().getTypedProperty(83).typedValue;
		this.setTypedProperty(83,outlineStyle,important);
	}
	,setTransitionGroupShorthand: function(styleValues,transitionProperty,transitionDuration,transitionDelay,transitionTimingFunction) {
		var hasTransitionDuration = false;
		var _g1 = 0;
		var _g = styleValues.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.setTransitionShorthand(styleValues[i],hasTransitionDuration,transitionProperty,transitionDuration,transitionDelay,transitionTimingFunction);
			if(this.isValidTransitionDelayOrDuration(styleValues[i]) == true) hasTransitionDuration = true;
		}
	}
	,setTransitionShorthand: function(styleValue,useDelayForTime,transitionProperty,transitionDuration,transitionDelay,transitionTimingFunction) {
		switch(styleValue[1]) {
		case 3:
			var value = styleValue[2];
			transitionProperty.push(styleValue);
			break;
		case 9:
			var value1 = styleValue[2];
			if(useDelayForTime == false) transitionDuration.push(styleValue); else transitionDelay.push(styleValue);
			break;
		case 4:
			var value2 = styleValue[2];
			if(this.isValidTransitionProperty(styleValue) == true) transitionProperty.push(styleValue); else if(this.isValidTransitionTimingFunction(styleValue) == true) transitionTimingFunction.push(styleValue);
			break;
		default:
			transitionTimingFunction.push(styleValue);
		}
	}
	,isValidShorthand: function(propertyIndex,styleValue) {
		switch(propertyIndex) {
		case 5:
			switch(styleValue[1]) {
			case 7:
				var value = styleValue[2];
				return this.isValidMarginProperty(styleValue);
			case 2:
				var value1 = styleValue[2];
				return this.isValidMarginProperty(styleValue);
			case 0:
				var value2 = styleValue[2];
				return this.isValidMarginProperty(styleValue);
			case 4:
				var value3 = styleValue[2];
				return this.isValidMarginProperty(styleValue);
			case 16:case 17:
				return true;
			case 13:
				var value4 = styleValue[2];
				var _g = value4.length;
				switch(_g) {
				case 2:
					var isValid = this.isValidMarginProperty(value4[0]);
					if(isValid == false) return false;
					return this.isValidMarginProperty(value4[1]);
				case 3:
					var isValid1 = this.isValidMarginProperty(value4[0]);
					if(isValid1 == false) return false;
					isValid1 = this.isValidMarginProperty(value4[1]);
					if(isValid1 == false) return false;
					return this.isValidMarginProperty(value4[2]);
				case 4:
					var isValid2 = this.isValidMarginProperty(value4[0]);
					if(isValid2 == false) return false;
					isValid2 = this.isValidMarginProperty(value4[1]);
					if(isValid2 == false) return false;
					isValid2 = this.isValidMarginProperty(value4[2]);
					if(isValid2 == false) return false;
					return this.isValidMarginProperty(value4[3]);
				}
				break;
			default:
			}
			break;
		case 10:
			switch(styleValue[1]) {
			case 7:
				var value5 = styleValue[2];
				return this.isValidPaddingProperty(styleValue);
			case 2:
				var value6 = styleValue[2];
				return this.isValidPaddingProperty(styleValue);
			case 0:
				var value7 = styleValue[2];
				return this.isValidPaddingProperty(styleValue);
			case 16:case 17:
				return true;
			case 13:
				var value8 = styleValue[2];
				var _g1 = value8.length;
				switch(_g1) {
				case 2:
					var isValid3 = this.isValidPaddingProperty(value8[0]);
					if(isValid3 == false) return false;
					return this.isValidPaddingProperty(value8[1]);
				case 3:
					var isValid4 = this.isValidPaddingProperty(value8[0]);
					if(isValid4 == false) return false;
					isValid4 = this.isValidPaddingProperty(value8[1]);
					if(isValid4 == false) return false;
					return this.isValidPaddingProperty(value8[2]);
				case 4:
					var isValid5 = this.isValidPaddingProperty(value8[0]);
					if(isValid5 == false) return false;
					isValid5 = this.isValidPaddingProperty(value8[1]);
					if(isValid5 == false) return false;
					isValid5 = this.isValidPaddingProperty(value8[2]);
					if(isValid5 == false) return false;
					return this.isValidPaddingProperty(value8[3]);
				}
				break;
			default:
			}
			break;
		case 33:
			return this.isValidBackgroundShorthand(styleValue);
		case 50:
			switch(styleValue[1]) {
			case 4:
				var value9 = styleValue[2];
				return this.isValidOverflowValue(styleValue);
			case 16:case 17:
				return true;
			case 13:
				var value10 = styleValue[2];
				var isValid6 = this.isValidOverflowValue(value10[0]);
				if(isValid6 == false) return false;
				return this.isValidOverflowValue(value10[1]);
			default:
			}
			break;
		case 39:
			return this.isValidFontShorthand(styleValue);
		case 59:
			switch(styleValue[1]) {
			case 15:
				var value11 = styleValue[2];
				var length = value11.length;
				var _g2 = 0;
				while(_g2 < length) {
					var i = _g2++;
					if(this.isValidTransitionShorthand(value11[i]) == false) return false;
				}
				return true;
			default:
				return this.isValidTransitionShorthand(styleValue);
			}
			break;
		case 66:
			switch(styleValue[1]) {
			case 4:
				var value12 = styleValue[2];
				return this.isValidBorderWidthValue(styleValue);
			case 7:
				var value13 = styleValue[2];
				return this.isValidBorderWidthValue(styleValue);
			case 0:
				var value14 = styleValue[2];
				return this.isValidBorderWidthValue(styleValue);
			case 13:
				var value15 = styleValue[2];
				var _g3 = value15.length;
				switch(_g3) {
				case 2:
					if(this.isValidBorderWidthValue(value15[0]) == true && this.isValidBorderWidthValue(value15[1]) == true) return true;
					break;
				case 3:
					if(this.isValidBorderWidthValue(value15[0]) == true && this.isValidBorderWidthValue(value15[1]) == true && this.isValidBorderWidthValue(value15[2])) return true;
					break;
				case 4:
					if(this.isValidBorderWidthValue(value15[0]) == true && this.isValidBorderWidthValue(value15[1]) == true && this.isValidBorderWidthValue(value15[2]) && this.isValidBorderWidthValue(value15[3])) return true;
					break;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 71:
			switch(styleValue[1]) {
			case 12:
				var value16 = styleValue[2];
				return this.isValidBorderColorValue(styleValue);
			case 13:
				var value17 = styleValue[2];
				var _g4 = value17.length;
				switch(_g4) {
				case 2:
					if(this.isValidBorderColorValue(value17[0]) == true && this.isValidBorderColorValue(value17[1]) == true) return true;
					break;
				case 3:
					if(this.isValidBorderColorValue(value17[0]) == true && this.isValidBorderColorValue(value17[1]) == true && this.isValidBorderColorValue(value17[2])) return true;
					break;
				case 4:
					if(this.isValidBorderColorValue(value17[0]) == true && this.isValidBorderColorValue(value17[1]) == true && this.isValidBorderColorValue(value17[2]) && this.isValidBorderColorValue(value17[3])) return true;
					break;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 76:
			switch(styleValue[1]) {
			case 4:
				var value18 = styleValue[2];
				return this.isValidBorderStyleValue(styleValue);
			case 13:
				var value19 = styleValue[2];
				var _g5 = value19.length;
				switch(_g5) {
				case 2:
					if(this.isValidBorderStyleValue(value19[0]) == true && this.isValidBorderStyleValue(value19[1]) == true) return true;
					break;
				case 3:
					if(this.isValidBorderStyleValue(value19[0]) == true && this.isValidBorderStyleValue(value19[1]) == true && this.isValidBorderStyleValue(value19[2])) return true;
					break;
				case 4:
					if(this.isValidBorderStyleValue(value19[0]) == true && this.isValidBorderStyleValue(value19[1]) == true && this.isValidBorderStyleValue(value19[2]) && this.isValidBorderStyleValue(value19[3])) return true;
					break;
				default:
				}
				break;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 77:case 78:case 79:case 80:case 81:
			switch(styleValue[1]) {
			case 4:
				var value20 = styleValue[2];
				if(this.isValidBorderWidthValue(styleValue) == true || this.isValidBorderStyleValue(styleValue) == true) return true;
				break;
			case 12:
				var value21 = styleValue[2];
				return true;
			case 0:
				var value22 = styleValue[2];
				if(value22 == 0) return true;
				break;
			case 7:
				var value23 = styleValue[2];
				if(this.isPositiveLength(value23) == true) return true;
				break;
			case 13:
				var value24 = styleValue[2];
				if(value24.length != 2 && value24.length != 3) return false;
				var foundBorderWidth = false;
				var foundBorderStyle = false;
				var foundBorderColor = false;
				var _g11 = 0;
				var _g6 = value24.length;
				while(_g11 < _g6) {
					var i1 = _g11++;
					if(this.isValidBorderWidthValue(value24[i1]) == true) {
						if(foundBorderWidth == true) return false;
						foundBorderWidth = true;
					} else if(this.isValidBorderColorValue(value24[i1]) == true) {
						if(foundBorderColor == true) return false;
						foundBorderColor = true;
					} else if(this.isValidBorderStyleValue(value24[i1]) == true) {
						if(foundBorderStyle == true) return false;
						foundBorderStyle = true;
					} else return false;
				}
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		case 85:
			switch(styleValue[1]) {
			case 4:
				var value25 = styleValue[2];
				if(this.isValidBorderWidthValue(styleValue) == true || this.isValidOutlineStyleValue(styleValue) == true || this.isValidOutlineColorValue(styleValue) == true) return true;
				break;
			case 12:
				var value26 = styleValue[2];
				return true;
			case 0:
				var value27 = styleValue[2];
				if(value27 == 0) return true;
				break;
			case 7:
				var value28 = styleValue[2];
				if(this.isPositiveLength(value28) == true) return true;
				break;
			case 13:
				var value29 = styleValue[2];
				if(value29.length != 2 && value29.length != 3) return false;
				var foundOutlineWidth = false;
				var foundOutlineStyle = false;
				var foundOutlineColor = false;
				var _g12 = 0;
				var _g7 = value29.length;
				while(_g12 < _g7) {
					var i2 = _g12++;
					if(this.isValidBorderWidthValue(value29[i2]) == true) {
						if(foundOutlineWidth == true) return false;
						foundOutlineWidth = true;
					} else if(this.isValidOutlineColorValue(value29[i2]) == true) {
						if(foundOutlineColor == true) return false;
						foundOutlineColor = true;
					} else if(this.isValidOutlineStyleValue(value29[i2]) == true) {
						if(foundOutlineStyle == true) return false;
						foundOutlineStyle = true;
					} else return false;
				}
				return true;
			case 16:case 17:
				return true;
			default:
			}
			break;
		default:
		}
		return false;
	}
	,isValidBackgroundShorthand: function(styleValue) {
		switch(styleValue[1]) {
		case 5:
			var value = styleValue[2];
			return true;
		case 12:
			var value1 = styleValue[2];
			return true;
		case 4:
			var value2 = styleValue[2];
			switch(value2[1]) {
			case 67:case 68:case 69:case 72:case 35:case 38:case 11:case 13:case 12:case 22:case 25:case 18:
				return true;
			default:
			}
			break;
		case 13:
			var value3 = styleValue[2];
			var length = value3.length;
			var foundBackgroundColor = false;
			var foundBackgroundImage = false;
			var foundBackgroundRepeat = false;
			var foundBackgroundAttachment = false;
			var foundFirstBackgroundPosition = false;
			var foundSecondBackgroundPosition = false;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				{
					var _g1 = value3[i];
					switch(_g1[1]) {
					case 12:
						var value4 = _g1[2];
						if(foundBackgroundColor == true) return false;
						foundBackgroundColor = true;
						break;
					case 5:
						var value5 = _g1[2];
						if(foundBackgroundImage == true) return false;
						foundBackgroundImage = true;
						foundBackgroundColor = true;
						break;
					default:
						if(this.isValidBackgroundRepeat(value3[i]) == true) {
							if(foundBackgroundRepeat == true) return false;
							foundBackgroundRepeat = true;
							foundBackgroundImage = true;
							foundBackgroundColor = true;
						} else if(this.isValidBackgroundAttachment(value3[i]) == true) {
							if(foundBackgroundAttachment == true) return false;
							foundBackgroundAttachment = true;
							foundBackgroundColor = true;
							foundBackgroundRepeat = true;
							foundBackgroundImage = true;
						} else if(this.isValidBackgroundPosition(value3[i]) == true) {
							if(foundSecondBackgroundPosition == true) return false;
							if(foundFirstBackgroundPosition == true) foundSecondBackgroundPosition = true; else foundFirstBackgroundPosition = true;
							foundBackgroundAttachment = true;
							foundBackgroundColor = true;
							foundBackgroundRepeat = true;
							foundBackgroundImage = true;
						}
					}
				}
			}
			return true;
		case 16:case 17:
			return true;
		default:
		}
		return false;
	}
	,isValidBackgroundRepeat: function(styleValue) {
		switch(styleValue[1]) {
		case 4:
			var value = styleValue[2];
			switch(value[1]) {
			case 67:case 68:case 69:case 72:
				return true;
			default:
			}
			break;
		default:
		}
		return false;
	}
	,isValidBackgroundAttachment: function(styleValue) {
		switch(styleValue[1]) {
		case 4:
			var value = styleValue[2];
			switch(value[1]) {
			case 35:case 38:
				return true;
			default:
			}
			break;
		default:
		}
		return false;
	}
	,isValidTransitionShorthand: function(styleValue) {
		switch(styleValue[1]) {
		case 9:
			var value = styleValue[2];
			return this.isValidTransitionDelayOrDuration(styleValue);
		case 3:
			var value1 = styleValue[2];
			return true;
		case 4:
			var keyword = styleValue[2];
			var isValid = this.isValidTransitionProperty(styleValue);
			if(isValid == true) return true;
			return this.isValidTransitionTimingFunction(styleValue);
		case 13:
			var value2 = styleValue[2];
			return this.isValidTransitionGroup(value2);
		case 16:case 17:
			return true;
		default:
			return this.isValidTransitionTimingFunction(styleValue);
		}
	}
	,setFontShorthandGoup: function(styleValues,important) {
		var foundFontStyle = false;
		var foundFontVariant = false;
		var foundFontWeight = false;
		var length = styleValues.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			{
				var _g1 = styleValues[i];
				switch(_g1[1]) {
				case 4:
					var value = _g1[2];
					switch(value[1]) {
					case 4:case 5:
						this.setTypedProperty(36,styleValues[i],important);
						foundFontStyle = true;
						break;
					case 6:
						this.setTypedProperty(38,styleValues[i],important);
						foundFontVariant = true;
						break;
					case 1:case 2:case 3:
						this.setTypedProperty(35,styleValues[i],important);
						foundFontWeight = true;
						break;
					case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 65:case 66:
						this.setTypedProperty(34,styleValues[i],important);
						break;
					case 0:
						if(foundFontStyle == true) {
							if(foundFontVariant == true) this.setTypedProperty(35,styleValues[i],important); else this.setTypedProperty(38,styleValues[i],important);
						} else this.setTypedProperty(36,styleValues[i],important);
						break;
					default:
					}
					break;
				case 0:
					var value1 = _g1[2];
					switch(value1) {
					case 100:case 200:case 300:case 400:case 500:case 600:case 700:case 800:case 900:
						this.setTypedProperty(35,styleValues[i],important);
						foundFontWeight = true;
						break;
					default:
					}
					break;
				case 7:
					var value2 = _g1[2];
					this.setTypedProperty(34,styleValues[i],important);
					break;
				case 2:
					var value3 = _g1[2];
					this.setTypedProperty(34,styleValues[i],important);
					break;
				case 14:
					var lineHeight = _g1[3];
					var fontSize = _g1[2];
					this.setTypedProperty(34,fontSize,important);
					this.setTypedProperty(41,lineHeight,important);
					break;
				default:
				}
			}
		}
	}
	,isValidFontShorthand: function(styleValue) {
		switch(styleValue[1]) {
		case 13:
			var values = styleValue[2];
			return this.isValidFontGroup(values);
		case 15:
			var values1 = styleValue[2];
			{
				var _g = values1[0];
				switch(_g[1]) {
				case 13:
					var groupValues = _g[2];
					var isValidFontGroup = this.isValidFontGroup(groupValues);
					if(isValidFontGroup == true) {
						var length = values1.length;
						var i = 1;
						while(i < length) {
							{
								var _g1 = values1[i];
								switch(_g1[1]) {
								case 6:
									var value = _g1[2];
									break;
								case 3:
									var value1 = _g1[2];
									break;
								default:
									return false;
								}
							}
							i++;
						}
					} else return false;
					break;
				default:
					return false;
				}
			}
			break;
		case 16:case 17:
			return true;
		default:
			return false;
		}
		return false;
	}
	,isValidFontGroup: function(styleValues) {
		var foundFontStyle = false;
		var foundFontVariant = false;
		var foundFontWeight = false;
		var foundFontSize = false;
		var foundFontNotation = false;
		var foundFontFamily = false;
		var length = styleValues.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			{
				var _g1 = styleValues[i];
				switch(_g1[1]) {
				case 4:
					var value = _g1[2];
					switch(value[1]) {
					case 4:case 5:
						if(foundFontStyle == true) return false;
						foundFontStyle = true;
						break;
					case 6:
						if(foundFontVariant == true) return false;
						foundFontVariant = true;
						break;
					case 1:case 2:case 3:
						if(foundFontWeight == true) return false;
						foundFontWeight = true;
						break;
					case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 65:case 66:
						if(foundFontSize == true) return false;
						foundFontSize = true;
						foundFontStyle = true;
						foundFontVariant = true;
						break;
					case 0:
						if(foundFontStyle == true) {
							if(foundFontVariant == true) {
								if(foundFontWeight == true) return false; else foundFontWeight = true;
							} else foundFontVariant = true;
						} else foundFontStyle = true;
						break;
					default:
						return false;
					}
					break;
				case 0:
					var value1 = _g1[2];
					switch(value1) {
					case 100:case 200:case 300:case 400:case 500:case 600:case 700:case 800:case 900:
						if(foundFontWeight == true) return false;
						foundFontWeight = true;
						break;
					default:
						return false;
					}
					break;
				case 6:
					var value2 = _g1[2];
					if(foundFontSize == false) return false;
					foundFontFamily = true;
					foundFontNotation = true;
					foundFontSize = true;
					foundFontStyle = true;
					foundFontVariant = true;
					foundFontWeight = true;
					break;
				case 3:
					var value3 = _g1[2];
					if(foundFontSize == false) return false;
					foundFontFamily = true;
					foundFontNotation = true;
					foundFontSize = true;
					foundFontStyle = true;
					foundFontVariant = true;
					foundFontWeight = true;
					break;
				case 7:
					var value4 = _g1[2];
					if(foundFontSize == true) return false;
					foundFontNotation = true;
					foundFontSize = true;
					foundFontStyle = true;
					foundFontVariant = true;
					foundFontWeight = true;
					break;
				case 2:
					var value5 = _g1[2];
					if(foundFontSize == true) return false;
					foundFontNotation = true;
					foundFontSize = true;
					foundFontStyle = true;
					foundFontVariant = true;
					foundFontWeight = true;
					break;
				case 14:
					var lineHeight = _g1[3];
					var fontSize = _g1[2];
					if(foundFontNotation == true) return false;
					foundFontNotation = true;
					foundFontSize = true;
					foundFontStyle = true;
					foundFontVariant = true;
					foundFontWeight = true;
					break;
				default:
					return false;
				}
			}
		}
		if(foundFontFamily == false || foundFontSize == false) return false;
		return true;
	}
	,isValidTransitionGroup: function(styleValues) {
		var hasTransitionProperty = false;
		var hasTransitionTimingFunction = false;
		var hasTransitionDelay = false;
		var hasTransitionDuration = false;
		if(styleValues.length == 2 || styleValues.length == 3 || styleValues.length == 4) {
			if(this.isValidTransitionProperty(styleValues[0])) hasTransitionProperty = true; else if(this.isValidTransitionDelayOrDuration(styleValues[0])) hasTransitionDuration = true; else if(this.isValidTransitionTimingFunction(styleValues[0])) hasTransitionTimingFunction = true; else return false;
			if(this.isValidTransitionProperty(styleValues[1])) {
				if(hasTransitionProperty == true) return false;
			} else if(this.isValidTransitionDelayOrDuration(styleValues[1])) {
				if(hasTransitionDuration == true) hasTransitionDelay = true; else hasTransitionDuration = true;
			} else if(this.isValidTransitionTimingFunction(styleValues[1])) {
				if(hasTransitionTimingFunction == true) return false;
			} else return false;
			if(styleValues.length == 2) return true;
			if(this.isValidTransitionProperty(styleValues[2])) {
				if(hasTransitionProperty == true) return false;
			} else if(this.isValidTransitionDelayOrDuration(styleValues[2])) {
				if(hasTransitionDuration == true) {
					if(hasTransitionDelay == true) return false; else hasTransitionDelay = true;
				} else hasTransitionDuration = true;
			} else if(this.isValidTransitionTimingFunction(styleValues[2])) {
				if(hasTransitionTimingFunction == true) return false;
			} else return false;
			if(styleValues.length == 3) return true;
			if(this.isValidTransitionProperty(styleValues[3])) {
				if(hasTransitionProperty == true) return false;
			} else if(this.isValidTransitionDelayOrDuration(styleValues[3])) {
				if(hasTransitionDuration == true) {
					if(hasTransitionDelay == true) return false; else hasTransitionDelay = true;
				} else hasTransitionDuration = true;
			} else if(this.isValidTransitionTimingFunction(styleValues[3])) {
				if(hasTransitionTimingFunction == true) return false;
			} else return false;
			return true;
		}
		return false;
	}
	,isValidBorderWidthValue: function(styleValue) {
		switch(styleValue[1]) {
		case 4:
			var value = styleValue[2];
			switch(value[1]) {
			case 73:case 61:case 74:
				return true;
			default:
			}
			break;
		case 7:
			var value1 = styleValue[2];
			if(this.isPositiveLength(value1) == true) return true;
			break;
		case 0:
			var value2 = styleValue[2];
			if(value2 == 0) return true;
			break;
		default:
		}
		return false;
	}
	,isValidBorderColorValue: function(styleValue) {
		switch(styleValue[1]) {
		case 12:
			var value = styleValue[2];
			return true;
		default:
		}
		return false;
	}
	,isValidBorderStyleValue: function(styleValue) {
		switch(styleValue[1]) {
		case 4:
			var value = styleValue[2];
			switch(value[1]) {
			case 18:case 37:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:
				return true;
			default:
			}
			break;
		default:
		}
		return false;
	}
	,isValidOutlineColorValue: function(styleValue) {
		switch(styleValue[1]) {
		case 4:
			var value = styleValue[2];
			switch(value[1]) {
			case 83:
				return true;
			default:
				return this.isValidBorderColorValue(styleValue);
			}
			break;
		default:
			return this.isValidBorderColorValue(styleValue);
		}
	}
	,isValidOutlineStyleValue: function(styleValue) {
		switch(styleValue[1]) {
		case 4:
			var value = styleValue[2];
			switch(value[1]) {
			case 37:
				return false;
			default:
				return this.isValidBorderStyleValue(styleValue);
			}
			break;
		default:
			return this.isValidBorderStyleValue(styleValue);
		}
	}
	,isValidOverflowValue: function(styleValue) {
		switch(styleValue[1]) {
		case 4:
			var value = styleValue[2];
			switch(value[1]) {
			case 36:case 38:case 37:case 27:
				return true;
			default:
			}
			break;
		default:
		}
		return false;
	}
	,isValidMarginProperty: function(styleValue) {
		switch(styleValue[1]) {
		case 7:
			var value = styleValue[2];
			return true;
		case 0:
			var value1 = styleValue[2];
			if(value1 == 0) return true;
			break;
		case 2:
			var value2 = styleValue[2];
			return true;
		case 4:
			var value3 = styleValue[2];
			switch(value3[1]) {
			case 27:
				return true;
			default:
			}
			break;
		case 16:
			return true;
		default:
		}
		return false;
	}
	,isValidPaddingProperty: function(styleValue) {
		switch(styleValue[1]) {
		case 7:
			var value = styleValue[2];
			if(this.isPositiveLength(value) == true) return true;
			break;
		case 0:
			var value1 = styleValue[2];
			if(value1 == 0) return true;
			break;
		case 2:
			var value2 = styleValue[2];
			if(value2 >= 0) return true;
			break;
		case 16:
			return true;
		default:
		}
		return false;
	}
	,isValidTransformOrigin: function(styleValue,areHorizontalKeywordValueAllowed,areVerticalKeywordAllowed) {
		switch(styleValue[1]) {
		case 7:
			var value = styleValue[2];
			return true;
		case 0:
			var value1 = styleValue[2];
			if(value1 == 0) return true;
			break;
		case 2:
			var value2 = styleValue[2];
			return true;
		case 4:
			var value3 = styleValue[2];
			switch(value3[1]) {
			case 13:
				return true;
			case 11:case 12:
				if(areHorizontalKeywordValueAllowed == true) return true;
				break;
			case 22:case 25:
				if(areVerticalKeywordAllowed == true) return true;
				break;
			default:
			}
			break;
		default:
		}
		return false;
	}
	,isPositiveLength: function(length) {
		switch(length[1]) {
		case 0:
			var value = length[2];
			return value >= 0;
		case 6:
			var value1 = length[2];
			return value1 >= 0;
		case 5:
			var value2 = length[2];
			return value2 >= 0;
		case 4:
			var value3 = length[2];
			return value3 >= 0;
		case 8:
			var value4 = length[2];
			return value4 >= 0;
		case 3:
			var value5 = length[2];
			return value5 >= 0;
		case 2:
			var value6 = length[2];
			return value6 >= 0;
		case 1:
			var value7 = length[2];
			return value7 >= 0;
		case 9:
			var value8 = length[2];
			return value8 >= 0;
		case 7:
			var value9 = length[2];
			return value9 >= 0;
		case 11:
			var value10 = length[2];
			return value10 >= 0;
		case 10:
			var value11 = length[2];
			return value11 >= 0;
		case 12:
			var value12 = length[2];
			return value12 >= 0;
		case 13:
			var value13 = length[2];
			return value13 >= 0;
		}
	}
	,serializeStyleDeclaration: function() {
		var serializedStyleDeclaration = "";
		var _g1 = 0;
		var _g = this.length;
		while(_g1 < _g) {
			var i = _g1++;
			var property = this._indexedProperties[this._propertiesPositions[i]];
			serializedStyleDeclaration += cocktail_core_css_CSSConstants.getPropertyNameFromIndex(property.index) + ":" + cocktail_core_css_parsers_CSSStyleSerializer.serialize(property.typedValue);
			if(property.important == true) serializedStyleDeclaration += " !important";
			serializedStyleDeclaration += ";";
		}
		return serializedStyleDeclaration;
	}
	,get_cssText: function() {
		return this.serializeStyleDeclaration();
	}
	,set_cssText: function(value) {
		this.resetIndexedProperties();
		this.resetPropertiesPositions();
		this.length = 0;
		var baseUrl = null;
		if(this.parentRule != null) {
			if(this.parentRule.parentStyleSheet != null) baseUrl = this.parentRule.parentStyleSheet.href;
		}
		var typedProperties = cocktail_core_css_parsers_CSSStyleParser.parseStyle(value,baseUrl);
		var length = typedProperties.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var typedProperty = typedProperties[i];
			this.applyProperty(typedProperty.index,typedProperty.typedValue,typedProperty.important);
		}
		return value;
	}
	,get_fontFamily: function() {
		return this.getPropertyValue(37);
	}
	,get_overflowX: function() {
		return this.getPropertyValue(51);
	}
	,set_overflowX: function(value) {
		this.setProperty(51,value);
		return value;
	}
	,get_overflowY: function() {
		return this.getPropertyValue(52);
	}
	,set_overflowY: function(value) {
		this.setProperty(52,value);
		return value;
	}
	,__class__: cocktail_core_css_CSSStyleDeclaration
	,__properties__: {set_cssText:"set_cssText",get_cssText:"get_cssText",set_overflowY:"set_overflowY",get_overflowY:"get_overflowY",set_overflowX:"set_overflowX",get_overflowX:"get_overflowX",get_fontFamily:"get_fontFamily"}
};
var cocktail_core_css_CSSStyleRule = function(parentStyleSheet,parentRule) {
	cocktail_core_css_CSSRule.call(this,parentStyleSheet,parentRule);
	this.style = new cocktail_core_css_CSSStyleDeclaration(this);
	this._selectorParser = new cocktail_core_css_parsers_CSSSelectorParser();
	this.selectors = [];
	this.type = 1;
};
$hxClasses["cocktail.core.css.CSSStyleRule"] = cocktail_core_css_CSSStyleRule;
cocktail_core_css_CSSStyleRule.__name__ = true;
cocktail_core_css_CSSStyleRule.__super__ = cocktail_core_css_CSSRule;
cocktail_core_css_CSSStyleRule.prototype = $extend(cocktail_core_css_CSSRule.prototype,{
	parse: function(css) {
		this.selectors = [];
		var state = cocktail_core_css_parsers_StyleRuleParserState.IGNORE_SPACES;
		var next = cocktail_core_css_parsers_StyleRuleParserState.BEGIN_SELECTOR;
		var start = 0;
		var position = 0;
		var c = css.charCodeAt(position);
		while(!(c != c)) {
			switch(state[1]) {
			case 0:
				switch(c) {
				case 10:case 13:case 9:case 32:
					break;
				default:
					state = next;
					continue;
				}
				break;
			case 1:
				state = cocktail_core_css_parsers_StyleRuleParserState.SELECTOR;
				next = cocktail_core_css_parsers_StyleRuleParserState.END_SELECTOR;
				start = position;
				continue;
				break;
			case 3:
				if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 42)) switch(c) {
				case 123:
					state = cocktail_core_css_parsers_StyleRuleParserState.END_SELECTOR;
					next = cocktail_core_css_parsers_StyleRuleParserState.BEGIN_STYLES;
					continue;
					break;
				case 44:
					state = cocktail_core_css_parsers_StyleRuleParserState.END_SELECTOR;
					next = cocktail_core_css_parsers_StyleRuleParserState.BEGIN_SELECTOR;
					continue;
					break;
				}
				break;
			case 2:
				var selector = HxOverrides.substr(css,start,position - start);
				var isValid = this._selectorParser.parseSelector(selector,this.selectors);
				if(isValid == false) {
					this.selectors = [];
					return;
				}
				state = next;
				break;
			case 4:
				state = cocktail_core_css_parsers_StyleRuleParserState.STYLES;
				next = cocktail_core_css_parsers_StyleRuleParserState.END_STYLES;
				start = position;
				continue;
				break;
			case 5:
				if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 40 || c == 41)) switch(c) {
				case 125:
					state = next;
					continue;
					break;
				}
				break;
			case 6:
				var styleDeclaration = HxOverrides.substr(css,start,position - start);
				this.style.set_cssText(styleDeclaration);
				state = cocktail_core_css_parsers_StyleRuleParserState.IGNORE_SPACES;
				next = cocktail_core_css_parsers_StyleRuleParserState.IGNORE_SPACES;
				break;
			}
			c = StringTools.fastCodeAt(css,++position);
		}
	}
	,set_cssText: function(value) {
		this.parse(value);
		return value;
	}
	,__class__: cocktail_core_css_CSSStyleRule
});
var cocktail_core_css_StyleSheet = function(stylesheet,ownerNode,href,parentStyleSheet) {
	this.ownerNode = ownerNode;
	this.href = href;
	this.parentStyleSheet = parentStyleSheet;
};
$hxClasses["cocktail.core.css.StyleSheet"] = cocktail_core_css_StyleSheet;
cocktail_core_css_StyleSheet.__name__ = true;
cocktail_core_css_StyleSheet.prototype = {
	dispose: function() {
	}
	,__class__: cocktail_core_css_StyleSheet
};
var cocktail_core_css_CSSStyleSheet = function(stylesheet,origin,ownerNode,href,parentStyleSheet,ownerRule) {
	cocktail_core_css_StyleSheet.call(this,stylesheet,ownerNode,href,parentStyleSheet);
	this.cssRules = [];
	this.ownerRule = ownerRule;
	this.origin = origin;
	this._cssRulesParser = new cocktail_core_css_parsers_CSSRulesParser();
	var rules = this._cssRulesParser.parseRules(stylesheet);
	var _g1 = 0;
	var _g = rules.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.insertRule(rules[i],this.cssRules.length);
	}
};
$hxClasses["cocktail.core.css.CSSStyleSheet"] = cocktail_core_css_CSSStyleSheet;
cocktail_core_css_CSSStyleSheet.__name__ = true;
cocktail_core_css_CSSStyleSheet.__super__ = cocktail_core_css_StyleSheet;
cocktail_core_css_CSSStyleSheet.prototype = $extend(cocktail_core_css_StyleSheet.prototype,{
	insertRule: function(rule,index) {
		var cssRule = this._cssRulesParser.parseRule(rule,this);
		this.cssRules.splice(index,0,cssRule);
		return index;
	}
	,__class__: cocktail_core_css_CSSStyleSheet
});
var cocktail_core_css_CSSValueConverter = function() { };
$hxClasses["cocktail.core.css.CSSValueConverter"] = cocktail_core_css_CSSValueConverter;
cocktail_core_css_CSSValueConverter.__name__ = true;
cocktail_core_css_CSSValueConverter.getPixelFromLength = function(length,relativeLengthReference) {
	var lengthValue;
	switch(length[1]) {
	case 0:
		var value = length[2];
		lengthValue = value;
		break;
	case 2:
		var value1 = length[2];
		lengthValue = value1 * 37.7952755905511779 / 10;
		break;
	case 1:
		var value2 = length[2];
		lengthValue = value2 * 37.7952755905511779;
		break;
	case 3:
		var value3 = length[2];
		lengthValue = value3 / 0.75;
		break;
	case 5:
		var value4 = length[2];
		lengthValue = value4 * 96.;
		break;
	case 4:
		var value5 = length[2];
		lengthValue = value5 * 16.;
		break;
	case 6:
		var value6 = length[2];
		lengthValue = relativeLengthReference.em * value6;
		break;
	case 8:
		var value7 = length[2];
		lengthValue = relativeLengthReference.ex * value7;
		break;
	case 9:
		var value8 = length[2];
		lengthValue = relativeLengthReference.ch * value8;
		break;
	case 7:
		var value9 = length[2];
		lengthValue = relativeLengthReference.rem * value9;
		break;
	case 13:
		var value10 = length[2];
		if(relativeLengthReference.viewportHeight > relativeLengthReference.viewportWidth) lengthValue = relativeLengthReference.viewportHeight * 0.01 * value10; else lengthValue = relativeLengthReference.viewportWidth * 0.01 * value10;
		break;
	case 12:
		var value11 = length[2];
		if(relativeLengthReference.viewportHeight < relativeLengthReference.viewportWidth) lengthValue = relativeLengthReference.viewportHeight * 0.01 * value11; else lengthValue = relativeLengthReference.viewportWidth * 0.01 * value11;
		break;
	case 11:
		var value12 = length[2];
		lengthValue = relativeLengthReference.viewportHeight * 0.01 * value12;
		break;
	case 10:
		var value13 = length[2];
		lengthValue = relativeLengthReference.viewportWidth * 0.01 * value13;
		break;
	}
	return lengthValue;
};
cocktail_core_css_CSSValueConverter.getBorderWidthFromBorderWidthKeyword = function(value) {
	switch(value[1]) {
	case 73:
		return cocktail_core_config_Config.getInstance().thinBorderWidth;
	case 61:
		return cocktail_core_config_Config.getInstance().mediumBorderWidth;
	case 74:
		return cocktail_core_config_Config.getInstance().thickBorderWidth;
	default:
		throw new js__$Boot_HaxeError("not a valid border width keyword");
	}
};
cocktail_core_css_CSSValueConverter.getFontFamilyAsStringArray = function(value) {
	var fontNames = [];
	switch(value[1]) {
	case 15:
		var value1 = value[2];
		var _g1 = 0;
		var _g = value1.length;
		while(_g1 < _g) {
			var i = _g1++;
			{
				var _g2 = value1[i];
				switch(_g2[1]) {
				case 6:
					var value2 = _g2[2];
					fontNames.push(value2);
					break;
				case 3:
					var value3 = _g2[2];
					fontNames.push(value3);
					break;
				default:
					throw new js__$Boot_HaxeError("Illegal value for font family style");
				}
			}
		}
		break;
	case 3:
		var value4 = value[2];
		fontNames = [value4];
		break;
	case 6:
		var value5 = value[2];
		fontNames = [value5];
		break;
	default:
		throw new js__$Boot_HaxeError("Illegal value for font family style");
	}
	return fontNames;
};
cocktail_core_css_CSSValueConverter.getFontSizeFromAbsoluteSizeValue = function(absoluteSize) {
	var fontSize = 0.0;
	switch(absoluteSize[1]) {
	case 58:
		fontSize = cocktail_core_config_Config.getInstance().xxSmallFontSize;
		break;
	case 59:
		fontSize = cocktail_core_config_Config.getInstance().xSmallFontSize;
		break;
	case 60:
		fontSize = cocktail_core_config_Config.getInstance().smallFontSize;
		break;
	case 61:
		fontSize = cocktail_core_config_Config.getInstance().mediumFontSize;
		break;
	case 62:
		fontSize = cocktail_core_config_Config.getInstance().largeFontSize;
		break;
	case 63:
		fontSize = cocktail_core_config_Config.getInstance().xLargeFontSize;
		break;
	case 64:
		fontSize = cocktail_core_config_Config.getInstance().xxLargeFontSize;
		break;
	default:
		throw new js__$Boot_HaxeError("Illegal keyword value for font size");
	}
	return fontSize;
};
cocktail_core_css_CSSValueConverter.getFontSizeFromRelativeSizeValue = function(relativeSize,parentFontSize) {
	var fontSize = 0.0;
	switch(relativeSize[1]) {
	case 65:
		fontSize = cocktail_core_css_CSSValueConverter.getLargerFontSize(parentFontSize);
		break;
	case 66:
		fontSize = cocktail_core_css_CSSValueConverter.getSmallerFontSize(parentFontSize);
		break;
	default:
		throw new js__$Boot_HaxeError("Illegal keyword value for font size");
	}
	return fontSize;
};
cocktail_core_css_CSSValueConverter.getComputedCSSColorFromCSSColor = function(colorProperty,currentColor) {
	switch(colorProperty[1]) {
	case 7:
		var value = colorProperty[2];
		return cocktail_core_css_CSSValueConverter.getRGBAColorFromColorKeyword(value);
	case 8:
		return cocktail_core_css_CSSColorValue.RGBA(0,0,0,0.0);
	case 0:
		var blue = colorProperty[4];
		var green = colorProperty[3];
		var red = colorProperty[2];
		red = cocktail_core_css_CSSValueConverter.clampInteger(red,255,0);
		green = cocktail_core_css_CSSValueConverter.clampInteger(green,255,0);
		blue = cocktail_core_css_CSSValueConverter.clampInteger(blue,255,0);
		return cocktail_core_css_CSSColorValue.RGBA(red,green,blue,1.0);
	case 1:
		var blue1 = colorProperty[4];
		var green1 = colorProperty[3];
		var red1 = colorProperty[2];
		red1 = cocktail_core_css_CSSValueConverter.clampNumber(red1,100,0);
		green1 = cocktail_core_css_CSSValueConverter.clampNumber(green1,100,0);
		blue1 = cocktail_core_css_CSSValueConverter.clampNumber(blue1,100,0);
		return cocktail_core_css_CSSColorValue.RGBA(Math.round(255 * (red1 * 0.01)),Math.round(255 * (green1 * 0.01)),Math.round(255 * (blue1 * 0.01)),1.0);
	case 2:
		var alpha = colorProperty[5];
		var blue2 = colorProperty[4];
		var green2 = colorProperty[3];
		var red2 = colorProperty[2];
		red2 = cocktail_core_css_CSSValueConverter.clampInteger(red2,255,0);
		green2 = cocktail_core_css_CSSValueConverter.clampInteger(green2,255,0);
		blue2 = cocktail_core_css_CSSValueConverter.clampInteger(blue2,255,0);
		alpha = cocktail_core_css_CSSValueConverter.clampNumber(alpha,1.0,0.0);
		return cocktail_core_css_CSSColorValue.RGBA(red2,green2,blue2,alpha);
	case 3:
		var alpha1 = colorProperty[5];
		var blue3 = colorProperty[4];
		var green3 = colorProperty[3];
		var red3 = colorProperty[2];
		red3 = cocktail_core_css_CSSValueConverter.clampNumber(red3,100,0);
		green3 = cocktail_core_css_CSSValueConverter.clampNumber(green3,100,0);
		blue3 = cocktail_core_css_CSSValueConverter.clampNumber(blue3,100,0);
		alpha1 = cocktail_core_css_CSSValueConverter.clampNumber(alpha1,1.0,0.0);
		return cocktail_core_css_CSSColorValue.RGBA(Math.round(255 * (red3 * 0.01)),Math.round(255 * (green3 * 0.01)),Math.round(255 * (blue3 * 0.01)),alpha1);
	case 5:
		var lightness = colorProperty[4];
		var saturation = colorProperty[3];
		var hue = colorProperty[2];
		hue = 360 / hue;
		saturation = 100 / saturation;
		lightness = 100 / lightness;
		return cocktail_core_css_CSSValueConverter.HSLAToRGBA(hue,saturation,lightness,1.0);
	case 6:
		var alpha2 = colorProperty[5];
		var lightness1 = colorProperty[4];
		var saturation1 = colorProperty[3];
		var hue1 = colorProperty[2];
		hue1 = 360 / hue1;
		saturation1 = 100 / saturation1;
		lightness1 = 100 / lightness1;
		return cocktail_core_css_CSSValueConverter.HSLAToRGBA(hue1,saturation1,lightness1,alpha2);
	case 4:
		var value1 = colorProperty[2];
		var paddedHex = "";
		if(value1.length == 3) {
			paddedHex += value1.charAt(0);
			paddedHex += value1.charAt(0);
			paddedHex += value1.charAt(1);
			paddedHex += value1.charAt(1);
			paddedHex += value1.charAt(2);
			paddedHex += value1.charAt(2);
		} else paddedHex = value1;
		return cocktail_core_css_CSSValueConverter.hexToRGBA(paddedHex);
	case 9:
		return currentColor;
	}
};
cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor = function(value,colorVO) {
	var colorValue = 0;
	var alphaValue = 0;
	switch(value[1]) {
	case 2:
		var alpha = value[5];
		var blue = value[4];
		var green = value[3];
		var red = value[2];
		colorValue = red;
		colorValue = (colorValue << 8) + green;
		colorValue = (colorValue << 8) + blue;
		alphaValue = alpha;
		break;
	default:
	}
	colorVO.color = colorValue;
	colorVO.alpha = alphaValue;
};
cocktail_core_css_CSSValueConverter.HSLAToRGBA = function(hue,saturation,lightness,alpha) {
	var m2 = 0;
	if(lightness < 0.5) m2 = lightness * (saturation + 1); else m2 = lightness + saturation - lightness * saturation;
	var m1 = lightness * 2 - m2;
	var r = Math.round(cocktail_core_css_CSSValueConverter.hueToRGB(m1,m2,hue + 0.333333333333333315));
	var g = Math.round(cocktail_core_css_CSSValueConverter.hueToRGB(m1,m2,hue));
	var b = Math.round(cocktail_core_css_CSSValueConverter.hueToRGB(m1,m2,hue - 0.333333333333333315));
	return cocktail_core_css_CSSColorValue.RGBA(r,g,b,alpha);
};
cocktail_core_css_CSSValueConverter.hueToRGB = function(m1,m2,h) {
	if(h < 0) h = h + 1;
	if(h > 1) h = h - 1;
	if(h * 6 < 1) return m1 + (m2 - m1) * h * 6;
	if(h * 2 < 1) return m2;
	if(h * 3 < 2) return m1 + (m2 - m1) * (0.66666666666666663 - h) * 6;
	return m1;
};
cocktail_core_css_CSSValueConverter.clampNumber = function(number,max,min) {
	if(number > max) return max;
	if(number < min) return min;
	return number;
};
cocktail_core_css_CSSValueConverter.clampInteger = function(integer,max,min) {
	if(integer > max) return max;
	if(integer < min) return min;
	return integer;
};
cocktail_core_css_CSSValueConverter.hexToRGBA = function(hex) {
	var red = cocktail_core_css_CSSValueConverter.hexToInt(hex.charAt(0)) * 16 + cocktail_core_css_CSSValueConverter.hexToInt(hex.charAt(1));
	var green = cocktail_core_css_CSSValueConverter.hexToInt(hex.charAt(2)) * 16 + cocktail_core_css_CSSValueConverter.hexToInt(hex.charAt(3));
	var blue = cocktail_core_css_CSSValueConverter.hexToInt(hex.charAt(4)) * 16 + cocktail_core_css_CSSValueConverter.hexToInt(hex.charAt(5));
	return cocktail_core_css_CSSColorValue.RGBA(red,green,blue,1.0);
};
cocktail_core_css_CSSValueConverter.hexToInt = function($char) {
	var _g = $char.toUpperCase();
	switch(_g) {
	case "0":
		return 0;
	case "1":
		return 1;
	case "2":
		return 2;
	case "3":
		return 3;
	case "4":
		return 4;
	case "5":
		return 5;
	case "6":
		return 6;
	case "7":
		return 7;
	case "8":
		return 8;
	case "9":
		return 9;
	case "A":
		return 10;
	case "B":
		return 11;
	case "C":
		return 12;
	case "D":
		return 13;
	case "E":
		return 14;
	case "F":
		return 15;
	}
	return 0;
};
cocktail_core_css_CSSValueConverter.getRGBAColorFromColorKeyword = function(value) {
	switch(value[1]) {
	case 0:
		return cocktail_core_css_CSSColorValue.RGBA(240,248,255,1.0);
	case 1:
		return cocktail_core_css_CSSColorValue.RGBA(250,235,215,1.0);
	case 2:
		return cocktail_core_css_CSSColorValue.RGBA(0,255,255,1.0);
	case 3:
		return cocktail_core_css_CSSColorValue.RGBA(127,255,212,1.0);
	case 4:
		return cocktail_core_css_CSSColorValue.RGBA(240,255,255,1.0);
	case 5:
		return cocktail_core_css_CSSColorValue.RGBA(245,245,220,1.0);
	case 6:
		return cocktail_core_css_CSSColorValue.RGBA(255,228,196,1.0);
	case 7:
		return cocktail_core_css_CSSColorValue.RGBA(0,0,0,1.0);
	case 8:
		return cocktail_core_css_CSSColorValue.RGBA(255,235,205,1.0);
	case 9:
		return cocktail_core_css_CSSColorValue.RGBA(0,0,255,1.0);
	case 10:
		return cocktail_core_css_CSSColorValue.RGBA(138,43,226,1.0);
	case 11:
		return cocktail_core_css_CSSColorValue.RGBA(165,42,42,1.0);
	case 12:
		return cocktail_core_css_CSSColorValue.RGBA(222,184,135,1.0);
	case 13:
		return cocktail_core_css_CSSColorValue.RGBA(95,158,160,1.0);
	case 14:
		return cocktail_core_css_CSSColorValue.RGBA(127,255,0,1.0);
	case 15:
		return cocktail_core_css_CSSColorValue.RGBA(210,105,30,1.0);
	case 16:
		return cocktail_core_css_CSSColorValue.RGBA(255,127,80,1.0);
	case 17:
		return cocktail_core_css_CSSColorValue.RGBA(100,149,237,1.0);
	case 18:
		return cocktail_core_css_CSSColorValue.RGBA(255,248,220,1.0);
	case 19:
		return cocktail_core_css_CSSColorValue.RGBA(220,20,60,1.0);
	case 20:
		return cocktail_core_css_CSSColorValue.RGBA(0,255,255,1.0);
	case 21:
		return cocktail_core_css_CSSColorValue.RGBA(0,0,139,1.0);
	case 22:
		return cocktail_core_css_CSSColorValue.RGBA(0,139,139,1.0);
	case 23:
		return cocktail_core_css_CSSColorValue.RGBA(184,134,11,1.0);
	case 24:
		return cocktail_core_css_CSSColorValue.RGBA(169,169,169,1.0);
	case 25:
		return cocktail_core_css_CSSColorValue.RGBA(0,100,0,1.0);
	case 26:
		return cocktail_core_css_CSSColorValue.RGBA(169,169,169,1.0);
	case 27:
		return cocktail_core_css_CSSColorValue.RGBA(189,183,107,1.0);
	case 28:
		return cocktail_core_css_CSSColorValue.RGBA(139,0,139,1.0);
	case 29:
		return cocktail_core_css_CSSColorValue.RGBA(85,107,47,1.0);
	case 30:
		return cocktail_core_css_CSSColorValue.RGBA(255,140,0,1.0);
	case 31:
		return cocktail_core_css_CSSColorValue.RGBA(153,50,204,1.0);
	case 32:
		return cocktail_core_css_CSSColorValue.RGBA(139,0,0,1.0);
	case 33:
		return cocktail_core_css_CSSColorValue.RGBA(233,150,122,1.0);
	case 34:
		return cocktail_core_css_CSSColorValue.RGBA(143,188,143,1.0);
	case 35:
		return cocktail_core_css_CSSColorValue.RGBA(72,61,139,1.0);
	case 36:
		return cocktail_core_css_CSSColorValue.RGBA(47,79,79,1.0);
	case 37:
		return cocktail_core_css_CSSColorValue.RGBA(47,79,79,1.0);
	case 38:
		return cocktail_core_css_CSSColorValue.RGBA(0,206,209,1.0);
	case 39:
		return cocktail_core_css_CSSColorValue.RGBA(148,0,211,1.0);
	case 40:
		return cocktail_core_css_CSSColorValue.RGBA(255,20,147,1.0);
	case 41:
		return cocktail_core_css_CSSColorValue.RGBA(0,191,255,1.0);
	case 42:
		return cocktail_core_css_CSSColorValue.RGBA(105,105,105,1.0);
	case 43:
		return cocktail_core_css_CSSColorValue.RGBA(105,105,105,1.0);
	case 44:
		return cocktail_core_css_CSSColorValue.RGBA(30,144,255,1.0);
	case 45:
		return cocktail_core_css_CSSColorValue.RGBA(178,34,34,1.0);
	case 46:
		return cocktail_core_css_CSSColorValue.RGBA(255,250,240,1.0);
	case 47:
		return cocktail_core_css_CSSColorValue.RGBA(34,139,34,1.0);
	case 48:
		return cocktail_core_css_CSSColorValue.RGBA(255,0,255,1.0);
	case 49:
		return cocktail_core_css_CSSColorValue.RGBA(220,220,220,1.0);
	case 50:
		return cocktail_core_css_CSSColorValue.RGBA(248,248,255,1.0);
	case 51:
		return cocktail_core_css_CSSColorValue.RGBA(255,215,0,1.0);
	case 52:
		return cocktail_core_css_CSSColorValue.RGBA(218,165,32,1.0);
	case 53:
		return cocktail_core_css_CSSColorValue.RGBA(128,128,128,1.0);
	case 54:
		return cocktail_core_css_CSSColorValue.RGBA(0,128,0,1.0);
	case 55:
		return cocktail_core_css_CSSColorValue.RGBA(173,255,47,1.0);
	case 56:
		return cocktail_core_css_CSSColorValue.RGBA(128,128,128,1.0);
	case 57:
		return cocktail_core_css_CSSColorValue.RGBA(240,255,240,1.0);
	case 58:
		return cocktail_core_css_CSSColorValue.RGBA(255,105,180,1.0);
	case 59:
		return cocktail_core_css_CSSColorValue.RGBA(205,92,92,1.0);
	case 60:
		return cocktail_core_css_CSSColorValue.RGBA(75,0,130,1.0);
	case 61:
		return cocktail_core_css_CSSColorValue.RGBA(255,255,240,1.0);
	case 62:
		return cocktail_core_css_CSSColorValue.RGBA(240,230,140,1.0);
	case 63:
		return cocktail_core_css_CSSColorValue.RGBA(230,230,250,1.0);
	case 64:
		return cocktail_core_css_CSSColorValue.RGBA(255,240,245,1.0);
	case 65:
		return cocktail_core_css_CSSColorValue.RGBA(124,252,0,1.0);
	case 66:
		return cocktail_core_css_CSSColorValue.RGBA(255,250,205,1.0);
	case 67:
		return cocktail_core_css_CSSColorValue.RGBA(173,216,130,1.0);
	case 68:
		return cocktail_core_css_CSSColorValue.RGBA(240,128,128,1.0);
	case 69:
		return cocktail_core_css_CSSColorValue.RGBA(224,255,255,1.0);
	case 70:
		return cocktail_core_css_CSSColorValue.RGBA(250,250,210,1.0);
	case 71:
		return cocktail_core_css_CSSColorValue.RGBA(211,211,211,1.0);
	case 72:
		return cocktail_core_css_CSSColorValue.RGBA(144,238,144,1.0);
	case 73:
		return cocktail_core_css_CSSColorValue.RGBA(211,211,211,1.0);
	case 74:
		return cocktail_core_css_CSSColorValue.RGBA(255,182,193,1.0);
	case 75:
		return cocktail_core_css_CSSColorValue.RGBA(255,160,122,1.0);
	case 76:
		return cocktail_core_css_CSSColorValue.RGBA(32,178,170,1.0);
	case 77:
		return cocktail_core_css_CSSColorValue.RGBA(135,206,250,1.0);
	case 78:
		return cocktail_core_css_CSSColorValue.RGBA(119,136,153,1.0);
	case 79:
		return cocktail_core_css_CSSColorValue.RGBA(119,136,153,1.0);
	case 80:
		return cocktail_core_css_CSSColorValue.RGBA(176,196,222,1.0);
	case 81:
		return cocktail_core_css_CSSColorValue.RGBA(255,255,224,1.0);
	case 82:
		return cocktail_core_css_CSSColorValue.RGBA(0,255,0,1.0);
	case 83:
		return cocktail_core_css_CSSColorValue.RGBA(50,205,50,1.0);
	case 84:
		return cocktail_core_css_CSSColorValue.RGBA(250,240,230,1.0);
	case 85:
		return cocktail_core_css_CSSColorValue.RGBA(255,0,255,1.0);
	case 86:
		return cocktail_core_css_CSSColorValue.RGBA(128,0,0,1.0);
	case 87:
		return cocktail_core_css_CSSColorValue.RGBA(102,205,170,1.0);
	case 88:
		return cocktail_core_css_CSSColorValue.RGBA(0,0,205,1.0);
	case 89:
		return cocktail_core_css_CSSColorValue.RGBA(186,85,211,1.0);
	case 90:
		return cocktail_core_css_CSSColorValue.RGBA(147,112,219,1.0);
	case 91:
		return cocktail_core_css_CSSColorValue.RGBA(60,179,113,1.0);
	case 92:
		return cocktail_core_css_CSSColorValue.RGBA(123,104,238,1.0);
	case 93:
		return cocktail_core_css_CSSColorValue.RGBA(0,250,154,1.0);
	case 94:
		return cocktail_core_css_CSSColorValue.RGBA(72,209,204,1.0);
	case 95:
		return cocktail_core_css_CSSColorValue.RGBA(199,21,133,1.0);
	case 96:
		return cocktail_core_css_CSSColorValue.RGBA(25,25,112,1.0);
	case 97:
		return cocktail_core_css_CSSColorValue.RGBA(245,255,250,1.0);
	case 98:
		return cocktail_core_css_CSSColorValue.RGBA(255,228,225,1.0);
	case 99:
		return cocktail_core_css_CSSColorValue.RGBA(255,228,181,1.0);
	case 100:
		return cocktail_core_css_CSSColorValue.RGBA(255,222,173,1.0);
	case 101:
		return cocktail_core_css_CSSColorValue.RGBA(0,0,128,1.0);
	case 102:
		return cocktail_core_css_CSSColorValue.RGBA(253,245,230,1.0);
	case 103:
		return cocktail_core_css_CSSColorValue.RGBA(128,128,0,1.0);
	case 104:
		return cocktail_core_css_CSSColorValue.RGBA(107,142,35,1.0);
	case 105:
		return cocktail_core_css_CSSColorValue.RGBA(255,165,0,1.0);
	case 106:
		return cocktail_core_css_CSSColorValue.RGBA(255,69,0,1.0);
	case 107:
		return cocktail_core_css_CSSColorValue.RGBA(218,112,214,1.0);
	case 108:
		return cocktail_core_css_CSSColorValue.RGBA(238,232,170,1.0);
	case 109:
		return cocktail_core_css_CSSColorValue.RGBA(152,251,152,1.0);
	case 110:
		return cocktail_core_css_CSSColorValue.RGBA(175,238,238,1.0);
	case 111:
		return cocktail_core_css_CSSColorValue.RGBA(219,112,147,1.0);
	case 112:
		return cocktail_core_css_CSSColorValue.RGBA(255,239,213,1.0);
	case 113:
		return cocktail_core_css_CSSColorValue.RGBA(255,218,185,1.0);
	case 114:
		return cocktail_core_css_CSSColorValue.RGBA(205,133,63,1.0);
	case 115:
		return cocktail_core_css_CSSColorValue.RGBA(255,192,203,1.0);
	case 116:
		return cocktail_core_css_CSSColorValue.RGBA(221,160,221,1.0);
	case 117:
		return cocktail_core_css_CSSColorValue.RGBA(176,224,230,1.0);
	case 118:
		return cocktail_core_css_CSSColorValue.RGBA(128,0,128,1.0);
	case 119:
		return cocktail_core_css_CSSColorValue.RGBA(255,0,0,1.0);
	case 120:
		return cocktail_core_css_CSSColorValue.RGBA(188,143,143,1.0);
	case 121:
		return cocktail_core_css_CSSColorValue.RGBA(65,105,225,1.0);
	case 122:
		return cocktail_core_css_CSSColorValue.RGBA(139,69,19,1.0);
	case 123:
		return cocktail_core_css_CSSColorValue.RGBA(250,128,114,1.0);
	case 124:
		return cocktail_core_css_CSSColorValue.RGBA(244,164,96,1.0);
	case 125:
		return cocktail_core_css_CSSColorValue.RGBA(46,139,87,1.0);
	case 126:
		return cocktail_core_css_CSSColorValue.RGBA(255,245,238,1.0);
	case 127:
		return cocktail_core_css_CSSColorValue.RGBA(160,82,45,1.0);
	case 128:
		return cocktail_core_css_CSSColorValue.RGBA(192,192,192,1.0);
	case 129:
		return cocktail_core_css_CSSColorValue.RGBA(135,206,235,1.0);
	case 130:
		return cocktail_core_css_CSSColorValue.RGBA(106,90,205,1.0);
	case 131:
		return cocktail_core_css_CSSColorValue.RGBA(112,128,144,1.0);
	case 132:
		return cocktail_core_css_CSSColorValue.RGBA(112,128,144,1.0);
	case 133:
		return cocktail_core_css_CSSColorValue.RGBA(255,250,250,1.0);
	case 134:
		return cocktail_core_css_CSSColorValue.RGBA(0,255,127,1.0);
	case 135:
		return cocktail_core_css_CSSColorValue.RGBA(70,130,180,1.0);
	case 136:
		return cocktail_core_css_CSSColorValue.RGBA(210,180,140,1.0);
	case 137:
		return cocktail_core_css_CSSColorValue.RGBA(0,128,128,1.0);
	case 138:
		return cocktail_core_css_CSSColorValue.RGBA(216,191,216,1.0);
	case 139:
		return cocktail_core_css_CSSColorValue.RGBA(255,99,71,1.0);
	case 140:
		return cocktail_core_css_CSSColorValue.RGBA(64,224,208,1.0);
	case 141:
		return cocktail_core_css_CSSColorValue.RGBA(238,130,238,1.0);
	case 142:
		return cocktail_core_css_CSSColorValue.RGBA(245,222,179,1.0);
	case 143:
		return cocktail_core_css_CSSColorValue.RGBA(255,255,255,1.0);
	case 144:
		return cocktail_core_css_CSSColorValue.RGBA(245,245,245,1.0);
	case 145:
		return cocktail_core_css_CSSColorValue.RGBA(255,255,0,1.0);
	case 146:
		return cocktail_core_css_CSSColorValue.RGBA(154,205,50,1.0);
	}
};
cocktail_core_css_CSSValueConverter.getLargerFontSize = function(parentFontSize) {
	var fontSizeTable = [cocktail_core_config_Config.getInstance().xxSmallFontSize,cocktail_core_config_Config.getInstance().xSmallFontSize,cocktail_core_config_Config.getInstance().smallFontSize,cocktail_core_config_Config.getInstance().mediumFontSize,cocktail_core_config_Config.getInstance().largeFontSize,cocktail_core_config_Config.getInstance().xLargeFontSize,cocktail_core_config_Config.getInstance().xxLargeFontSize];
	var fontSize = fontSizeTable[fontSizeTable.length - 1];
	var _g1 = 0;
	var _g = fontSizeTable.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(fontSizeTable[i] > parentFontSize) {
			fontSize = fontSizeTable[i];
			break;
		}
	}
	return fontSize;
};
cocktail_core_css_CSSValueConverter.getSmallerFontSize = function(parentFontSize) {
	var fontSizeTable = [cocktail_core_config_Config.getInstance().xxSmallFontSize,cocktail_core_config_Config.getInstance().xSmallFontSize,cocktail_core_config_Config.getInstance().smallFontSize,cocktail_core_config_Config.getInstance().mediumFontSize,cocktail_core_config_Config.getInstance().largeFontSize,cocktail_core_config_Config.getInstance().xLargeFontSize,cocktail_core_config_Config.getInstance().xxLargeFontSize];
	var fontSize = fontSizeTable[0];
	var i = fontSizeTable.length - 1;
	while(i > 0) {
		if(fontSizeTable[i] < parentFontSize) {
			fontSize = fontSizeTable[i];
			break;
		}
		i--;
	}
	return fontSize;
};
var cocktail_core_css_CascadeManager = function() {
	this.propertiesToCascade = [];
	this.parentRelativeLengthReference = new cocktail_core_css_RelativeLengthReferenceData();
	this.relativeLengthReference = new cocktail_core_css_RelativeLengthReferenceData();
	this.reset();
};
$hxClasses["cocktail.core.css.CascadeManager"] = cocktail_core_css_CascadeManager;
cocktail_core_css_CascadeManager.__name__ = true;
cocktail_core_css_CascadeManager.prototype = {
	dispose: function() {
		this.propertiesToCascade = null;
	}
	,reset: function() {
		if(this.hasPropertiesToCascade == true) {
			var _g = 0;
			while(_g < 87) {
				var i = _g++;
				this.propertiesToCascade[i] = false;
			}
		}
		this.hasFontSize = false;
		this.hasFontFamily = false;
		this.hasBackgroundColor = false;
		this.hasColor = false;
		this.hasDisplay = false;
		this.hasFloat = false;
		this.hasOverflowX = false;
		this.hasOverflowY = false;
		this.hasLetterSpacing = false;
		this.hasLineHeight = false;
		this.hasTransform = false;
		this.hasZIndex = false;
		this.hasPosition = false;
		this.hasVisible = false;
		this.hasOpacity = false;
		this.hasBackgroundImage = false;
		this.hasVerticalAlign = false;
		this.hasClear = false;
		this.hasWhiteSpace = false;
		this.hasWidth = false;
		this.hasHeight = false;
		this.hasMaxHeight = false;
		this.hasMaxWidth = false;
		this.hasTextAlign = false;
		this.hasTop = false;
		this.hasBottom = false;
		this.hasLeft = false;
		this.hasRight = false;
		this.hasMarginTop = false;
		this.hasMarginBottom = false;
		this.hasMarginLeft = false;
		this.hasMarginRight = false;
		this.hasTransitionProperty = false;
		this.hasLeftBorderStyle = false;
		this.hasTopBorderStyle = false;
		this.hasRightBorderStyle = false;
		this.hasBottomBorderStyle = false;
		this.hasBottomBorderColor = false;
		this.hasTopBorderColor = false;
		this.hasLeftBorderColor = false;
		this.hasRightBorderColor = false;
		this.hasOutlineStyle = false;
		this.hasOutlineColor = false;
		this.hasPropertiesToCascade = false;
		this.cascadeAll = false;
	}
	,addPropertyToCascade: function(index) {
		if(this.cascadeAll == true) return;
		this.propertiesToCascade[index] = true;
		this.flagProperty(index);
		this.hasPropertiesToCascade = true;
	}
	,removePropertyToCascade: function(index) {
		this.unFlagProperty(index);
		this.propertiesToCascade[index] = false;
	}
	,shouldCascadeAll: function() {
		this.cascadeAll = true;
		this.hasPropertiesToCascade = true;
	}
	,flagProperty: function(index) {
		switch(index) {
		case 34:
			this.hasFontSize = true;
			break;
		case 8:
			this.hasMarginTop = true;
			break;
		case 9:
			this.hasMarginBottom = true;
			break;
		case 6:
			this.hasMarginLeft = true;
			break;
		case 7:
			this.hasMarginRight = true;
			break;
		case 57:
			this.hasTransitionProperty = true;
			break;
		case 21:
			this.hasTop = true;
			break;
		case 24:
			this.hasBottom = true;
			break;
		case 22:
			this.hasLeft = true;
			break;
		case 23:
			this.hasRight = true;
			break;
		case 46:
			this.hasTextAlign = true;
			break;
		case 18:
			this.hasMaxHeight = true;
			break;
		case 20:
			this.hasMaxWidth = true;
			break;
		case 15:
			this.hasWidth = true;
			break;
		case 16:
			this.hasHeight = true;
			break;
		case 3:
			this.hasClear = true;
			break;
		case 45:
			this.hasWhiteSpace = true;
			break;
		case 26:
			this.hasBackgroundImage = true;
			break;
		case 48:
			this.hasVerticalAlign = true;
			break;
		case 41:
			this.hasLineHeight = true;
			break;
		case 43:
			this.hasLetterSpacing = true;
			break;
		case 53:
			this.hasOpacity = true;
			break;
		case 37:
			this.hasFontFamily = true;
			break;
		case 49:
			this.hasVisible = true;
			break;
		case 25:
			this.hasBackgroundColor = true;
			break;
		case 40:
			this.hasColor = true;
			break;
		case 0:
			this.hasDisplay = true;
			break;
		case 2:
			this.hasFloat = true;
			break;
		case 51:
			this.hasOverflowX = true;
			break;
		case 52:
			this.hasOverflowY = true;
			break;
		case 61:
			this.hasTransform = true;
			break;
		case 4:
			this.hasZIndex = true;
			break;
		case 1:
			this.hasPosition = true;
			break;
		case 75:
			this.hasLeftBorderStyle = true;
			break;
		case 72:
			this.hasTopBorderStyle = true;
			break;
		case 73:
			this.hasRightBorderStyle = true;
			break;
		case 74:
			this.hasBottomBorderStyle = true;
			break;
		case 67:
			this.hasTopBorderColor = true;
			break;
		case 69:
			this.hasBottomBorderColor = true;
			break;
		case 68:
			this.hasRightBorderColor = true;
			break;
		case 70:
			this.hasLeftBorderColor = true;
			break;
		case 83:
			this.hasOutlineStyle = true;
			break;
		case 84:
			this.hasOutlineColor = true;
			break;
		}
	}
	,unFlagProperty: function(index) {
		switch(index) {
		case 40:
			this.hasColor = false;
			break;
		case 34:
			this.hasFontSize = false;
			break;
		case 37:
			this.hasFontFamily = false;
			break;
		case 57:
			this.hasTransitionProperty = false;
			break;
		case 72:
			this.hasTopBorderStyle = false;
			break;
		case 73:
			this.hasRightBorderStyle = false;
			break;
		case 75:
			this.hasLeftBorderStyle = false;
			break;
		case 74:
			this.hasBottomBorderStyle = false;
			break;
		case 83:
			this.hasOutlineStyle = false;
			break;
		default:
		}
	}
	,__class__: cocktail_core_css_CascadeManager
};
var cocktail_core_css_CoreStyle = function(htmlElement) {
	this.htmlElement = htmlElement;
	this._isFirstCascade = true;
	this.hasTransitionnableProperties = false;
	this.isFloat = false;
	this.isInlineLevel = false;
	this.isInlineBlock = false;
	this.isBlock = false;
	this.isVisible = false;
	this.isPositioned = false;
	this.isRelativePositioned = false;
	this.isFixedPositioned = false;
	this.canAlwaysOverflow = false;
	this.isTransformed = false;
	this.isTransparent = false;
	this.hasBackgroundImage = false;
	this.isTopAligned = false;
	this.isBottomAligned = false;
	this.isBaselineAligned = false;
	this.canHaveClearance = false;
	this.hasPreWhiteSpace = false;
	this.hasNoWrapWhiteSpace = false;
	this.hasNormalWhiteSpace = false;
	this.hasPreLineWhiteSpace = false;
	this.hasPreWrapWhiteSpace = false;
	this.hasAutoHeight = false;
	this.hasAutoWidth = false;
	this.hasMaxHeight = false;
	this.hasMaxWidth = false;
	this.isInline = false;
	this.isLeftAligned = false;
	this.hasAutoTop = false;
	this.hasAutoBottom = false;
	this.hasAutoLeft = false;
	this.hasAutoRight = false;
	this.hasAutoMarginTop = false;
	this.hasAutoMarginBottom = false;
	this.hasAutoMarginLeft = false;
	this.hasAutoMarginRight = false;
	this.isAbsolutelyPositioned = false;
	this.hasBackgroundColor = false;
	this.hasCSSTransform = false;
	this.hasHiddenOrScrollOverflowX = false;
	this.hasHiddenOrScrollOverflowY = false;
	this._initialStyleDeclaration = cocktail_core_css_InitialStyleDeclaration.getInstance();
	this._initialComputedStyleDeclaration = this._initialStyleDeclaration.initialComputedStyleDeclaration;
	this.init();
};
$hxClasses["cocktail.core.css.CoreStyle"] = cocktail_core_css_CoreStyle;
cocktail_core_css_CoreStyle.__name__ = true;
cocktail_core_css_CoreStyle.prototype = {
	dispose: function() {
		this.specifiedValues.dispose();
		this.computedValues.dispose();
		this._changedProperties = null;
		this._fontManager = null;
		this._transitionManager = null;
		this.usedValues = null;
		this.fontMetrics = null;
	}
	,init: function() {
		this.computedValues = new cocktail_core_css_CSSStyleDeclaration();
		this.specifiedValues = new cocktail_core_css_CSSStyleDeclaration();
		this._changedProperties = [];
		var htmlDocument = this.htmlElement.ownerDocument;
		this._fontManager = htmlDocument.fontManager;
		this._transitionManager = htmlDocument.transitionManager;
		this.fontMetrics = this._fontManager.getFontMetrics(cocktail_core_config_Config.getInstance().defaultFont,cocktail_core_config_Config.getInstance().mediumFontSize);
		this.usedValues = new cocktail_core_css_UsedValuesVO();
	}
	,initPendingComputedValues: function() {
		this._pendingComputedValues = [];
		var _g = 0;
		while(_g < 87) {
			var i = _g++;
			this._pendingComputedValues[i] = null;
		}
	}
	,initTransitioner: function() {
		this._transitioner = new cocktail_core_transition_Transitioner(this._transitionManager);
		this._transitioner.onTransitionCompleteCallback = $bind(this,this.onTransitionComplete);
		this._transitioner.onTransitionUpdateCallback = $bind(this,this.onTransitionUpdate);
	}
	,cascade: function(cascadeManager,initialStyleDeclaration,styleSheetDeclaration,inlineStyleDeclaration,parentStyleDeclaration,programmaticChange) {
		if(cascadeManager.hasPropertiesToCascade == false) return;
		var parentRelativeLengthReference = cascadeManager.parentRelativeLengthReference;
		var relativeLengthReference = cascadeManager.relativeLengthReference;
		this._changedProperties = [];
		var hasInlineStyle = inlineStyleDeclaration.length > 0;
		var hasStyleSheetStyle = styleSheetDeclaration.length > 0;
		var parentColor = this.getColor(((function($this) {
			var $r;
			if(parentStyleDeclaration._indexedProperties == null) {
				parentStyleDeclaration.resetIndexedProperties();
				parentStyleDeclaration.resetPropertiesPositions();
			}
			$r = parentStyleDeclaration._indexedProperties[40];
			return $r;
		}(this))).typedValue);
		if(cascadeManager.hasTransitionProperty == true || cascadeManager.cascadeAll == true) {
			this.cascadeProperty(57,initialStyleDeclaration,styleSheetDeclaration,inlineStyleDeclaration,parentStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,hasInlineStyle,hasStyleSheetStyle);
			this.hasTransitionnableProperties = this.isNone(this.getComputedOrInitialProperty(57)) == false;
			cascadeManager.removePropertyToCascade(57);
		}
		if(cascadeManager.hasLeftBorderStyle == true || cascadeManager.cascadeAll == true) {
			var leftBorderStyleDidChange = this.cascadeProperty(75,initialStyleDeclaration,styleSheetDeclaration,inlineStyleDeclaration,parentStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,hasInlineStyle,hasStyleSheetStyle);
			if(leftBorderStyleDidChange == true) {
				this._changedProperties.push(65);
				cascadeManager.addPropertyToCascade(65);
			}
			cascadeManager.removePropertyToCascade(75);
		}
		if(cascadeManager.hasRightBorderStyle == true || cascadeManager.cascadeAll == true) {
			var rightBorderStyleDidChange = this.cascadeProperty(73,initialStyleDeclaration,styleSheetDeclaration,inlineStyleDeclaration,parentStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,hasInlineStyle,hasStyleSheetStyle);
			if(rightBorderStyleDidChange == true) {
				this._changedProperties.push(63);
				cascadeManager.addPropertyToCascade(63);
			}
			cascadeManager.removePropertyToCascade(73);
		}
		if(cascadeManager.hasTopBorderStyle == true || cascadeManager.cascadeAll == true) {
			var topBorderStyleDidChange = this.cascadeProperty(72,initialStyleDeclaration,styleSheetDeclaration,inlineStyleDeclaration,parentStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,hasInlineStyle,hasStyleSheetStyle);
			if(topBorderStyleDidChange == true) {
				this._changedProperties.push(62);
				cascadeManager.addPropertyToCascade(62);
			}
			cascadeManager.removePropertyToCascade(72);
		}
		if(cascadeManager.hasBottomBorderStyle == true || cascadeManager.cascadeAll == true) {
			var bottomBorderStyleDidChange = this.cascadeProperty(74,initialStyleDeclaration,styleSheetDeclaration,inlineStyleDeclaration,parentStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,hasInlineStyle,hasStyleSheetStyle);
			if(bottomBorderStyleDidChange == true) {
				this._changedProperties.push(64);
				cascadeManager.addPropertyToCascade(64);
			}
			cascadeManager.removePropertyToCascade(74);
		}
		if(cascadeManager.hasOutlineStyle == true || cascadeManager.cascadeAll == true) {
			var outlineStyleDidChange = this.cascadeProperty(83,initialStyleDeclaration,styleSheetDeclaration,inlineStyleDeclaration,parentStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,hasInlineStyle,hasStyleSheetStyle);
			if(outlineStyleDidChange == true) {
				this._changedProperties.push(82);
				cascadeManager.addPropertyToCascade(82);
			}
			cascadeManager.removePropertyToCascade(83);
		}
		if(cascadeManager.hasFontSize == true || cascadeManager.hasFontFamily == true || cascadeManager.cascadeAll == true) {
			var fontSizeDidChange = this.cascadeProperty(34,initialStyleDeclaration,styleSheetDeclaration,inlineStyleDeclaration,parentStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,hasInlineStyle,hasStyleSheetStyle);
			var fontFamilyDidChange = this.cascadeProperty(37,initialStyleDeclaration,styleSheetDeclaration,inlineStyleDeclaration,parentStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,hasInlineStyle,hasStyleSheetStyle);
			if(fontSizeDidChange == true || fontFamilyDidChange == true) {
				var lengthCSSProperties = initialStyleDeclaration.lengthCSSProperties;
				var length2 = lengthCSSProperties.length;
				var _g = 0;
				while(_g < length2) {
					var i = _g++;
					cascadeManager.addPropertyToCascade(lengthCSSProperties[i]);
				}
				if(this.computedValues.get_fontFamily() != null) this.fontMetrics = this._fontManager.getFontMetrics(this.computedValues.get_fontFamily(),this.getAbsoluteLength(this.getTransitionablePropertyValue(34))); else this.fontMetrics = this._fontManager.getFontMetrics(initialStyleDeclaration.initialComputedStyleDeclaration.get_fontFamily(),this.getAbsoluteLength(this.getTransitionablePropertyValue(34)));
			}
			cascadeManager.removePropertyToCascade(34);
			cascadeManager.removePropertyToCascade(37);
		}
		if(cascadeManager.hasColor == true) {
			var colorDidChange = this.cascadeProperty(40,initialStyleDeclaration,styleSheetDeclaration,inlineStyleDeclaration,parentStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,hasInlineStyle,hasStyleSheetStyle);
			if(colorDidChange == true) {
				this._changedProperties.push(40);
				var colorCSSProperties = initialStyleDeclaration.colorCSSProperties;
				var length3 = colorCSSProperties.length;
				var _g1 = 0;
				while(_g1 < length3) {
					var i1 = _g1++;
					cascadeManager.addPropertyToCascade(colorCSSProperties[i1]);
				}
			}
			cascadeManager.removePropertyToCascade(40);
		}
		relativeLengthReference.em = this.fontMetrics.fontSize;
		relativeLengthReference.ex = this.fontMetrics.xHeight;
		relativeLengthReference.ch = this.fontMetrics.zeroHeight;
		var propertiesToCascade = null;
		if(cascadeManager.cascadeAll == true) propertiesToCascade = initialStyleDeclaration.supportedCSSProperties; else {
			propertiesToCascade = [];
			var flaggedProperties = cascadeManager.propertiesToCascade;
			var flaggedPropertiesLength = flaggedProperties.length;
			var _g2 = 0;
			while(_g2 < flaggedPropertiesLength) {
				var i2 = _g2++;
				if(flaggedProperties[i2] == true) propertiesToCascade.push(i2);
			}
		}
		var length = propertiesToCascade.length;
		var _g3 = 0;
		while(_g3 < length) {
			var i3 = _g3++;
			var didChangeSpecifiedValue = this.cascadeProperty(propertiesToCascade[i3],initialStyleDeclaration,styleSheetDeclaration,inlineStyleDeclaration,parentStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,hasInlineStyle,hasStyleSheetStyle);
			if(didChangeSpecifiedValue == true) this._changedProperties.push(propertiesToCascade[i3]);
		}
		cascadeManager.reset();
		var length1 = this._changedProperties.length;
		var _g4 = 0;
		while(_g4 < length1) {
			var i4 = _g4++;
			cascadeManager.addPropertyToCascade(this._changedProperties[i4]);
		}
		this.applyPositionFloatAndDisplayRelationship();
		this.applyHiddenBordersWidth();
		this.applyNoneOutlineWidth();
		if(cascadeManager.hasBackgroundColor == true) {
			cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(this.getColor(this.getComputedOrInitialProperty(25)),this.usedValues.backgroundColor);
			this.hasBackgroundColor = this.usedValues.backgroundColor.alpha != 0.0;
		}
		if(cascadeManager.hasColor == true) cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(this.getColor(this.getComputedOrInitialProperty(40)),this.usedValues.color);
		if(cascadeManager.hasLeftBorderColor == true) cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(this.getColor(this.getTransitionablePropertyValue(70)),this.usedValues.borderLeftColor);
		if(cascadeManager.hasTopBorderColor == true) cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(this.getColor(this.getTransitionablePropertyValue(67)),this.usedValues.borderTopColor);
		if(cascadeManager.hasRightBorderColor == true) cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(this.getColor(this.getTransitionablePropertyValue(68)),this.usedValues.borderRightColor);
		if(cascadeManager.hasBottomBorderColor == true) cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(this.getColor(this.getTransitionablePropertyValue(69)),this.usedValues.borderBottomColor);
		if(cascadeManager.hasOutlineColor == true) {
			var _g5 = this.getComputedOrInitialProperty(84);
			switch(_g5[1]) {
			case 12:
				var value = _g5[2];
				cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(value,this.usedValues.outlineColor);
				break;
			default:
			}
		}
		this.setUsedLineHeight();
		if(cascadeManager.hasLetterSpacing == true) {
			var _g6 = this.getTransitionablePropertyValue(43);
			switch(_g6[1]) {
			case 18:
				var value1 = _g6[2];
				this.usedValues.letterSpacing = value1;
				break;
			case 4:
				var value2 = _g6[2];
				this.usedValues.letterSpacing = 0.0;
				break;
			default:
			}
		}
		this.updateCoreStyleAttribute(cascadeManager,this._isFirstCascade);
		if(this._isFirstCascade == true) this._isFirstCascade = false;
	}
	,updateCoreStyleAttribute: function(cascadeManager,isFirstCascade) {
		if(cascadeManager.hasFloat == true || isFirstCascade == true) this.isFloat = this.isNone(this.getComputedOrInitialProperty(2)) == false;
		if(cascadeManager.hasDisplay == true || cascadeManager.hasPosition == true || cascadeManager.hasFloat == true || isFirstCascade == true) {
			this.isInlineLevel = false;
			this.isInlineBlock = false;
			this.isBlock = false;
			this.isInline = false;
			var _g = this.getKeyword(this.getComputedOrInitialProperty(0));
			switch(_g[1]) {
			case 30:
				this.isInlineLevel = true;
				this.isInline = true;
				break;
			case 29:
				this.isInlineLevel = true;
				this.isInlineBlock = true;
				break;
			case 28:
				this.isBlock = true;
				break;
			default:
			}
		}
		if(cascadeManager.hasVisible == true || isFirstCascade == true) this.isVisible = this.getKeyword(this.getComputedOrInitialProperty(49)) != cocktail_core_css_CSSKeywordValue.HIDDEN;
		if(cascadeManager.hasPosition == true || isFirstCascade == true) {
			this.isPositioned = false;
			this.isRelativePositioned = false;
			this.isFixedPositioned = false;
			this.isAbsolutelyPositioned = false;
			var _g1 = this.getKeyword(this.getComputedOrInitialProperty(1));
			switch(_g1[1]) {
			case 32:
				break;
			case 34:
				this.isPositioned = true;
				this.isAbsolutelyPositioned = true;
				break;
			case 35:
				this.isPositioned = true;
				this.isFixedPositioned = true;
				this.isAbsolutelyPositioned = true;
				break;
			case 33:
				this.isPositioned = true;
				this.isRelativePositioned = true;
				break;
			default:
			}
		}
		if(cascadeManager.hasOverflowX || cascadeManager.hasOverflowY || isFirstCascade == true) {
			this.canAlwaysOverflow = true;
			this.hasHiddenOrScrollOverflowX = false;
			var _g2 = this.getKeyword(this.getComputedOrInitialProperty(51));
			switch(_g2[1]) {
			case 36:
				break;
			case 37:case 38:
				this.hasHiddenOrScrollOverflowX = true;
				this.canAlwaysOverflow = false;
				break;
			default:
				this.canAlwaysOverflow = false;
			}
			var _g3 = this.getKeyword(this.getComputedOrInitialProperty(52));
			switch(_g3[1]) {
			case 36:
				break;
			case 37:case 38:
				this.hasHiddenOrScrollOverflowY = true;
				this.canAlwaysOverflow = false;
				break;
			default:
				this.canAlwaysOverflow = false;
			}
		}
		if(cascadeManager.hasTransform || cascadeManager.hasPosition || isFirstCascade == true) {
			this.isTransformed = false;
			this.hasCSSTransform = false;
			if(this.isRelativePositioned == true) this.isTransformed = true; else if(this.isNone(this.getComputedOrInitialProperty(61)) == false) {
				this.isTransformed = true;
				this.hasCSSTransform = true;
			}
		}
		if(cascadeManager.hasOpacity == true || isFirstCascade == true) {
			this.isTransparent = false;
			{
				var _g4 = this.getTransitionablePropertyValue(53);
				switch(_g4[1]) {
				case 1:
					var value = _g4[2];
					this.isTransparent = value != 1.0;
					break;
				case 18:
					var value1 = _g4[2];
					this.isTransparent = value1 != 1.0;
					break;
				default:
				}
			}
		}
		if(cascadeManager.hasMarginTop == true || isFirstCascade == true) this.hasAutoMarginTop = this.isAuto(this.getTransitionablePropertyValue(8));
		if(cascadeManager.hasMarginBottom == true || isFirstCascade == true) this.hasAutoMarginBottom = this.isAuto(this.getTransitionablePropertyValue(9));
		if(cascadeManager.hasMarginLeft == true || isFirstCascade == true) this.hasAutoMarginLeft = this.isAuto(this.getTransitionablePropertyValue(6));
		if(cascadeManager.hasMarginRight == true || isFirstCascade == true) this.hasAutoMarginRight = this.isAuto(this.getTransitionablePropertyValue(7));
		if(cascadeManager.hasBackgroundImage == true || isFirstCascade == true) {
			this.hasBackgroundImage = false;
			if(this.isNone(this.getComputedOrInitialProperty(26)) == false) {
				this.hasBackgroundImage = true;
				{
					var _g5 = this.getComputedOrInitialProperty(26);
					switch(_g5[1]) {
					case 5:
						var value2 = _g5[2];
						var htmlDocument = this.htmlElement.ownerDocument;
						htmlDocument.resourceManager.getImageResource(value2);
						break;
					default:
					}
				}
			}
		}
		if(cascadeManager.hasVerticalAlign == true || isFirstCascade == true) {
			this.isTopAligned = false;
			this.isBottomAligned = false;
			this.isBaselineAligned = false;
			{
				var _g6 = this.getComputedOrInitialProperty(48);
				switch(_g6[1]) {
				case 4:
					var value3 = _g6[2];
					switch(value3[1]) {
					case 22:
						this.isTopAligned = true;
						break;
					case 25:
						this.isBottomAligned = true;
						break;
					case 19:
						this.isBaselineAligned = true;
						break;
					default:
					}
					break;
				default:
				}
			}
		}
		if(cascadeManager.hasClear == true || isFirstCascade == true) this.canHaveClearance = this.isNone(this.getComputedOrInitialProperty(3)) == false;
		if(cascadeManager.hasWhiteSpace == true || isFirstCascade == true) {
			this.hasPreLineWhiteSpace = false;
			this.hasPreWhiteSpace = false;
			this.hasNoWrapWhiteSpace = false;
			this.hasNormalWhiteSpace = false;
			this.hasPreWrapWhiteSpace = false;
			var _g7 = this.getKeyword(this.getComputedOrInitialProperty(45));
			switch(_g7[1]) {
			case 7:
				this.hasPreWhiteSpace = true;
				break;
			case 10:
				this.hasPreLineWhiteSpace = true;
				break;
			case 9:
				this.hasPreWrapWhiteSpace = true;
				break;
			case 8:
				this.hasNoWrapWhiteSpace = true;
				break;
			case 0:
				this.hasNormalWhiteSpace = true;
				break;
			default:
			}
		}
		if(cascadeManager.hasWidth == true || isFirstCascade == true) this.hasAutoWidth = this.isAuto(this.getTransitionablePropertyValue(15));
		if(cascadeManager.hasHeight == true || isFirstCascade == true) this.hasAutoHeight = this.isAuto(this.getTransitionablePropertyValue(16));
		if(cascadeManager.hasMaxHeight == true || isFirstCascade == true) this.hasMaxHeight = this.isNone(this.getTransitionablePropertyValue(18)) == false;
		if(cascadeManager.hasMaxWidth == true || isFirstCascade == true) this.hasMaxWidth = this.isNone(this.getTransitionablePropertyValue(20)) == false;
		if(cascadeManager.hasTextAlign == true || isFirstCascade == true) {
			this.isLeftAligned = false;
			var _g8 = this.getKeyword(this.getComputedOrInitialProperty(46));
			switch(_g8[1]) {
			case 11:
				this.isLeftAligned = true;
				break;
			default:
			}
		}
		if(cascadeManager.hasTop == true || isFirstCascade == true) this.hasAutoTop = this.isAuto(this.getTransitionablePropertyValue(21));
		if(cascadeManager.hasBottom == true || isFirstCascade == true) this.hasAutoBottom = this.isAuto(this.getTransitionablePropertyValue(24));
		if(cascadeManager.hasLeft == true || isFirstCascade == true) this.hasAutoLeft = this.isAuto(this.getTransitionablePropertyValue(22));
		if(cascadeManager.hasRight == true || isFirstCascade == true) this.hasAutoRight = this.isAuto(this.getTransitionablePropertyValue(23));
	}
	,setUsedLineHeight: function() {
		{
			var _g = this.getTransitionablePropertyValue(41);
			switch(_g[1]) {
			case 18:
				var value = _g[2];
				this.usedValues.lineHeight = value;
				break;
			case 4:
				var value1 = _g[2];
				this.usedValues.lineHeight = this.fontMetrics.fontSize * 1.2;
				break;
			case 1:
				var value2 = _g[2];
				this.usedValues.lineHeight = this.fontMetrics.fontSize * value2;
				break;
			default:
			}
		}
	}
	,cascadeProperty: function(propertyIndex,initialStyleDeclaration,styleSheetDeclaration,inlineStyleDeclaration,parentStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,hasInlineStyle,hasStyleSheetStyle) {
		if(hasStyleSheetStyle == true) {
			var typedProperty;
			if(styleSheetDeclaration._indexedProperties == null) {
				styleSheetDeclaration.resetIndexedProperties();
				styleSheetDeclaration.resetPropertiesPositions();
			}
			typedProperty = styleSheetDeclaration._indexedProperties[propertyIndex];
			if(typedProperty != null) {
				if(typedProperty.important == true) return this.setProperty(propertyIndex,typedProperty,parentStyleDeclaration,initialStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,false,false);
			}
		}
		if(hasInlineStyle == true) {
			var typedProperty1;
			if(inlineStyleDeclaration._indexedProperties == null) {
				inlineStyleDeclaration.resetIndexedProperties();
				inlineStyleDeclaration.resetPropertiesPositions();
			}
			typedProperty1 = inlineStyleDeclaration._indexedProperties[propertyIndex];
			if(typedProperty1 != null) return this.setProperty(propertyIndex,typedProperty1,parentStyleDeclaration,initialStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,false,false);
		}
		if(hasStyleSheetStyle == true) {
			var typedProperty2;
			if(styleSheetDeclaration._indexedProperties == null) {
				styleSheetDeclaration.resetIndexedProperties();
				styleSheetDeclaration.resetPropertiesPositions();
			}
			typedProperty2 = styleSheetDeclaration._indexedProperties[propertyIndex];
			if(typedProperty2 != null) return this.setProperty(propertyIndex,typedProperty2,parentStyleDeclaration,initialStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,false,false);
		}
		if((function($this) {
			var $r;
			switch(propertyIndex) {
			case 40:case 54:case 37:case 34:case 36:case 38:case 35:case 43:case 41:case 46:case 47:case 42:case 49:case 45:case 44:
				$r = true;
				break;
			default:
				$r = false;
			}
			return $r;
		}(this)) == true) {
			if((function($this) {
				var $r;
				if(parentStyleDeclaration._indexedProperties == null) {
					parentStyleDeclaration.resetIndexedProperties();
					parentStyleDeclaration.resetPropertiesPositions();
				}
				$r = parentStyleDeclaration._indexedProperties[propertyIndex];
				return $r;
			}(this)) != null) return this.setProperty(propertyIndex,(function($this) {
				var $r;
				if(parentStyleDeclaration._indexedProperties == null) {
					parentStyleDeclaration.resetIndexedProperties();
					parentStyleDeclaration.resetPropertiesPositions();
				}
				$r = parentStyleDeclaration._indexedProperties[propertyIndex];
				return $r;
			}(this)),parentStyleDeclaration,initialStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,true,false); else return this.setInitialProperty(propertyIndex);
		}
		return this.setInitialProperty(propertyIndex);
	}
	,setInitialProperty: function(propertyIndex) {
		if(this.specifiedValues.getTypedProperty(propertyIndex) != null) {
			this.specifiedValues.removeProperty(propertyIndex);
			this.computedValues.removeProperty(propertyIndex);
			this.htmlElement.invalidateStyle(propertyIndex);
			return true;
		} else if(this.computedValues.getTypedProperty(propertyIndex) != null) this.computedValues.removeProperty(propertyIndex);
		return false;
	}
	,setProperty: function(propertyIndex,cascadedProperty,parentStyleDeclaration,initialStyleDeclaration,parentColor,parentRelativeLengthReference,relativeLengthReference,programmaticChange,isInherited,isInitial) {
		var property = cascadedProperty.typedValue;
		var specifiedProperty = this.specifiedValues.getTypedProperty(propertyIndex);
		if(specifiedProperty != null) {
			if(property == specifiedProperty.typedValue) return false;
		}
		if(specifiedProperty != null) this.specifiedValues.setTypedProperty(propertyIndex,property,cascadedProperty.important); else this.specifiedValues.setTypedPropertyInitial(propertyIndex,property,cascadedProperty.important);
		var computedProperty = null;
		if(isInitial == false) switch(property[1]) {
		case 16:
			computedProperty = ((function($this) {
				var $r;
				if(parentStyleDeclaration._indexedProperties == null) {
					parentStyleDeclaration.resetIndexedProperties();
					parentStyleDeclaration.resetPropertiesPositions();
				}
				$r = parentStyleDeclaration._indexedProperties[propertyIndex];
				return $r;
			}(this))).typedValue;
			isInherited = true;
			break;
		case 17:
			computedProperty = ((function($this) {
				var $r;
				if(initialStyleDeclaration._indexedProperties == null) {
					initialStyleDeclaration.resetIndexedProperties();
					initialStyleDeclaration.resetPropertiesPositions();
				}
				$r = initialStyleDeclaration._indexedProperties[propertyIndex];
				return $r;
			}(this))).typedValue;
			break;
		default:
			computedProperty = this.getComputedProperty(propertyIndex,property,parentRelativeLengthReference,relativeLengthReference,parentColor);
		} else computedProperty = this.getComputedProperty(propertyIndex,property,parentRelativeLengthReference,relativeLengthReference,parentColor);
		var registerPengingComputedProperty = false;
		if(this.hasTransitionnableProperties == true) {
			if(programmaticChange == true && isInherited == false) {
				if(this.isTransitionnable(propertyIndex)) {
					if(this._transitioner == null) this.initTransitioner();
					var transition = this._transitionManager.getTransition(propertyIndex,this);
					if(transition != null) {
						registerPengingComputedProperty = true;
						switch(computedProperty[1]) {
						case 18:
							var value = computedProperty[2];
							var didRevert = this._transitioner.revertTransitionIfNeeded(transition,value,this);
							if(didRevert == true) registerPengingComputedProperty = false;
							break;
						default:
						}
					} else {
						this._transitioner.registerPendingTransition(propertyIndex,this.getTransitionablePropertyCurrentValue(propertyIndex));
						var htmlDocument = this.htmlElement.ownerDocument;
						htmlDocument.invalidationManager.invalidatePendingTransitions();
					}
				}
			}
		}
		if(specifiedProperty != null) {
			if(registerPengingComputedProperty == false) this.computedValues.setTypedProperty(propertyIndex,computedProperty,cascadedProperty.important); else {
				if(this._pendingComputedValues == null) this.initPendingComputedValues();
				var typedComputedProperty = new cocktail_core_css_TypedPropertyVO();
				typedComputedProperty.important = cascadedProperty.important;
				typedComputedProperty.index = propertyIndex;
				typedComputedProperty.typedValue = computedProperty;
				this._pendingComputedValues[propertyIndex] = typedComputedProperty;
			}
		} else if(registerPengingComputedProperty == false) this.computedValues.setTypedPropertyInitial(propertyIndex,computedProperty,cascadedProperty.important);
		this.htmlElement.invalidateStyle(propertyIndex);
		return true;
	}
	,getComputedProperty: function(propertyIndex,property,parentRelativeLengthReference,relativeLengthReference,parentColor) {
		switch(propertyIndex) {
		case 19:case 17:case 18:case 20:case 22:case 23:case 21:case 24:case 11:case 12:case 13:case 14:case 8:case 6:case 9:case 7:case 15:case 16:
			switch(property[1]) {
			case 7:
				var value = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value,relativeLengthReference));
			case 0:
				var value1 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value1);
			default:
			}
			break;
		case 62:case 63:case 64:case 65:case 82:
			switch(property[1]) {
			case 7:
				var value2 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value2,relativeLengthReference));
			case 0:
				var value3 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value3);
			case 4:
				var value4 = property[2];
				switch(value4[1]) {
				case 73:case 61:case 74:
					return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getBorderWidthFromBorderWidthKeyword(value4));
				default:
				}
				break;
			default:
			}
			break;
		case 57:
			switch(property[1]) {
			case 4:
				var value5 = property[2];
				switch(value5[1]) {
				case 11:
					return cocktail_core_css_CSSPropertyValue.IDENTIFIER("left");
				case 12:
					return cocktail_core_css_CSSPropertyValue.IDENTIFIER("right");
				case 22:
					return cocktail_core_css_CSSPropertyValue.IDENTIFIER("top");
				case 25:
					return cocktail_core_css_CSSPropertyValue.IDENTIFIER("bottom");
				default:
				}
				break;
			case 15:
				var value6 = property[2];
				var length = value6.length;
				var _g = 0;
				while(_g < length) {
					var i = _g++;
					{
						var _g1 = value6[i];
						switch(_g1[1]) {
						case 4:
							var keyword = _g1[2];
							switch(keyword[1]) {
							case 11:
								value6[i] = cocktail_core_css_CSSPropertyValue.IDENTIFIER("left");
								break;
							case 12:
								value6[i] = cocktail_core_css_CSSPropertyValue.IDENTIFIER("right");
								break;
							case 22:
								value6[i] = cocktail_core_css_CSSPropertyValue.IDENTIFIER("top");
								break;
							case 25:
								value6[i] = cocktail_core_css_CSSPropertyValue.IDENTIFIER("bottom");
								break;
							default:
							}
							break;
						default:
						}
					}
				}
				break;
			default:
			}
			break;
		case 53:
			switch(property[1]) {
			case 1:
				var value7 = property[2];
				if(value7 > 1) return cocktail_core_css_CSSPropertyValue.NUMBER(1);
				if(value7 < 0) return cocktail_core_css_CSSPropertyValue.NUMBER(0);
				break;
			case 0:
				var value8 = property[2];
				if(value8 < 0) return cocktail_core_css_CSSPropertyValue.NUMBER(0);
				if(value8 > 1) return cocktail_core_css_CSSPropertyValue.NUMBER(1);
				return cocktail_core_css_CSSPropertyValue.NUMBER(value8);
			default:
			}
			break;
		case 34:
			switch(property[1]) {
			case 7:
				var value9 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value9,parentRelativeLengthReference));
			case 2:
				var value10 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(parentRelativeLengthReference.em * (value10 * 0.01));
			case 4:
				var value11 = property[2];
				switch(value11[1]) {
				case 58:case 59:case 60:case 61:case 62:case 63:case 64:
					return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getFontSizeFromAbsoluteSizeValue(value11));
				case 65:case 66:
					return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getFontSizeFromRelativeSizeValue(value11,parentRelativeLengthReference.em));
				default:
				}
				break;
			default:
			}
			break;
		case 61:
			switch(property[1]) {
			case 4:
				var value12 = property[2];
				break;
			default:
			}
			break;
		case 35:
			switch(property[1]) {
			case 4:
				var value13 = property[2];
				break;
			default:
			}
			break;
		case 48:
			switch(property[1]) {
			case 0:
				var value14 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0);
			case 7:
				var value15 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value15,relativeLengthReference));
			default:
			}
			break;
		case 54:
			switch(property[1]) {
			case 5:
				var value16 = property[2];
				break;
			default:
			}
			break;
		case 41:
			switch(property[1]) {
			case 1:
				var value17 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value17 * relativeLengthReference.em);
			case 0:
				var value18 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value18 * relativeLengthReference.em);
			case 7:
				var value19 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value19,relativeLengthReference));
			case 2:
				var value20 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(relativeLengthReference.em * (value20 * 0.01));
			default:
			}
			break;
		case 47:
			switch(property[1]) {
			case 7:
				var value21 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value21,relativeLengthReference));
			case 0:
				var value22 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value22);
			default:
			}
			break;
		case 43:
			switch(property[1]) {
			case 7:
				var value23 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value23,relativeLengthReference));
			default:
			}
			break;
		case 44:
			switch(property[1]) {
			case 7:
				var value24 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value24,relativeLengthReference));
			case 4:
				var value25 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0);
			default:
			}
			break;
		case 40:
			switch(property[1]) {
			case 12:
				var value26 = property[2];
				return cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSValueConverter.getComputedCSSColorFromCSSColor(value26,parentColor));
			default:
			}
			break;
		case 25:case 67:case 68:case 69:case 70:case 84:
			switch(property[1]) {
			case 12:
				var value27 = property[2];
				return cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSValueConverter.getComputedCSSColorFromCSSColor(value27,this.getColor(this.getComputedOrInitialProperty(40))));
			default:
			}
			break;
		case 26:
			switch(property[1]) {
			case 4:
				var value28 = property[2];
				break;
			case 5:
				var value29 = property[2];
				break;
			default:
			}
			break;
		case 30:
			switch(property[1]) {
			case 4:
				var value30 = property[2];
				switch(value30[1]) {
				case 11:case 12:
					return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(value30),cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CENTER)]);
				case 22:case 25:
					return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CENTER),cocktail_core_css_CSSPropertyValue.KEYWORD(value30)]);
				default:
					return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(value30),cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CENTER)]);
				}
				break;
			case 0:
				var value31 = property[2];
				return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0),cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0)]);
			case 7:
				var value32 = property[2];
				return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value32,relativeLengthReference)),cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CENTER)]);
			case 2:
				var value33 = property[2];
				return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.PERCENTAGE(value33),cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CENTER)]);
			case 13:
				var value34 = property[2];
				var backgroundPositionX = null;
				var backgroundPositionY = null;
				var firstValueIsBackgroundPositionY = false;
				{
					var _g2 = value34[0];
					switch(_g2[1]) {
					case 7:
						var value35 = _g2[2];
						backgroundPositionX = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value35,relativeLengthReference));
						break;
					case 4:
						var keywordValue = _g2[2];
						switch(keywordValue[1]) {
						case 25:case 22:
							backgroundPositionY = value34[0];
							firstValueIsBackgroundPositionY = true;
							break;
						default:
							backgroundPositionX = value34[0];
						}
						break;
					default:
						backgroundPositionX = value34[0];
					}
				}
				{
					var _g3 = value34[1];
					switch(_g3[1]) {
					case 7:
						var value36 = _g3[2];
						if(firstValueIsBackgroundPositionY == false) backgroundPositionY = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value36,relativeLengthReference)); else backgroundPositionX = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value36,relativeLengthReference));
						break;
					default:
						if(firstValueIsBackgroundPositionY == false) backgroundPositionY = value34[1]; else backgroundPositionX = value34[1];
					}
				}
				return cocktail_core_css_CSSPropertyValue.GROUP([backgroundPositionX,backgroundPositionY]);
			default:
			}
			break;
		case 27:
			switch(property[1]) {
			case 4:
				var value37 = property[2];
				switch(value37[1]) {
				case 67:
					return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT),cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT)]);
				case 72:
					return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NO_REPEAT),cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NO_REPEAT)]);
				case 71:
					return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ROUND),cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ROUND)]);
				case 70:
					return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SPACE),cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SPACE)]);
				case 68:
					return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT),cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NO_REPEAT)]);
				case 69:
					return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NO_REPEAT),cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT)]);
				default:
				}
				break;
			case 13:
				var value38 = property[2];
				break;
			default:
			}
			break;
		case 29:
			switch(property[1]) {
			case 7:
				var value39 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value39,relativeLengthReference));
			case 13:
				var value40 = property[2];
				var backgroundSizeX = null;
				var backgroundSizeY = null;
				{
					var _g4 = value40[0];
					switch(_g4[1]) {
					case 7:
						var value41 = _g4[2];
						backgroundSizeX = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value41,relativeLengthReference));
						break;
					default:
						backgroundSizeX = value40[0];
					}
				}
				{
					var _g5 = value40[1];
					switch(_g5[1]) {
					case 7:
						var value42 = _g5[2];
						backgroundSizeY = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value42,relativeLengthReference));
						break;
					default:
						backgroundSizeY = value40[1];
					}
				}
				return cocktail_core_css_CSSPropertyValue.GROUP([backgroundSizeX,backgroundSizeY]);
			default:
			}
			break;
		case 60:
			switch(property[1]) {
			case 7:
				var value43 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value43,relativeLengthReference));
			case 0:
				var value44 = property[2];
				return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value44);
			case 13:
				var value45 = property[2];
				var transformOriginX = value45[0];
				var transformOriginY = value45[1];
				{
					var _g6 = value45[0];
					switch(_g6[1]) {
					case 7:
						var value46 = _g6[2];
						transformOriginX = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value46,relativeLengthReference));
						break;
					case 0:
						var value47 = _g6[2];
						transformOriginX = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value47);
						break;
					default:
					}
				}
				{
					var _g7 = value45[1];
					switch(_g7[1]) {
					case 7:
						var value48 = _g7[2];
						transformOriginY = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value48,relativeLengthReference));
						break;
					case 0:
						var value49 = _g7[2];
						transformOriginY = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value49);
						break;
					default:
					}
				}
				return cocktail_core_css_CSSPropertyValue.GROUP([transformOriginX,transformOriginY]);
			default:
			}
			break;
		}
		return property;
	}
	,applyPositionFloatAndDisplayRelationship: function() {
		var _g = this.getKeyword(this.getComputedOrInitialProperty(1));
		switch(_g[1]) {
		case 34:case 35:
			var _g1 = this.getKeyword(this.getComputedOrInitialProperty(0));
			switch(_g1[1]) {
			case 30:case 29:
				this.computedValues.setTypedProperty(0,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BLOCK),false);
				break;
			default:
			}
			var _g11 = this.getKeyword(this.getComputedOrInitialProperty(2));
			switch(_g11[1]) {
			case 11:case 12:
				this.computedValues.setTypedProperty(2,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE),false);
				break;
			default:
			}
			break;
		default:
			var _g12 = this.getKeyword(this.getComputedOrInitialProperty(2));
			switch(_g12[1]) {
			case 11:case 12:
				var _g2 = this.getKeyword(this.getComputedOrInitialProperty(0));
				switch(_g2[1]) {
				case 30:case 29:
					this.computedValues.setTypedProperty(0,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BLOCK),false);
					break;
				default:
				}
				break;
			default:
			}
		}
	}
	,applyHiddenBordersWidth: function() {
		if(this.hasNoneOrHiddenBorderStyle(62) == true) this.computedValues.setTypedProperty(62,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0),false);
		if(this.hasNoneOrHiddenBorderStyle(63) == true) this.computedValues.setTypedProperty(63,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0),false);
		if(this.hasNoneOrHiddenBorderStyle(64) == true) this.computedValues.setTypedProperty(64,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0),false);
		if(this.hasNoneOrHiddenBorderStyle(65) == true) this.computedValues.setTypedProperty(65,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0),false);
	}
	,applyNoneOutlineWidth: function() {
		{
			var _g = this.getComputedOrInitialProperty(83);
			switch(_g[1]) {
			case 4:
				var value = _g[2];
				switch(value[1]) {
				case 18:
					this.computedValues.setTypedProperty(82,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0),false);
					break;
				default:
				}
				break;
			default:
			}
		}
	}
	,startPendingTransitions: function() {
		if(this._transitioner == null) return false;
		return this._transitioner.startPendingTransitions(this);
	}
	,endPendingTransitions: function() {
		if(this._pendingTransitionEndEvents == null) return;
		var length = this._pendingTransitionEndEvents.length;
		if(length == 0) return;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			if(this._pendingTransitionEndEvents[i] != null) {
				if(this._pendingTransitionEndEvents[i].dispatched == false) this.htmlElement.dispatchEvent(this._pendingTransitionEndEvents[i]);
			}
		}
		this._pendingTransitionEndEvents = [];
	}
	,onTransitionComplete: function(transition) {
		this.htmlElement.invalidateStyle(transition.propertyIndex);
		var htmlDocument = this.htmlElement.ownerDocument;
		htmlDocument.invalidationManager.invalidatePendingTransitions();
		var transitionEvent = new cocktail_core_event_TransitionEvent();
		transitionEvent.initTransitionEvent("transitionend",true,true,cocktail_core_css_CSSConstants.getPropertyNameFromIndex(transition.propertyIndex),transition.transitionDuration,"");
		if(this._pendingTransitionEndEvents == null) this._pendingTransitionEndEvents = [];
		this._pendingTransitionEndEvents.push(transitionEvent);
		if(this._pendingComputedValues != null) {
			if(this._pendingComputedValues[transition.propertyIndex] != null) {
				this._transitioner.registerPendingTransition(transition.propertyIndex,this.getTransitionablePropertyCurrentValue(transition.propertyIndex));
				htmlDocument.invalidationManager.invalidatePendingTransitions();
				var pendingComputedProperty = this._pendingComputedValues[transition.propertyIndex];
				this.computedValues.setTypedProperty(pendingComputedProperty.index,pendingComputedProperty.typedValue,pendingComputedProperty.important);
				this._pendingComputedValues[transition.propertyIndex] = null;
			}
		}
	}
	,onTransitionUpdate: function(transition) {
		this.htmlElement.invalidateStyle(transition.propertyIndex);
	}
	,getTransitionablePropertyValue: function(properyIndex) {
		if(this.hasTransitionnableProperties == false) return this.getComputedOrInitialProperty(properyIndex); else if(this._transitionManager.hasTransitionsInProgress == false) return this.getComputedOrInitialProperty(properyIndex); else {
			var transition = this._transitionManager.getTransition(properyIndex,this);
			if(transition != null) return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(transition.get_currentValue()); else return this.getComputedOrInitialProperty(properyIndex);
		}
	}
	,getComputedOrInitialProperty: function(propertyIndex) {
		var typedProperty = this.computedValues.getTypedProperty(propertyIndex);
		if(typedProperty == null) return this._initialComputedStyleDeclaration.getTypedProperty(propertyIndex).typedValue; else return typedProperty.typedValue;
	}
	,getIDLName: function(propertyIndex) {
		switch(propertyIndex) {
		case 17:
			return "height";
		case 18:
			return "maxHeight";
		case 19:
			return "minWidth";
		case 20:
			return "maxWidth";
		default:
			return cocktail_core_css_CSSConstants.getPropertyNameFromIndex(propertyIndex);
		}
	}
	,isTransitionnable: function(propertyIndex) {
		switch(propertyIndex) {
		case 15:case 16:case 21:case 24:case 22:case 23:case 53:
			return true;
		default:
			return false;
		}
	}
	,getTransitionablePropertyCurrentValue: function(propertyIndex) {
		switch(propertyIndex) {
		case 53:
			{
				var _g = this.getTransitionablePropertyValue(53);
				switch(_g[1]) {
				case 1:
					var value = _g[2];
					return value;
				case 18:
					var value1 = _g[2];
					return value1;
				default:
					return 0;
				}
			}
			break;
		default:
			return Reflect.field(this.usedValues,this.getIDLName(propertyIndex));
		}
	}
	,hasNoneOrHiddenBorderStyle: function(propertyIndex) {
		var borderStyle = null;
		if(propertyIndex == 62) borderStyle = this.getComputedOrInitialProperty(72); else if(propertyIndex == 63) borderStyle = this.getComputedOrInitialProperty(73); else if(propertyIndex == 64) borderStyle = this.getComputedOrInitialProperty(74); else if(propertyIndex == 65) borderStyle = this.getComputedOrInitialProperty(75); else throw new js__$Boot_HaxeError("not a border width style");
		switch(borderStyle[1]) {
		case 4:
			var value = borderStyle[2];
			switch(value[1]) {
			case 18:case 37:
				return true;
			default:
			}
			break;
		default:
		}
		return false;
	}
	,getKeyword: function(value) {
		switch(value[1]) {
		case 4:
			var value1 = value[2];
			return value1;
		default:
			throw new js__$Boot_HaxeError("not a keyword value");
		}
	}
	,getAbsoluteLength: function(value) {
		switch(value[1]) {
		case 18:
			var value1 = value[2];
			return value1;
		default:
			throw new js__$Boot_HaxeError("not an absolute length value");
		}
	}
	,getColor: function(value) {
		switch(value[1]) {
		case 12:
			var value1 = value[2];
			return value1;
		default:
			throw new js__$Boot_HaxeError("not a color value");
		}
	}
	,isAuto: function(property) {
		switch(property[1]) {
		case 4:
			var value = property[2];
			switch(value[1]) {
			case 27:
				return true;
			default:
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,isNone: function(property) {
		switch(property[1]) {
		case 4:
			var value = property[2];
			switch(value[1]) {
			case 18:
				return true;
			default:
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,__class__: cocktail_core_css_CoreStyle
};
var cocktail_core_css_DefaultCSSStyleSheet = function() {
	cocktail_core_css_CSSStyleSheet.call(this,this.getDefaultStyleSheet(),cocktail_core_css_PropertyOriginValue.USER_AGENT);
};
$hxClasses["cocktail.core.css.DefaultCSSStyleSheet"] = cocktail_core_css_DefaultCSSStyleSheet;
cocktail_core_css_DefaultCSSStyleSheet.__name__ = true;
cocktail_core_css_DefaultCSSStyleSheet.__super__ = cocktail_core_css_CSSStyleSheet;
cocktail_core_css_DefaultCSSStyleSheet.prototype = $extend(cocktail_core_css_CSSStyleSheet.prototype,{
	getDefaultStyleSheet: function() {
		return "\n\t\t\t\thtml, address,\n\t\t\t\tblockquote,\n\t\t\t\tbody, dd, div,\n\t\t\t\tdl, dt, fieldset, form,\n\t\t\t\tframe, frameset,\n\t\t\t\th1, h2, h3, h4,\n\t\t\t\th5, h6, noframes,\n\t\t\t\tol, p, ul, center,\n\t\t\t\tdir, hr, menu, pre, nav   { display: block; unicode-bidi: embed }\n\t\t\t\tli              { display: block }\n\t\t\t\thead            { display: none }\n\t\t\t\ttable           { display: table }\n\t\t\t\ttr              { display: table-row }\n\t\t\t\tthead           { display: table-header-group }\n\t\t\t\ttbody           { display: table-row-group }\n\t\t\t\ttfoot           { display: table-footer-group }\n\t\t\t\tcol             { display: table-column }\n\t\t\t\tcolgroup        { display: table-column-group }\n\t\t\t\ttd, th          { display: table-cell }\n\t\t\t\tcaption         { display: table-caption }\n\t\t\t\tth              { font-weight: bolder; text-align: center }\n\t\t\t\tcaption         { text-align: center }\n\t\t\t\tbody            { margin: 8px }\n\t\t\t\th1              { font-size: 2em; margin: .67em 0 }\n\t\t\t\th2              { font-size: 1.5em; margin: .75em 0 }\n\t\t\t\th3              { font-size: 1.17em; margin: .83em 0 }\n\t\t\t\th4, p,\n\t\t\t\tblockquote, ul,\n\t\t\t\tfieldset, form,\n\t\t\t\tol, dl, dir,\n\t\t\t\tmenu            { margin: 1em 0 }\n\t\t\t\th5              { font-size: .83em; margin: 1.5em 0 }\n\t\t\t\th6              { font-size: .75em; margin: 1.67em 0 }\n\t\t\t\th1, h2, h3, h4,\n\t\t\t\th5, h6, b,\n\t\t\t\tstrong          { font-weight: bolder }\n\t\t\t\tblockquote      { margin-left: 40px; margin-right: 40px }\n\t\t\t\ti, cite, em,\n\t\t\t\tvar, address    { font-style: italic }\n\t\t\t\tpre, tt, code,\n\t\t\t\tkbd, samp       { font-family: monospace }\n\t\t\t\tpre             { white-space: pre }\n\t\t\t\tbutton, textarea,\n\t\t\t\tinput, select   { display: inline-block }\n\t\t\t\tbig             { font-size: 1.17em }\n\t\t\t\tsmall, sub, sup { font-size: .83em }\n\t\t\t\tsub             { vertical-align: sub }\n\t\t\t\tsup             { vertical-align: super }\n\t\t\t\ttable           { border-spacing: 2px; }\n\t\t\t\tthead, tbody,\n\t\t\t\ttfoot           { vertical-align: middle }\n\t\t\t\ttd, th, tr      { vertical-align: inherit }\n\t\t\t\ts, strike, del  { text-decoration: line-through }\n\t\t\t\thr              { border: 1px inset }\n\t\t\t\tol, ul, dir,\n\t\t\t\tmenu, dd        { padding-left: 40px }\n\t\t\t\tol              { list-style-type: decimal }\n\t\t\t\tol ul, ul ol,\n\t\t\t\tul ul, ol ol    { margin-top: 0; margin-bottom: 0 }\n\t\t\t\tu, ins          { text-decoration: underline }\n\t\t\t\t\n\t\t\t\tcenter          { text-align: center }\n\t\t\t\t:link, :visited { text-decoration: underline; cursor:pointer; }\n\t\t\t\t:focus          { outline: thin dotted invert }\n\t\t\t\t\n\t\t\t\ta:link          { color: rgb(0, 0, 238) }\n\t\t\t\ta:active        { color: red }\n\t\t";
	}
	,__class__: cocktail_core_css_DefaultCSSStyleSheet
});
var cocktail_core_css_InitialStyleDeclaration = function() {
	cocktail_core_css_CSSStyleDeclaration.call(this);
	this.initSupportedCSSProperties();
	this.initLengthCSSProperties();
	this.initColorCSSProperties();
	this.initProperties();
	this.initComputedProperties();
};
$hxClasses["cocktail.core.css.InitialStyleDeclaration"] = cocktail_core_css_InitialStyleDeclaration;
cocktail_core_css_InitialStyleDeclaration.__name__ = true;
cocktail_core_css_InitialStyleDeclaration._instance = null;
cocktail_core_css_InitialStyleDeclaration.getInstance = function() {
	if(cocktail_core_css_InitialStyleDeclaration._instance == null) cocktail_core_css_InitialStyleDeclaration._instance = new cocktail_core_css_InitialStyleDeclaration();
	return cocktail_core_css_InitialStyleDeclaration._instance;
};
cocktail_core_css_InitialStyleDeclaration.__super__ = cocktail_core_css_CSSStyleDeclaration;
cocktail_core_css_InitialStyleDeclaration.prototype = $extend(cocktail_core_css_CSSStyleDeclaration.prototype,{
	initLengthCSSProperties: function() {
		this.lengthCSSProperties = [15,16,21,22,24,23,17,18,19,20,48,41,6,7,8,9,11,12,13,14,22,23,21,24,43,44,47,61,60,30,29,62,63,64,65,82];
	}
	,initColorCSSProperties: function() {
		this.colorCSSProperties = [25,40,67,69,68,70,84];
	}
	,initSupportedCSSProperties: function() {
		this.supportedCSSProperties = [0,1,2,3,4,51,52,49,53,48,41,15,16,19,17,20,18,6,8,7,9,11,13,12,14,22,23,21,24,37,34,36,38,35,43,44,47,46,45,42,40,57,55,56,58,61,60,25,26,30,29,27,32,28,31,54,62,63,64,65,67,68,69,70,72,73,74,75,82,83,84,86];
	}
	,initProperties: function() {
		this.pushProperty(15,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushProperty(16,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushProperty(0,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INLINE));
		this.pushProperty(1,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.STATIC));
		this.pushProperty(2,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushProperty(3,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushProperty(4,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushProperty(51,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE));
		this.pushProperty(52,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE));
		this.pushProperty(49,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE));
		this.pushProperty(53,cocktail_core_css_CSSPropertyValue.NUMBER(1.0));
		this.pushProperty(48,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BASELINE));
		this.pushProperty(41,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushProperty(20,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushProperty(18,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushProperty(19,cocktail_core_css_CSSPropertyValue.INTEGER(0));
		this.pushProperty(17,cocktail_core_css_CSSPropertyValue.INTEGER(0));
		this.pushProperty(6,cocktail_core_css_CSSPropertyValue.INTEGER(0));
		this.pushProperty(8,cocktail_core_css_CSSPropertyValue.INTEGER(0));
		this.pushProperty(7,cocktail_core_css_CSSPropertyValue.INTEGER(0));
		this.pushProperty(9,cocktail_core_css_CSSPropertyValue.INTEGER(0));
		this.pushProperty(11,cocktail_core_css_CSSPropertyValue.INTEGER(0));
		this.pushProperty(13,cocktail_core_css_CSSPropertyValue.INTEGER(0));
		this.pushProperty(12,cocktail_core_css_CSSPropertyValue.INTEGER(0));
		this.pushProperty(14,cocktail_core_css_CSSPropertyValue.INTEGER(0));
		this.pushProperty(62,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
		this.pushProperty(63,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
		this.pushProperty(64,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
		this.pushProperty(65,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
		this.pushProperty(67,cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
		this.pushProperty(68,cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
		this.pushProperty(69,cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
		this.pushProperty(70,cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
		this.pushProperty(72,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushProperty(73,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushProperty(74,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushProperty(75,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushProperty(82,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
		this.pushProperty(83,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushProperty(84,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INVERT));
		this.pushProperty(22,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushProperty(23,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushProperty(21,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushProperty(24,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushProperty(36,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushProperty(38,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushProperty(35,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushProperty(34,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
		this.pushProperty(43,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushProperty(44,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushProperty(47,cocktail_core_css_CSSPropertyValue.INTEGER(0));
		this.pushProperty(46,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LEFT));
		this.pushProperty(45,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushProperty(42,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushProperty(86,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushProperty(57,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ALL));
		this.pushProperty(55,cocktail_core_css_CSSPropertyValue.TIME(cocktail_core_css_CSSTimeValue.SECONDS(0)));
		this.pushProperty(56,cocktail_core_css_CSSPropertyValue.TIME(cocktail_core_css_CSSTimeValue.SECONDS(0)));
		this.pushProperty(58,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.EASE));
		this.pushProperty(61,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushProperty(60,cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.PERCENTAGE(50),cocktail_core_css_CSSPropertyValue.PERCENTAGE(50)]));
		this.pushProperty(25,cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.TRANSPARENT));
		this.pushProperty(26,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushProperty(30,cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.PERCENTAGE(0.0),cocktail_core_css_CSSPropertyValue.PERCENTAGE(0.0)]));
		this.pushProperty(29,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushProperty(27,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT));
		this.pushProperty(31,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BORDER_BOX));
		this.pushProperty(28,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.PADDING_BOX));
		this.pushProperty(32,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SCROLL));
		this.pushProperty(54,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushProperty(37,cocktail_core_css_CSSPropertyValue.CSS_LIST([cocktail_core_css_CSSPropertyValue.STRING(cocktail_core_config_Config.getInstance().defaultFont)]));
		this.pushProperty(40,cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
	}
	,pushProperty: function(index,typedValue) {
		this.setTypedPropertyInitial(index,typedValue,false);
	}
	,initComputedProperties: function() {
		this.initialComputedStyleDeclaration = new cocktail_core_css_CSSStyleDeclaration();
		this.pushComputedProperty(15,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushComputedProperty(16,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushComputedProperty(0,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INLINE));
		this.pushComputedProperty(1,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.STATIC));
		this.pushComputedProperty(2,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushComputedProperty(3,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushComputedProperty(4,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushComputedProperty(51,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE));
		this.pushComputedProperty(52,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE));
		this.pushComputedProperty(49,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE));
		this.pushComputedProperty(53,cocktail_core_css_CSSPropertyValue.NUMBER(1.0));
		this.pushComputedProperty(48,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BASELINE));
		this.pushComputedProperty(41,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushComputedProperty(20,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushComputedProperty(18,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushComputedProperty(19,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
		this.pushComputedProperty(17,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
		this.pushComputedProperty(6,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
		this.pushComputedProperty(8,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
		this.pushComputedProperty(7,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
		this.pushComputedProperty(9,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
		this.pushComputedProperty(11,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
		this.pushComputedProperty(13,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
		this.pushComputedProperty(12,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
		this.pushComputedProperty(14,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
		this.pushComputedProperty(62,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_config_Config.getInstance().mediumBorderWidth));
		this.pushComputedProperty(63,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_config_Config.getInstance().mediumBorderWidth));
		this.pushComputedProperty(64,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_config_Config.getInstance().mediumBorderWidth));
		this.pushComputedProperty(65,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_config_Config.getInstance().mediumBorderWidth));
		this.pushComputedProperty(67,cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
		this.pushComputedProperty(68,cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
		this.pushComputedProperty(69,cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
		this.pushComputedProperty(70,cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
		this.pushComputedProperty(72,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushComputedProperty(73,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushComputedProperty(74,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushComputedProperty(75,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushComputedProperty(82,cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_config_Config.getInstance().mediumBorderWidth));
		this.pushComputedProperty(83,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushComputedProperty(84,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INVERT));
		this.pushComputedProperty(22,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushComputedProperty(23,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushComputedProperty(21,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushComputedProperty(24,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushComputedProperty(36,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushComputedProperty(38,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushComputedProperty(35,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushComputedProperty(34,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
		this.pushComputedProperty(43,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushComputedProperty(44,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushComputedProperty(47,cocktail_core_css_CSSPropertyValue.INTEGER(0));
		this.pushComputedProperty(46,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LEFT));
		this.pushComputedProperty(45,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
		this.pushComputedProperty(42,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushComputedProperty(86,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushComputedProperty(57,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ALL));
		this.pushComputedProperty(55,cocktail_core_css_CSSPropertyValue.TIME(cocktail_core_css_CSSTimeValue.SECONDS(0)));
		this.pushComputedProperty(56,cocktail_core_css_CSSPropertyValue.TIME(cocktail_core_css_CSSTimeValue.SECONDS(0)));
		this.pushComputedProperty(58,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.EASE));
		this.pushComputedProperty(61,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushComputedProperty(60,cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.PERCENTAGE(50),cocktail_core_css_CSSPropertyValue.PERCENTAGE(50)]));
		this.pushComputedProperty(25,cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.TRANSPARENT));
		this.pushComputedProperty(26,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
		this.pushComputedProperty(30,cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.PERCENTAGE(0.0),cocktail_core_css_CSSPropertyValue.PERCENTAGE(0.0)]));
		this.pushComputedProperty(29,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushComputedProperty(27,cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT),cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT)]));
		this.pushComputedProperty(31,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BORDER_BOX));
		this.pushComputedProperty(28,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.PADDING_BOX));
		this.pushComputedProperty(32,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SCROLL));
		this.pushComputedProperty(54,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		this.pushProperty(37,cocktail_core_css_CSSPropertyValue.CSS_LIST([cocktail_core_css_CSSPropertyValue.STRING(cocktail_core_config_Config.getInstance().defaultFont)]));
		this.pushProperty(40,cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
	}
	,pushComputedProperty: function(index,typedValue) {
		this.initialComputedStyleDeclaration.setTypedProperty(index,typedValue,false);
	}
	,__class__: cocktail_core_css_InitialStyleDeclaration
});
var cocktail_core_css_SelectorManager = function() {
	this._selectorSpecificityVO = new cocktail_core_css_SelectorSpecificityVO();
};
$hxClasses["cocktail.core.css.SelectorManager"] = cocktail_core_css_SelectorManager;
cocktail_core_css_SelectorManager.__name__ = true;
cocktail_core_css_SelectorManager.prototype = {
	matchSelector: function(node,selector,matchedPseudoClasses) {
		var components = selector.components;
		var lastWasCombinator = false;
		var length = components.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var component = components[i];
			var matched = false;
			switch(component[1]) {
			case 1:
				var value = component[2];
				matched = this.matchCombinator(node,value,components[i + 1],matchedPseudoClasses);
				lastWasCombinator = true;
				if(value == cocktail_core_css_CombinatorValue.CHILD) node = this.castToHTMLElement(node.parentNode);
				break;
			case 0:
				var value1 = component[2];
				if(lastWasCombinator == true) {
					matched = true;
					lastWasCombinator = false;
				} else matched = this.matchSimpleSelectorSequence(node,value1,matchedPseudoClasses);
				break;
			}
			if(matched == false) return false;
		}
		return true;
	}
	,matchCombinator: function(node,combinator,nextSelectorComponent,matchedPseudoClasses) {
		if(node.parentNode == null) return false;
		var nextSelectorSequence = null;
		switch(nextSelectorComponent[1]) {
		case 0:
			var value = nextSelectorComponent[2];
			nextSelectorSequence = value;
			break;
		case 1:
			var value1 = nextSelectorComponent[2];
			return false;
		}
		switch(combinator[1]) {
		case 2:
			return this.matchAdjacentSiblingCombinator(node,nextSelectorSequence,matchedPseudoClasses);
		case 3:
			return this.matchGeneralSiblingCombinator(node,nextSelectorSequence,matchedPseudoClasses);
		case 1:
			return this.matchChildCombinator(node,nextSelectorSequence,matchedPseudoClasses);
		case 0:
			return this.matchDescendantCombinator(node,nextSelectorSequence,matchedPseudoClasses);
		}
	}
	,matchGeneralSiblingCombinator: function(node,nextSelectorSequence,matchedPseudoClasses) {
		var previousElementSibling = node.get_previousElementSibling();
		while(previousElementSibling != null) {
			if(this.matchSimpleSelectorSequence(previousElementSibling,nextSelectorSequence,matchedPseudoClasses) == true) return true;
			previousElementSibling = previousElementSibling.get_previousElementSibling();
		}
		return false;
	}
	,matchAdjacentSiblingCombinator: function(node,nextSelectorSequence,matchedPseudoClasses) {
		var previousElementSibling = node.get_previousElementSibling();
		if(previousElementSibling == null) return false;
		return this.matchSimpleSelectorSequence(previousElementSibling,nextSelectorSequence,matchedPseudoClasses);
	}
	,matchDescendantCombinator: function(node,nextSelectorSequence,matchedPseudoClasses) {
		var parentNode = this.castToHTMLElement(node.parentNode);
		while(parentNode != null) {
			if(this.matchSimpleSelectorSequence(parentNode,nextSelectorSequence,matchedPseudoClasses) == true) return true;
			parentNode = this.castToHTMLElement(parentNode.parentNode);
		}
		return false;
	}
	,matchChildCombinator: function(node,nextSelectorSequence,matchedPseudoClasses) {
		return this.matchSimpleSelectorSequence(node.parentNode,nextSelectorSequence,matchedPseudoClasses);
	}
	,matchSimpleSelectorSequenceStart: function(node,simpleSelectorSequenceStart) {
		switch(simpleSelectorSequenceStart[1]) {
		case 1:
			var value = simpleSelectorSequenceStart[2];
			return node.tagName == value;
		case 0:
			return true;
		}
	}
	,matchSimpleSelectorSequenceItem: function(node,simpleSelectorSequenceItem,matchedPseudoClasses) {
		switch(simpleSelectorSequenceItem[1]) {
		case 2:
			var value = simpleSelectorSequenceItem[2];
			var classList = node.classList;
			if(classList == null) return false;
			var length = classList.length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				if(value == classList[i]) return true;
			}
			return false;
		case 3:
			var value1 = simpleSelectorSequenceItem[2];
			return node.get_id() == value1;
		case 1:
			var value2 = simpleSelectorSequenceItem[2];
			return this.matchPseudoClassSelector(node,value2,matchedPseudoClasses);
		case 0:
			var value3 = simpleSelectorSequenceItem[2];
			return this.matchAttributeSelector(node,value3);
		}
	}
	,matchSimpleSelectorSequence: function(node,simpleSelectorSequence,matchedPseudoClasses) {
		if(this.matchSimpleSelectorSequenceStart(node,simpleSelectorSequence.startValue) == false) return false;
		var simpleSelectors = simpleSelectorSequence.simpleSelectors;
		var length = simpleSelectors.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var simpleSelectorSequence1 = simpleSelectors[i];
			if(this.matchSimpleSelectorSequenceItem(node,simpleSelectorSequence1,matchedPseudoClasses) == false) return false;
		}
		return true;
	}
	,matchAttributeSelector: function(node,attributeSelector) {
		switch(attributeSelector[1]) {
		case 0:
			var value = attributeSelector[2];
			return node.getAttribute(value) != null;
		case 1:
			var value1 = attributeSelector[3];
			var name = attributeSelector[2];
			return node.getAttribute(name) == value1;
		case 2:
			var value2 = attributeSelector[3];
			var name1 = attributeSelector[2];
			return this.matchAttributeList(node,name1,value2);
		case 3:
			var value3 = attributeSelector[3];
			var name2 = attributeSelector[2];
			return this.matchAttributeBeginValue(node,name2,value3);
		case 5:
			var value4 = attributeSelector[3];
			var name3 = attributeSelector[2];
			return this.matchAttributeContainsValue(node,name3,value4);
		case 4:
			var value5 = attributeSelector[3];
			var name4 = attributeSelector[2];
			return this.matchAttributeEndValue(node,name4,value5);
		case 6:
			var value6 = attributeSelector[3];
			var name5 = attributeSelector[2];
			return this.matchAttributeBeginsHyphenList(node,name5,value6);
		}
		return true;
	}
	,matchAttributeBeginsHyphenList: function(node,name,value) {
		var attributeValue = node.getAttribute(name);
		if(attributeValue == null) return false;
		if(attributeValue == value) return true;
		var hyphenValue = value + "-";
		return HxOverrides.substr(attributeValue,0,hyphenValue.length) == hyphenValue;
	}
	,matchAttributeEndValue: function(node,name,value) {
		var attributeValue = node.getAttribute(name);
		if(attributeValue == null) return false;
		return attributeValue.lastIndexOf(value) == attributeValue.length - value.length;
	}
	,matchAttributeContainsValue: function(node,name,value) {
		var attributeValue = node.getAttribute(name);
		if(attributeValue == null) return false;
		return attributeValue.indexOf(value) != -1;
	}
	,matchAttributeBeginValue: function(node,name,value) {
		var attributeValue = node.getAttribute(name);
		if(attributeValue == null) return false;
		return attributeValue.indexOf(value) == 0;
	}
	,matchAttributeList: function(node,name,value) {
		var attributeValue = node.getAttribute(name);
		if(attributeValue == null) return false;
		var attributeValueAsList = attributeValue.split(" ");
		var _g1 = 0;
		var _g = attributeValueAsList.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(attributeValueAsList[i] == value) return true;
		}
		return false;
	}
	,matchPseudoClassSelector: function(node,pseudoClassSelector,matchedPseudoClasses) {
		switch(pseudoClassSelector[1]) {
		case 1:
			var value = pseudoClassSelector[2];
			return this.matchStructuralPseudoClassSelector(node,value);
		case 2:
			var value1 = pseudoClassSelector[2];
			return this.matchLinkPseudoClassSelector(node,value1,matchedPseudoClasses);
		case 6:
			var value2 = pseudoClassSelector[2];
			return this.matchUserActionPseudoClassSelector(node,value2,matchedPseudoClasses);
		case 3:
			return this.matchTargetPseudoClassSelector(node);
		case 8:
			var value3 = pseudoClassSelector[2];
			return this.matchNegationPseudoClassSelector(node,value3);
		case 5:
			var value4 = pseudoClassSelector[2];
			return this.matchLangPseudoClassSelector(node,value4);
		case 7:
			var value5 = pseudoClassSelector[2];
			return this.matchUIElementStatesSelector(node,value5,matchedPseudoClasses);
		case 4:
			return matchedPseudoClasses.fullscreen;
		case 0:
			return false;
		}
	}
	,matchUIElementStatesSelector: function(node,uiElementState,matchedPseudoClasses) {
		switch(uiElementState[1]) {
		case 2:
			return matchedPseudoClasses.checked;
		case 1:
			return matchedPseudoClasses.disabled;
		case 0:
			return matchedPseudoClasses.enabled;
		}
	}
	,matchNegationPseudoClassSelector: function(node,negationSimpleSelectorSequence) {
		return false;
	}
	,matchLangPseudoClassSelector: function(node,lang) {
		return false;
	}
	,matchStructuralPseudoClassSelector: function(node,structuralPseudoClassSelector) {
		switch(structuralPseudoClassSelector[1]) {
		case 7:
			return node.hasChildNodes();
		case 1:
			if(node.parentNode == null) return false;
			return node.get_previousElementSibling() == null;
		case 2:
			if(node.parentNode == null) return false;
			return node.get_nextElementSibling() == null;
		case 5:
			if(node.parentNode == null) return false;
			return node.parentNode.childNodes.length == 1;
		case 0:
			return node.tagName == "HTML" && node.parentNode == null;
		case 6:
			return this.matchOnlyOfType(node);
		case 3:
			return this.matchFirstOfType(node);
		case 4:
			return this.matchLastOfType(node);
		case 8:
			var value = structuralPseudoClassSelector[2];
			return this.matchNthChild(node,value);
		case 9:
			var value1 = structuralPseudoClassSelector[2];
			return this.matchNthLastChild(node,value1);
		case 11:
			var value2 = structuralPseudoClassSelector[2];
			return this.matchNthLastOfType(node,value2);
		case 10:
			var value3 = structuralPseudoClassSelector[2];
			return this.matchNthOfType(node,value3);
		}
	}
	,matchNthChild: function(node,value) {
		return false;
	}
	,matchNthLastChild: function(node,value) {
		return false;
	}
	,matchNthLastOfType: function(node,value) {
		return false;
	}
	,matchNthOfType: function(node,value) {
		return false;
	}
	,matchFirstOfType: function(node) {
		var type = node.tagName;
		var previousElementSibling = node.get_previousElementSibling();
		while(previousElementSibling != null) {
			if(previousElementSibling.tagName == type) return false;
			previousElementSibling = previousElementSibling.get_previousElementSibling();
		}
		return true;
	}
	,matchLastOfType: function(node) {
		var type = node.tagName;
		var nextElementSibling = node.get_nextElementSibling();
		while(nextElementSibling != null) {
			if(nextElementSibling.tagName == type) return false;
			nextElementSibling = nextElementSibling.get_nextElementSibling();
		}
		return true;
	}
	,matchOnlyOfType: function(node) {
		return this.matchLastOfType(node) == true && this.matchFirstOfType(node) == true;
	}
	,matchLinkPseudoClassSelector: function(node,linkPseudoClassSelector,matchedPseudoClass) {
		switch(linkPseudoClassSelector[1]) {
		case 0:
			return matchedPseudoClass.link;
		case 1:
			return false;
		}
	}
	,matchUserActionPseudoClassSelector: function(node,userActionPseudoClassSelector,matchedPseudoClass) {
		switch(userActionPseudoClassSelector[1]) {
		case 0:
			return matchedPseudoClass.active;
		case 1:
			return matchedPseudoClass.hover;
		case 2:
			return matchedPseudoClass.focus;
		}
	}
	,matchTargetPseudoClassSelector: function(node) {
		return false;
	}
	,getSelectorSpecifity: function(selector) {
		this._selectorSpecificityVO.classAttributesAndPseudoClassesNumber = 0;
		this._selectorSpecificityVO.idSelectorsNumber = 0;
		this._selectorSpecificityVO.typeAndPseudoElementsNumber = 0;
		var _g = selector.pseudoElement;
		switch(_g[1]) {
		case 2:case 1:case 4:case 3:
			this._selectorSpecificityVO.typeAndPseudoElementsNumber++;
			break;
		case 0:
			break;
		}
		var components = selector.components;
		var length = components.length;
		var _g1 = 0;
		while(_g1 < length) {
			var i = _g1++;
			var component = components[i];
			switch(component[1]) {
			case 1:
				var value = component[2];
				break;
			case 0:
				var value1 = component[2];
				this.getSimpleSelectorSequenceSpecificity(value1,this._selectorSpecificityVO);
				break;
			}
		}
		return this._selectorSpecificityVO.idSelectorsNumber * 100 + this._selectorSpecificityVO.classAttributesAndPseudoClassesNumber * 10 + this._selectorSpecificityVO.typeAndPseudoElementsNumber;
	}
	,getSimpleSelectorSequenceSpecificity: function(simpleSelectorSequence,selectorSpecificity) {
		this.getSimpleSelectorSequenceStartSpecificity(simpleSelectorSequence.startValue,selectorSpecificity);
		var simpleSelectors = simpleSelectorSequence.simpleSelectors;
		var length = simpleSelectors.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var simpleSelectorSequenceItem = simpleSelectors[i];
			this.getSimpleSelectorSequenceItemSpecificity(simpleSelectorSequenceItem,selectorSpecificity);
		}
	}
	,getSimpleSelectorSequenceStartSpecificity: function(simpleSelectorSequenceStart,selectorSpecificity) {
		switch(simpleSelectorSequenceStart[1]) {
		case 1:
			var value = simpleSelectorSequenceStart[2];
			selectorSpecificity.typeAndPseudoElementsNumber++;
			break;
		case 0:
			break;
		}
	}
	,getSimpleSelectorSequenceItemSpecificity: function(simpleSelectorSequenceItem,selectorSpecificity) {
		switch(simpleSelectorSequenceItem[1]) {
		case 0:
			var value = simpleSelectorSequenceItem[2];
			selectorSpecificity.classAttributesAndPseudoClassesNumber++;
			break;
		case 1:
			var value1 = simpleSelectorSequenceItem[2];
			selectorSpecificity.classAttributesAndPseudoClassesNumber++;
			break;
		case 2:
			var value2 = simpleSelectorSequenceItem[2];
			selectorSpecificity.classAttributesAndPseudoClassesNumber++;
			break;
		case 3:
			var value3 = simpleSelectorSequenceItem[2];
			selectorSpecificity.idSelectorsNumber++;
			break;
		}
	}
	,castToHTMLElement: function(node) {
		var _g = node.get_nodeType();
		switch(_g) {
		case 1:
			return js_Boot.__cast(node , cocktail_core_html_HTMLElement);
		default:
			return null;
		}
	}
	,__class__: cocktail_core_css_SelectorManager
};
var cocktail_core_css_StyleManager = function(selectorManager) {
	this._styleSheets = [];
	this._matchingStyleDeclaration = [];
	this._mostSpecificMatchingProperties = [];
	this._matchingProperties = [];
	this._matchedProperties = [];
	this._userAgentDeclarations = [];
	this._authorNormalDeclarations = [];
	this._authorImportantDeclarations = [];
	this._selectorManager = selectorManager;
};
$hxClasses["cocktail.core.css.StyleManager"] = cocktail_core_css_StyleManager;
cocktail_core_css_StyleManager.__name__ = true;
cocktail_core_css_StyleManager.prototype = {
	addStyleSheet: function(styleSheet) {
		this._styleSheets.push(styleSheet);
	}
	,removeStyleSheet: function(styleSheet) {
		HxOverrides.remove(this._styleSheets,styleSheet);
	}
	,getStyleDeclaration: function(node,matchedPseudoClasses) {
		var styleDeclaration = null;
		if(node.styleManagerCSSDeclaration != null) {
			styleDeclaration = node.styleManagerCSSDeclaration;
			styleDeclaration.reset();
		} else styleDeclaration = new cocktail_core_css_CSSStyleDeclaration();
		this.applyStyleSheets(node,styleDeclaration,this._styleSheets,matchedPseudoClasses);
		return styleDeclaration;
	}
	,applyStyleSheets: function(node,nodeStyleDeclaration,styleSheets,matchedPseudoClasses) {
		var matchingStyleDeclarations = this.getMatchingStyleDeclarations(node,styleSheets,matchedPseudoClasses);
		this._matchedProperties = [];
		var length = matchingStyleDeclarations.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var cssStyleDeclaration = matchingStyleDeclarations[i].style;
			var styleLength = cssStyleDeclaration.length;
			var _g1 = 0;
			while(_g1 < styleLength) {
				var j = _g1++;
				var propertyIndex = cssStyleDeclaration.item(j);
				if(this.alreadyMatched(propertyIndex,this._matchedProperties) == false) {
					this.applyMatchingProperty(propertyIndex,matchingStyleDeclarations,nodeStyleDeclaration);
					this._matchedProperties.push(propertyIndex);
				}
			}
		}
	}
	,alreadyMatched: function(propertyIndex,matchedProperties) {
		var length = matchedProperties.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			if(matchedProperties[i] == propertyIndex) return true;
		}
		return false;
	}
	,getMatchingStyleDeclarations: function(node,styleSheets,matchedPseudoClasses) {
		this._matchingStyleDeclaration = [];
		var styleSheetsLength = styleSheets.length;
		var _g = 0;
		while(_g < styleSheetsLength) {
			var i = _g++;
			var styleSheet = styleSheets[i];
			var cssRules = styleSheet.cssRules;
			var cssRulesLength = cssRules.length;
			var _g1 = 0;
			while(_g1 < cssRulesLength) {
				var j = _g1++;
				var cssRule = cssRules[j];
				var _g2 = cssRule.type;
				switch(_g2) {
				case 1:
					var styleRule = cssRule;
					var selectors = styleRule.selectors;
					var selectorsLength = selectors.length;
					var _g3 = 0;
					while(_g3 < selectorsLength) {
						var k = _g3++;
						var selector = selectors[k];
						var match = false;
						if(selector.beginsWithClass == true) {
							if(matchedPseudoClasses.hasClasses == true) {
								var classListLength = matchedPseudoClasses.nodeClassList.length;
								var _g4 = 0;
								while(_g4 < classListLength) {
									var l = _g4++;
									if(matchedPseudoClasses.nodeClassList[l] == selector.firstClass) {
										if(selector.isSimpleClassSelector == true) {
											match = true;
											break;
										} else {
											match = this._selectorManager.matchSelector(node,selectors[k],matchedPseudoClasses) == true;
											break;
										}
									}
								}
							}
						} else if(selector.beginsWithId == true) {
							if(matchedPseudoClasses.hasId == true) {
								if(matchedPseudoClasses.nodeId == selector.firstId) {
									if(selector.isSimpleIdSelector == true) match = true; else match = this._selectorManager.matchSelector(node,selectors[k],matchedPseudoClasses) == true;
								}
							}
						} else if(selector.beginsWithType == true) {
							if(matchedPseudoClasses.nodeType == selector.firstType) {
								if(selector.isSimpleTypeSelector == true) match = true; else match = this._selectorManager.matchSelector(node,selectors[k],matchedPseudoClasses) == true;
							}
						} else match = this._selectorManager.matchSelector(node,selectors[k],matchedPseudoClasses) == true;
						if(match == true) {
							var matchingStyleDeclaration = new cocktail_core_css_StyleDeclarationVO();
							matchingStyleDeclaration.style = styleRule.style;
							matchingStyleDeclaration.selector = selectors[k];
							this._matchingStyleDeclaration.push(matchingStyleDeclaration);
							break;
						}
					}
					break;
				default:
				}
			}
		}
		return this._matchingStyleDeclaration;
	}
	,applyMatchingProperty: function(propertyIndex,matchingStyleDeclarations,nodeStyleDeclaration) {
		this._matchingProperties = [];
		var matchingStyleDeclarationsLength = matchingStyleDeclarations.length;
		var _g = 0;
		while(_g < matchingStyleDeclarationsLength) {
			var i = _g++;
			var styleDeclaration = matchingStyleDeclarations[i].style;
			var selector = matchingStyleDeclarations[i].selector;
			var typedProperty;
			if(styleDeclaration._indexedProperties == null) {
				styleDeclaration.resetIndexedProperties();
				styleDeclaration.resetPropertiesPositions();
			}
			typedProperty = styleDeclaration._indexedProperties[propertyIndex];
			if(typedProperty != null) {
				var matchingProperty1 = new cocktail_core_css_PropertyVO();
				matchingProperty1.selector = selector;
				matchingProperty1.typedValue = typedProperty.typedValue;
				matchingProperty1.origin = styleDeclaration.parentRule.parentStyleSheet.origin;
				matchingProperty1.important = typedProperty.important;
				this._matchingProperties.push(matchingProperty1);
			}
		}
		if(this._matchingProperties.length == 1) {
			var matchingProperty2 = this._matchingProperties[0];
			nodeStyleDeclaration.setTypedProperty(propertyIndex,matchingProperty2.typedValue,matchingProperty2.important);
			return;
		}
		var tempMatchingProperties = this.getSortedMatchingPropertiesByPriority(this._matchingProperties);
		if(tempMatchingProperties.length == 1) {
			var matchingProperty3 = tempMatchingProperties[0];
			nodeStyleDeclaration.setTypedProperty(propertyIndex,matchingProperty3.typedValue,matchingProperty3.important);
			return;
		}
		tempMatchingProperties = this.getSortedMatchingPropertiesBySpecificity(tempMatchingProperties);
		if(tempMatchingProperties.length == 1) {
			var matchingProperty4 = tempMatchingProperties[0];
			nodeStyleDeclaration.setTypedProperty(propertyIndex,matchingProperty4.typedValue,matchingProperty4.important);
			return;
		}
		var matchingProperty = tempMatchingProperties[tempMatchingProperties.length - 1];
		nodeStyleDeclaration.setTypedProperty(propertyIndex,matchingProperty.typedValue,matchingProperty.important);
	}
	,getSortedMatchingPropertiesByPriority: function(matchingProperties) {
		this._userAgentDeclarations = [];
		this._authorNormalDeclarations = [];
		this._authorImportantDeclarations = [];
		var length = matchingProperties.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var matchingProperty = matchingProperties[i];
			var _g1 = matchingProperty.origin;
			switch(_g1[1]) {
			case 1:
				this._userAgentDeclarations.push(matchingProperty);
				break;
			case 0:
				if(matchingProperty.important == true) this._authorImportantDeclarations.push(matchingProperty); else this._authorNormalDeclarations.push(matchingProperty);
				break;
			}
		}
		if(this._authorImportantDeclarations.length > 0) return this._authorImportantDeclarations;
		if(this._authorNormalDeclarations.length > 0) return this._authorNormalDeclarations;
		return this._userAgentDeclarations;
	}
	,getSortedMatchingPropertiesBySpecificity: function(matchingProperties) {
		this._mostSpecificMatchingProperties = [];
		var currentHigherSpecificity = 0;
		var length = matchingProperties.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var property = matchingProperties[i];
			var propertySpecificity = this._selectorManager.getSelectorSpecifity(property.selector);
			if(propertySpecificity > currentHigherSpecificity) {
				currentHigherSpecificity = propertySpecificity;
				this._mostSpecificMatchingProperties = [];
			}
			if(propertySpecificity == currentHigherSpecificity) this._mostSpecificMatchingProperties.push(property);
		}
		return this._mostSpecificMatchingProperties;
	}
	,__class__: cocktail_core_css_StyleManager
};
var cocktail_core_css_parsers_SelectorParserState = $hxClasses["cocktail.core.css.parsers.SelectorParserState"] = { __ename__ : true, __constructs__ : ["IGNORE_SPACES","BEGIN_SIMPLE_SELECTOR","END_SIMPLE_SELECTOR","SIMPLE_SELECTOR","END_TYPE_SELECTOR","END_CLASS_SELECTOR","END_ID_SELECTOR","BEGIN_COMBINATOR","COMBINATOR","BEGIN_PSEUDO_SELECTOR","END_UNIVERSAL_SELECTOR","PSEUDO_ELEMENT_SELECTOR","BEGIN_ATTRIBUTE_SELECTOR","INVALID_SELECTOR"] };
cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES = ["IGNORE_SPACES",0];
cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_SelectorParserState;
cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR = ["BEGIN_SIMPLE_SELECTOR",1];
cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR = ["END_SIMPLE_SELECTOR",2];
cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR = ["SIMPLE_SELECTOR",3];
cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
cocktail_core_css_parsers_SelectorParserState.END_TYPE_SELECTOR = ["END_TYPE_SELECTOR",4];
cocktail_core_css_parsers_SelectorParserState.END_TYPE_SELECTOR.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.END_TYPE_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
cocktail_core_css_parsers_SelectorParserState.END_CLASS_SELECTOR = ["END_CLASS_SELECTOR",5];
cocktail_core_css_parsers_SelectorParserState.END_CLASS_SELECTOR.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.END_CLASS_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
cocktail_core_css_parsers_SelectorParserState.END_ID_SELECTOR = ["END_ID_SELECTOR",6];
cocktail_core_css_parsers_SelectorParserState.END_ID_SELECTOR.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.END_ID_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
cocktail_core_css_parsers_SelectorParserState.BEGIN_COMBINATOR = ["BEGIN_COMBINATOR",7];
cocktail_core_css_parsers_SelectorParserState.BEGIN_COMBINATOR.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.BEGIN_COMBINATOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
cocktail_core_css_parsers_SelectorParserState.COMBINATOR = ["COMBINATOR",8];
cocktail_core_css_parsers_SelectorParserState.COMBINATOR.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.COMBINATOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
cocktail_core_css_parsers_SelectorParserState.BEGIN_PSEUDO_SELECTOR = ["BEGIN_PSEUDO_SELECTOR",9];
cocktail_core_css_parsers_SelectorParserState.BEGIN_PSEUDO_SELECTOR.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.BEGIN_PSEUDO_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
cocktail_core_css_parsers_SelectorParserState.END_UNIVERSAL_SELECTOR = ["END_UNIVERSAL_SELECTOR",10];
cocktail_core_css_parsers_SelectorParserState.END_UNIVERSAL_SELECTOR.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.END_UNIVERSAL_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
cocktail_core_css_parsers_SelectorParserState.PSEUDO_ELEMENT_SELECTOR = ["PSEUDO_ELEMENT_SELECTOR",11];
cocktail_core_css_parsers_SelectorParserState.PSEUDO_ELEMENT_SELECTOR.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.PSEUDO_ELEMENT_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
cocktail_core_css_parsers_SelectorParserState.BEGIN_ATTRIBUTE_SELECTOR = ["BEGIN_ATTRIBUTE_SELECTOR",12];
cocktail_core_css_parsers_SelectorParserState.BEGIN_ATTRIBUTE_SELECTOR.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.BEGIN_ATTRIBUTE_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR = ["INVALID_SELECTOR",13];
cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR.toString = $estr;
cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
var cocktail_core_css_parsers_StyleDeclarationParserState = $hxClasses["cocktail.core.css.parsers.StyleDeclarationParserState"] = { __ename__ : true, __constructs__ : ["STYLE_NAME","STYLE_VALUE","IGNORE_SPACES","INVALID_STYLE","STYLE_SEPARATOR","BEGIN","COMMENT","BEGIN_COMMENT","END_COMMENT"] };
cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_NAME = ["STYLE_NAME",0];
cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_NAME.toString = $estr;
cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_NAME.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_VALUE = ["STYLE_VALUE",1];
cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_VALUE.toString = $estr;
cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_VALUE.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES = ["IGNORE_SPACES",2];
cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES.toString = $estr;
cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE = ["INVALID_STYLE",3];
cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE.toString = $estr;
cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_SEPARATOR = ["STYLE_SEPARATOR",4];
cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_SEPARATOR.toString = $estr;
cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_SEPARATOR.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN = ["BEGIN",5];
cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN.toString = $estr;
cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
cocktail_core_css_parsers_StyleDeclarationParserState.COMMENT = ["COMMENT",6];
cocktail_core_css_parsers_StyleDeclarationParserState.COMMENT.toString = $estr;
cocktail_core_css_parsers_StyleDeclarationParserState.COMMENT.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN_COMMENT = ["BEGIN_COMMENT",7];
cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN_COMMENT.toString = $estr;
cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN_COMMENT.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
cocktail_core_css_parsers_StyleDeclarationParserState.END_COMMENT = ["END_COMMENT",8];
cocktail_core_css_parsers_StyleDeclarationParserState.END_COMMENT.toString = $estr;
cocktail_core_css_parsers_StyleDeclarationParserState.END_COMMENT.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
var cocktail_core_css_parsers_StyleValueParserState = $hxClasses["cocktail.core.css.parsers.StyleValueParserState"] = { __ename__ : true, __constructs__ : ["IGNORE_SPACES","BEGIN_VALUE","IDENT_FUNCTION","NUMBER_INTEGER_DIMENSION_PERCENTAGE","COMPONENT_OR_END","INVALID_STYLE_VALUE","IMPORTANT","END","HEX","STRING"] };
cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES = ["IGNORE_SPACES",0];
cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES.toString = $estr;
cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE = ["BEGIN_VALUE",1];
cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE.toString = $estr;
cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
cocktail_core_css_parsers_StyleValueParserState.IDENT_FUNCTION = ["IDENT_FUNCTION",2];
cocktail_core_css_parsers_StyleValueParserState.IDENT_FUNCTION.toString = $estr;
cocktail_core_css_parsers_StyleValueParserState.IDENT_FUNCTION.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
cocktail_core_css_parsers_StyleValueParserState.NUMBER_INTEGER_DIMENSION_PERCENTAGE = ["NUMBER_INTEGER_DIMENSION_PERCENTAGE",3];
cocktail_core_css_parsers_StyleValueParserState.NUMBER_INTEGER_DIMENSION_PERCENTAGE.toString = $estr;
cocktail_core_css_parsers_StyleValueParserState.NUMBER_INTEGER_DIMENSION_PERCENTAGE.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END = ["COMPONENT_OR_END",4];
cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END.toString = $estr;
cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE = ["INVALID_STYLE_VALUE",5];
cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE.toString = $estr;
cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
cocktail_core_css_parsers_StyleValueParserState.IMPORTANT = ["IMPORTANT",6];
cocktail_core_css_parsers_StyleValueParserState.IMPORTANT.toString = $estr;
cocktail_core_css_parsers_StyleValueParserState.IMPORTANT.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
cocktail_core_css_parsers_StyleValueParserState.END = ["END",7];
cocktail_core_css_parsers_StyleValueParserState.END.toString = $estr;
cocktail_core_css_parsers_StyleValueParserState.END.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
cocktail_core_css_parsers_StyleValueParserState.HEX = ["HEX",8];
cocktail_core_css_parsers_StyleValueParserState.HEX.toString = $estr;
cocktail_core_css_parsers_StyleValueParserState.HEX.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
cocktail_core_css_parsers_StyleValueParserState.STRING = ["STRING",9];
cocktail_core_css_parsers_StyleValueParserState.STRING.toString = $estr;
cocktail_core_css_parsers_StyleValueParserState.STRING.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
var cocktail_core_css_parsers_AttributeSelectorParserState = $hxClasses["cocktail.core.css.parsers.AttributeSelectorParserState"] = { __ename__ : true, __constructs__ : ["IGNORE_SPACES","END_OPERATOR","ATTRIBUTE","BEGIN_OPERATOR","OPERATOR","IDENTIFIER_VALUE","STRING_VALUE","END_SELECTOR","INVALID_SELECTOR"] };
cocktail_core_css_parsers_AttributeSelectorParserState.IGNORE_SPACES = ["IGNORE_SPACES",0];
cocktail_core_css_parsers_AttributeSelectorParserState.IGNORE_SPACES.toString = $estr;
cocktail_core_css_parsers_AttributeSelectorParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
cocktail_core_css_parsers_AttributeSelectorParserState.END_OPERATOR = ["END_OPERATOR",1];
cocktail_core_css_parsers_AttributeSelectorParserState.END_OPERATOR.toString = $estr;
cocktail_core_css_parsers_AttributeSelectorParserState.END_OPERATOR.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
cocktail_core_css_parsers_AttributeSelectorParserState.ATTRIBUTE = ["ATTRIBUTE",2];
cocktail_core_css_parsers_AttributeSelectorParserState.ATTRIBUTE.toString = $estr;
cocktail_core_css_parsers_AttributeSelectorParserState.ATTRIBUTE.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
cocktail_core_css_parsers_AttributeSelectorParserState.BEGIN_OPERATOR = ["BEGIN_OPERATOR",3];
cocktail_core_css_parsers_AttributeSelectorParserState.BEGIN_OPERATOR.toString = $estr;
cocktail_core_css_parsers_AttributeSelectorParserState.BEGIN_OPERATOR.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
cocktail_core_css_parsers_AttributeSelectorParserState.OPERATOR = ["OPERATOR",4];
cocktail_core_css_parsers_AttributeSelectorParserState.OPERATOR.toString = $estr;
cocktail_core_css_parsers_AttributeSelectorParserState.OPERATOR.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
cocktail_core_css_parsers_AttributeSelectorParserState.IDENTIFIER_VALUE = ["IDENTIFIER_VALUE",5];
cocktail_core_css_parsers_AttributeSelectorParserState.IDENTIFIER_VALUE.toString = $estr;
cocktail_core_css_parsers_AttributeSelectorParserState.IDENTIFIER_VALUE.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
cocktail_core_css_parsers_AttributeSelectorParserState.STRING_VALUE = ["STRING_VALUE",6];
cocktail_core_css_parsers_AttributeSelectorParserState.STRING_VALUE.toString = $estr;
cocktail_core_css_parsers_AttributeSelectorParserState.STRING_VALUE.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR = ["END_SELECTOR",7];
cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR.toString = $estr;
cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR = ["INVALID_SELECTOR",8];
cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR.toString = $estr;
cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
var cocktail_core_css_parsers_StyleRuleParserState = $hxClasses["cocktail.core.css.parsers.StyleRuleParserState"] = { __ename__ : true, __constructs__ : ["IGNORE_SPACES","BEGIN_SELECTOR","END_SELECTOR","SELECTOR","BEGIN_STYLES","STYLES","END_STYLES"] };
cocktail_core_css_parsers_StyleRuleParserState.IGNORE_SPACES = ["IGNORE_SPACES",0];
cocktail_core_css_parsers_StyleRuleParserState.IGNORE_SPACES.toString = $estr;
cocktail_core_css_parsers_StyleRuleParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
cocktail_core_css_parsers_StyleRuleParserState.BEGIN_SELECTOR = ["BEGIN_SELECTOR",1];
cocktail_core_css_parsers_StyleRuleParserState.BEGIN_SELECTOR.toString = $estr;
cocktail_core_css_parsers_StyleRuleParserState.BEGIN_SELECTOR.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
cocktail_core_css_parsers_StyleRuleParserState.END_SELECTOR = ["END_SELECTOR",2];
cocktail_core_css_parsers_StyleRuleParserState.END_SELECTOR.toString = $estr;
cocktail_core_css_parsers_StyleRuleParserState.END_SELECTOR.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
cocktail_core_css_parsers_StyleRuleParserState.SELECTOR = ["SELECTOR",3];
cocktail_core_css_parsers_StyleRuleParserState.SELECTOR.toString = $estr;
cocktail_core_css_parsers_StyleRuleParserState.SELECTOR.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
cocktail_core_css_parsers_StyleRuleParserState.BEGIN_STYLES = ["BEGIN_STYLES",4];
cocktail_core_css_parsers_StyleRuleParserState.BEGIN_STYLES.toString = $estr;
cocktail_core_css_parsers_StyleRuleParserState.BEGIN_STYLES.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
cocktail_core_css_parsers_StyleRuleParserState.STYLES = ["STYLES",5];
cocktail_core_css_parsers_StyleRuleParserState.STYLES.toString = $estr;
cocktail_core_css_parsers_StyleRuleParserState.STYLES.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
cocktail_core_css_parsers_StyleRuleParserState.END_STYLES = ["END_STYLES",6];
cocktail_core_css_parsers_StyleRuleParserState.END_STYLES.toString = $estr;
cocktail_core_css_parsers_StyleRuleParserState.END_STYLES.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
var cocktail_core_css_parsers_StyleSheetRulesParserState = $hxClasses["cocktail.core.css.parsers.StyleSheetRulesParserState"] = { __ename__ : true, __constructs__ : ["IGNORE_SPACES","BEGIN","BEGIN_RULE","RULE","END_RULE","COMMENT","BEGIN_COMMENT","END_COMMENT"] };
cocktail_core_css_parsers_StyleSheetRulesParserState.IGNORE_SPACES = ["IGNORE_SPACES",0];
cocktail_core_css_parsers_StyleSheetRulesParserState.IGNORE_SPACES.toString = $estr;
cocktail_core_css_parsers_StyleSheetRulesParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN = ["BEGIN",1];
cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN.toString = $estr;
cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_RULE = ["BEGIN_RULE",2];
cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_RULE.toString = $estr;
cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
cocktail_core_css_parsers_StyleSheetRulesParserState.RULE = ["RULE",3];
cocktail_core_css_parsers_StyleSheetRulesParserState.RULE.toString = $estr;
cocktail_core_css_parsers_StyleSheetRulesParserState.RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
cocktail_core_css_parsers_StyleSheetRulesParserState.END_RULE = ["END_RULE",4];
cocktail_core_css_parsers_StyleSheetRulesParserState.END_RULE.toString = $estr;
cocktail_core_css_parsers_StyleSheetRulesParserState.END_RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
cocktail_core_css_parsers_StyleSheetRulesParserState.COMMENT = ["COMMENT",5];
cocktail_core_css_parsers_StyleSheetRulesParserState.COMMENT.toString = $estr;
cocktail_core_css_parsers_StyleSheetRulesParserState.COMMENT.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_COMMENT = ["BEGIN_COMMENT",6];
cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_COMMENT.toString = $estr;
cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_COMMENT.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
cocktail_core_css_parsers_StyleSheetRulesParserState.END_COMMENT = ["END_COMMENT",7];
cocktail_core_css_parsers_StyleSheetRulesParserState.END_COMMENT.toString = $estr;
cocktail_core_css_parsers_StyleSheetRulesParserState.END_COMMENT.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
var cocktail_core_css_parsers_StyleSheetRuleParserState = $hxClasses["cocktail.core.css.parsers.StyleSheetRuleParserState"] = { __ename__ : true, __constructs__ : ["IGNORE_SPACES","BEGIN_RULE","BEGIN_AT_RULE","END_MEDIA_RULE","RULE","END_STYLE_RULE"] };
cocktail_core_css_parsers_StyleSheetRuleParserState.IGNORE_SPACES = ["IGNORE_SPACES",0];
cocktail_core_css_parsers_StyleSheetRuleParserState.IGNORE_SPACES.toString = $estr;
cocktail_core_css_parsers_StyleSheetRuleParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_StyleSheetRuleParserState;
cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_RULE = ["BEGIN_RULE",1];
cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_RULE.toString = $estr;
cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRuleParserState;
cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_AT_RULE = ["BEGIN_AT_RULE",2];
cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_AT_RULE.toString = $estr;
cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_AT_RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRuleParserState;
cocktail_core_css_parsers_StyleSheetRuleParserState.END_MEDIA_RULE = ["END_MEDIA_RULE",3];
cocktail_core_css_parsers_StyleSheetRuleParserState.END_MEDIA_RULE.toString = $estr;
cocktail_core_css_parsers_StyleSheetRuleParserState.END_MEDIA_RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRuleParserState;
cocktail_core_css_parsers_StyleSheetRuleParserState.RULE = ["RULE",4];
cocktail_core_css_parsers_StyleSheetRuleParserState.RULE.toString = $estr;
cocktail_core_css_parsers_StyleSheetRuleParserState.RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRuleParserState;
cocktail_core_css_parsers_StyleSheetRuleParserState.END_STYLE_RULE = ["END_STYLE_RULE",5];
cocktail_core_css_parsers_StyleSheetRuleParserState.END_STYLE_RULE.toString = $estr;
cocktail_core_css_parsers_StyleSheetRuleParserState.END_STYLE_RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRuleParserState;
var cocktail_core_css_parsers_CSSRulesParser = function() {
};
$hxClasses["cocktail.core.css.parsers.CSSRulesParser"] = cocktail_core_css_parsers_CSSRulesParser;
cocktail_core_css_parsers_CSSRulesParser.__name__ = true;
cocktail_core_css_parsers_CSSRulesParser.prototype = {
	parseRules: function(css) {
		var state = cocktail_core_css_parsers_StyleSheetRulesParserState.IGNORE_SPACES;
		var next = cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN;
		var start = 0;
		var position = 0;
		var c = css.charCodeAt(position);
		var ruleStarted = false;
		var rules = [];
		while(!(c != c)) {
			switch(state[1]) {
			case 0:
				switch(c) {
				case 10:case 13:case 9:case 32:
					break;
				default:
					state = next;
					continue;
				}
				break;
			case 1:
				switch(c) {
				case 47:
					state = cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_COMMENT;
					break;
				default:
					start = position;
					state = cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_RULE;
					continue;
				}
				break;
			case 2:
				start = position;
				state = cocktail_core_css_parsers_StyleSheetRulesParserState.RULE;
				ruleStarted = true;
				continue;
				break;
			case 3:
				switch(c) {
				case 125:
					state = cocktail_core_css_parsers_StyleSheetRulesParserState.END_RULE;
					break;
				}
				break;
			case 4:
				var rule = HxOverrides.substr(css,start,position - start);
				rules.push(rule);
				state = cocktail_core_css_parsers_StyleSheetRulesParserState.IGNORE_SPACES;
				next = cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN;
				ruleStarted = false;
				continue;
				break;
			case 6:
				if(c != 42) return rules; else state = cocktail_core_css_parsers_StyleSheetRulesParserState.COMMENT;
				break;
			case 5:
				if(c == 42) state = cocktail_core_css_parsers_StyleSheetRulesParserState.END_COMMENT;
				break;
			case 7:
				if(c == 47) {
					state = cocktail_core_css_parsers_StyleSheetRulesParserState.IGNORE_SPACES;
					next = cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN;
				} else state = cocktail_core_css_parsers_StyleSheetRulesParserState.COMMENT;
				break;
			}
			c = StringTools.fastCodeAt(css,++position);
		}
		if(ruleStarted == true) {
			var rule1 = HxOverrides.substr(css,start,position - start);
			rules.push(rule1);
		}
		return rules;
	}
	,parseRule: function(rule,parentSyleSheet) {
		var state = cocktail_core_css_parsers_StyleSheetRuleParserState.IGNORE_SPACES;
		var next = cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_RULE;
		var start = 0;
		var position = 0;
		var c = rule.charCodeAt(position);
		var cssRule = null;
		while(!(c != c)) {
			switch(state[1]) {
			case 0:
				switch(c) {
				case 10:case 13:case 9:case 32:
					break;
				default:
					state = next;
					continue;
				}
				break;
			case 1:
				switch(c) {
				case 64:
					state = cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_AT_RULE;
					start = position;
					break;
				default:
					state = cocktail_core_css_parsers_StyleSheetRuleParserState.RULE;
					next = cocktail_core_css_parsers_StyleSheetRuleParserState.END_STYLE_RULE;
					start = position;
					continue;
				}
				break;
			case 2:
				if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
					var atRule = HxOverrides.substr(rule,start,position - start);
					switch(atRule) {
					case "@media":
						state = cocktail_core_css_parsers_StyleSheetRuleParserState.RULE;
						next = cocktail_core_css_parsers_StyleSheetRuleParserState.END_MEDIA_RULE;
						continue;
						break;
					default:
						state = cocktail_core_css_parsers_StyleSheetRuleParserState.IGNORE_SPACES;
						next = cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_RULE;
					}
				}
				break;
			case 4:
				switch(c) {
				case 125:
					state = next;
					continue;
					break;
				}
				break;
			case 3:
				var rule1 = HxOverrides.substr(rule,start,position - start + 1);
				var cssMediaRule = new cocktail_core_css_CSSMediaRule(parentSyleSheet);
				cssMediaRule.set_cssText(rule1);
				return cssMediaRule;
			case 5:
				var rule2 = HxOverrides.substr(rule,start,position - start + 1);
				var cssStyleRule = new cocktail_core_css_CSSStyleRule(parentSyleSheet);
				cssStyleRule.set_cssText(rule2);
				return cssStyleRule;
			}
			c = StringTools.fastCodeAt(rule,++position);
		}
		return cssRule;
	}
	,__class__: cocktail_core_css_parsers_CSSRulesParser
};
var cocktail_core_css_parsers_CSSSelectorParser = function() {
};
$hxClasses["cocktail.core.css.parsers.CSSSelectorParser"] = cocktail_core_css_parsers_CSSSelectorParser;
cocktail_core_css_parsers_CSSSelectorParser.__name__ = true;
cocktail_core_css_parsers_CSSSelectorParser.prototype = {
	parseSelector: function(selector,typedSelectors) {
		var state = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
		var next = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
		var start = 0;
		var position = 0;
		var c = selector.charCodeAt(position);
		var simpleSelectorSequenceStartValue = null;
		var simpleSelectorSequenceItemValues = [];
		var components = [];
		var selectorData = new cocktail_core_css_SelectorVO(components,cocktail_core_css_PseudoElementSelectorValue.NONE,false,null,false,null,false,null,false,false,false);
		while(!(c != c)) {
			switch(state[1]) {
			case 0:
				switch(c) {
				case 10:case 13:case 9:case 32:
					break;
				default:
					state = next;
					continue;
				}
				break;
			case 1:
				if(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95) {
					state = cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR;
					next = cocktail_core_css_parsers_SelectorParserState.END_TYPE_SELECTOR;
					start = position;
				} else switch(c) {
				case 46:
					state = cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR;
					next = cocktail_core_css_parsers_SelectorParserState.END_CLASS_SELECTOR;
					start = position + 1;
					break;
				case 35:
					state = cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR;
					next = cocktail_core_css_parsers_SelectorParserState.END_ID_SELECTOR;
					start = position + 1;
					break;
				case 42:
					state = cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR;
					next = cocktail_core_css_parsers_SelectorParserState.END_UNIVERSAL_SELECTOR;
					start = position;
					break;
				case 58:
					state = cocktail_core_css_parsers_SelectorParserState.BEGIN_PSEUDO_SELECTOR;
					start = position;
					break;
				case 91:
					state = cocktail_core_css_parsers_SelectorParserState.BEGIN_ATTRIBUTE_SELECTOR;
					start = position;
					break;
				default:
					state = cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR;
					continue;
				}
				break;
			case 12:
				position = this.parseAttributeSelector(selector,position,simpleSelectorSequenceItemValues);
				state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
				next = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
				break;
			case 9:
				if(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95) {
					position = this.parsePseudoClass(selector,position,simpleSelectorSequenceItemValues);
					state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
					next = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
				} else switch(c) {
				case 58:
					state = cocktail_core_css_parsers_SelectorParserState.PSEUDO_ELEMENT_SELECTOR;
					break;
				default:
					state = cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR;
					continue;
				}
				break;
			case 11:
				position = this.parsePseudoElement(selector,position,selectorData);
				state = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
				next = cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR;
				break;
			case 2:
				switch(c) {
				case 32:case 10:case 13:case 62:
					state = cocktail_core_css_parsers_SelectorParserState.BEGIN_COMBINATOR;
					continue;
					break;
				case 58:case 35:case 46:case 91:
					state = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
					continue;
					break;
				default:
					state = cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR;
					continue;
				}
				break;
			case 3:
				if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95)) switch(c) {
				case 32:case 10:case 13:case 62:case 58:case 35:case 46:case 91:
					state = next;
					continue;
					break;
				default:
					state = cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR;
					continue;
				}
				break;
			case 4:
				var type = HxOverrides.substr(selector,start,position - start);
				simpleSelectorSequenceStartValue = cocktail_core_css_SimpleSelectorSequenceStartValue.TYPE(type.toUpperCase());
				state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
				continue;
				break;
			case 5:
				var className = HxOverrides.substr(selector,start,position - start);
				simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.CSS_CLASS(className));
				state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
				continue;
				break;
			case 6:
				var id = HxOverrides.substr(selector,start,position - start);
				simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ID(id));
				state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
				continue;
				break;
			case 10:
				simpleSelectorSequenceStartValue = cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL;
				state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
				continue;
				break;
			case 7:
				this.flushSelectors(simpleSelectorSequenceStartValue,simpleSelectorSequenceItemValues,components);
				simpleSelectorSequenceStartValue = null;
				simpleSelectorSequenceItemValues = [];
				state = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
				next = cocktail_core_css_parsers_SelectorParserState.COMBINATOR;
				continue;
				break;
			case 8:
				if(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95) {
					state = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
					components.push(cocktail_core_css_SelectorComponentValue.COMBINATOR(cocktail_core_css_CombinatorValue.DESCENDANT));
					continue;
				} else switch(c) {
				case 62:
					state = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
					next = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
					components.push(cocktail_core_css_SelectorComponentValue.COMBINATOR(cocktail_core_css_CombinatorValue.CHILD));
					break;
				case 43:
					state = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
					next = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
					components.push(cocktail_core_css_SelectorComponentValue.COMBINATOR(cocktail_core_css_CombinatorValue.ADJACENT_SIBLING));
					break;
				case 126:
					state = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
					next = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
					components.push(cocktail_core_css_SelectorComponentValue.COMBINATOR(cocktail_core_css_CombinatorValue.GENERAL_SIBLING));
					break;
				case 58:case 35:case 46:case 91:case 42:
					state = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
					components.push(cocktail_core_css_SelectorComponentValue.COMBINATOR(cocktail_core_css_CombinatorValue.DESCENDANT));
					continue;
					break;
				}
				break;
			case 13:
				return false;
			}
			c = StringTools.fastCodeAt(selector,++position);
		}
		switch(next[1]) {
		case 4:
			var type1 = HxOverrides.substr(selector,start,position - start);
			simpleSelectorSequenceStartValue = cocktail_core_css_SimpleSelectorSequenceStartValue.TYPE(type1.toUpperCase());
			break;
		case 10:
			simpleSelectorSequenceStartValue = cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL;
			break;
		case 5:
			var className1 = HxOverrides.substr(selector,start,position - start);
			simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.CSS_CLASS(className1));
			state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
			break;
		case 6:
			var id1 = HxOverrides.substr(selector,start,position - start);
			simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ID(id1));
			break;
		default:
		}
		this.flushSelectors(simpleSelectorSequenceStartValue,simpleSelectorSequenceItemValues,components);
		if(selectorData.components.length == 0) return false;
		selectorData.components.reverse();
		var firstClass = this.getFirstClass(selectorData.components);
		var isSimpleClassSelector = false;
		if(firstClass != null) isSimpleClassSelector = this.getIsSimpleClassSelector(selectorData.components);
		var firstId = this.getFirstId(selectorData.components);
		var isSimpleIdSelector = false;
		if(firstId != null) isSimpleIdSelector = this.getIsSimpleIdSelector(selectorData.components);
		var firstType = this.getFirstType(selectorData.components);
		var isSimpleTypeSelector = false;
		if(firstType != null) isSimpleTypeSelector = this.getIsSimpleTypeSelector(selectorData.components);
		var typedSelector = new cocktail_core_css_SelectorVO(selectorData.components,selectorData.pseudoElement,firstClass != null,firstClass,firstId != null,firstId,firstType != null,firstType,isSimpleClassSelector,isSimpleIdSelector,isSimpleTypeSelector);
		typedSelectors.push(typedSelector);
		return true;
	}
	,flushSelectors: function(simpleSelectorSequenceStartValue,simpleSelectorSequenceItemValues,components) {
		if(simpleSelectorSequenceStartValue == null && simpleSelectorSequenceItemValues.length == 0) return;
		if(simpleSelectorSequenceStartValue == null) simpleSelectorSequenceStartValue = cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL;
		var simpleSelectorSequence = new cocktail_core_css_SimpleSelectorSequenceVO(simpleSelectorSequenceStartValue,simpleSelectorSequenceItemValues);
		components.push(cocktail_core_css_SelectorComponentValue.SIMPLE_SELECTOR_SEQUENCE(simpleSelectorSequence));
	}
	,parsePseudoClass: function(selector,position,simpleSelectorSequenceItemValues) {
		var c = selector.charCodeAt(position);
		var start = position;
		while(true) {
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45)) break;
			c = StringTools.fastCodeAt(selector,++position);
		}
		var pseudoClass = HxOverrides.substr(selector,start,position - start);
		var typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.UNKNOWN;
		switch(pseudoClass) {
		case "first-child":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_CHILD);
			break;
		case "last-child":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_CHILD);
			break;
		case "empty":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.EMPTY);
			break;
		case "root":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.ROOT);
			break;
		case "first-of-type":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_OF_TYPE);
			break;
		case "last-of-type":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_OF_TYPE);
			break;
		case "only-of-type":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_OF_TYPE);
			break;
		case "only-child":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_CHILD);
			break;
		case "link":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.LINK(cocktail_core_css_LinkPseudoClassValue.LINK);
			break;
		case "visited":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.LINK(cocktail_core_css_LinkPseudoClassValue.VISITED);
			break;
		case "active":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.USER_ACTION(cocktail_core_css_UserActionPseudoClassValue.ACTIVE);
			break;
		case "hover":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.USER_ACTION(cocktail_core_css_UserActionPseudoClassValue.HOVER);
			break;
		case "focus":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.USER_ACTION(cocktail_core_css_UserActionPseudoClassValue.FOCUS);
			break;
		case "target":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.TARGET;
			break;
		case "fullscreen":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.FULLSCREEN;
			break;
		case "nth-child":
			break;
		case "nth-last-child":
			break;
		case "nth-of-type":
			break;
		case "nth-last-of-type":
			break;
		case "not":
			break;
		case "lang":
			break;
		case "enabled":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.UI_ELEMENT_STATES(cocktail_core_css_UIElementStatesValue.ENABLED);
			break;
		case "disabled":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.UI_ELEMENT_STATES(cocktail_core_css_UIElementStatesValue.DISABLED);
			break;
		case "checked":
			typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.UI_ELEMENT_STATES(cocktail_core_css_UIElementStatesValue.CHECKED);
			break;
		}
		simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.PSEUDO_CLASS(typedPseudoClass));
		return --position;
	}
	,parsePseudoElement: function(selector,position,selectorData) {
		var c = selector.charCodeAt(position);
		var start = position;
		while(true) {
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45)) break;
			c = StringTools.fastCodeAt(selector,++position);
		}
		var pseudoElement = HxOverrides.substr(selector,start,position - start);
		var typedPseudoElement = null;
		switch(pseudoElement) {
		case "first-line":
			typedPseudoElement = cocktail_core_css_PseudoElementSelectorValue.FIRST_LINE;
			break;
		case "first-letter":
			typedPseudoElement = cocktail_core_css_PseudoElementSelectorValue.FIRST_LETTER;
			break;
		case "before":
			typedPseudoElement = cocktail_core_css_PseudoElementSelectorValue.BEFORE;
			break;
		case "after":
			typedPseudoElement = cocktail_core_css_PseudoElementSelectorValue.AFTER;
			break;
		default:
			typedPseudoElement = cocktail_core_css_PseudoElementSelectorValue.NONE;
		}
		selectorData.pseudoElement = typedPseudoElement;
		return --position;
	}
	,parseAttributeSelector: function(selector,position,simpleSelectorSequenceItemValues) {
		var c = selector.charCodeAt(position);
		var start = position;
		var attribute = null;
		var operator = null;
		var value = null;
		var state = cocktail_core_css_parsers_AttributeSelectorParserState.IGNORE_SPACES;
		var next = cocktail_core_css_parsers_AttributeSelectorParserState.ATTRIBUTE;
		try {
			while(true) {
				switch(state[1]) {
				case 0:
					switch(c) {
					case 10:case 13:case 9:case 32:
						break;
					default:
						state = next;
						continue;
					}
					break;
				case 2:
					if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95)) {
						attribute = HxOverrides.substr(selector,start,position - start);
						if(c == 93) {
							state = cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR;
							continue;
						} else {
							state = cocktail_core_css_parsers_AttributeSelectorParserState.IGNORE_SPACES;
							next = cocktail_core_css_parsers_AttributeSelectorParserState.BEGIN_OPERATOR;
							continue;
						}
					}
					break;
				case 3:
					start = position;
					state = cocktail_core_css_parsers_AttributeSelectorParserState.OPERATOR;
					break;
				case 4:
					if(!(c == 61 || c == 126 || c == 94 || c == 36 || c == 42 || c == 124)) {
						operator = HxOverrides.substr(selector,start,position - start);
						state = cocktail_core_css_parsers_AttributeSelectorParserState.IGNORE_SPACES;
						next = cocktail_core_css_parsers_AttributeSelectorParserState.END_OPERATOR;
						continue;
					}
					break;
				case 1:
					switch(c) {
					case 34:case 39:
						position++;
						start = position;
						state = cocktail_core_css_parsers_AttributeSelectorParserState.STRING_VALUE;
						break;
					case 93:
						state = cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR;
						continue;
						break;
					default:
						if((c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95) == true) {
							start = position;
							state = cocktail_core_css_parsers_AttributeSelectorParserState.IDENTIFIER_VALUE;
						} else state = cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR;
					}
					break;
				case 6:
					if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95)) switch(c) {
					case 34:case 39:
						value = HxOverrides.substr(selector,start,position - start);
						state = cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR;
						break;
					case 93:
						state = cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR;
						break;
					default:
						state = cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR;
					}
					break;
				case 5:
					if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95)) switch(c) {
					case 93:
						value = HxOverrides.substr(selector,start,position - start);
						state = cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR;
						continue;
						break;
					default:
						state = cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR;
					}
					break;
				case 8:
					throw "__break__";
					break;
				case 7:
					throw "__break__";
					break;
				}
				c = StringTools.fastCodeAt(selector,++position);
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		if(attribute != null) {
			if(operator != null) switch(operator) {
			case "=":
				simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE(attribute,value)));
				break;
			case "^=":
				simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_BEGINS(attribute,value)));
				break;
			case "~=":
				simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_LIST(attribute,value)));
				break;
			case "$=":
				simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_ENDS(attribute,value)));
				break;
			case "*=":
				simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_CONTAINS(attribute,value)));
				break;
			case "|=":
				simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_BEGINS_HYPHEN_LIST(attribute,value)));
				break;
			} else simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE(attribute)));
		}
		return position;
	}
	,getFirstClass: function(components) {
		{
			var _g = components[0];
			switch(_g[1]) {
			case 0:
				var value = _g[2];
				if(value.startValue == cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL) {
					if(value.simpleSelectors.length != 0) {
						var _g1 = value.simpleSelectors[0];
						switch(_g1[1]) {
						case 2:
							var value1 = _g1[2];
							return value1;
						default:
						}
					}
				}
				break;
			case 1:
				var value2 = _g[2];
				break;
			}
		}
		return null;
	}
	,getIsSimpleClassSelector: function(components) {
		if(components.length > 1) return false;
		{
			var _g = components[0];
			switch(_g[1]) {
			case 0:
				var value = _g[2];
				if(value.startValue == cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL) {
					if(value.simpleSelectors.length == 1) {
						var _g1 = value.simpleSelectors[0];
						switch(_g1[1]) {
						case 2:
							var value1 = _g1[2];
							return true;
						default:
						}
					}
				}
				break;
			case 1:
				var value2 = _g[2];
				break;
			}
		}
		return false;
	}
	,getIsSimpleIdSelector: function(components) {
		if(components.length > 1) return false;
		{
			var _g = components[0];
			switch(_g[1]) {
			case 0:
				var value = _g[2];
				if(value.startValue == cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL) {
					if(value.simpleSelectors.length == 1) {
						var _g1 = value.simpleSelectors[0];
						switch(_g1[1]) {
						case 3:
							var value1 = _g1[2];
							return true;
						default:
						}
					}
				}
				break;
			case 1:
				var value2 = _g[2];
				break;
			}
		}
		return false;
	}
	,getIsSimpleTypeSelector: function(components) {
		if(components.length > 1) return false;
		{
			var _g = components[0];
			switch(_g[1]) {
			case 0:
				var value = _g[2];
				{
					var _g1 = value.startValue;
					switch(_g1[1]) {
					case 1:
						var typeValue = _g1[2];
						if(value.simpleSelectors.length == 0) return true;
						break;
					default:
					}
				}
				break;
			case 1:
				var value1 = _g[2];
				break;
			}
		}
		return false;
	}
	,getFirstId: function(components) {
		{
			var _g = components[0];
			switch(_g[1]) {
			case 0:
				var value = _g[2];
				if(value.startValue == cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL) {
					if(value.simpleSelectors.length != 0) {
						var _g1 = value.simpleSelectors[0];
						switch(_g1[1]) {
						case 3:
							var value1 = _g1[2];
							return value1;
						default:
						}
					}
				}
				break;
			case 1:
				var value2 = _g[2];
				break;
			}
		}
		return null;
	}
	,getFirstType: function(components) {
		{
			var _g = components[0];
			switch(_g[1]) {
			case 0:
				var value = _g[2];
				{
					var _g1 = value.startValue;
					switch(_g1[1]) {
					case 1:
						var value1 = _g1[2];
						return value1;
					default:
					}
				}
				break;
			case 1:
				var value2 = _g[2];
				break;
			}
		}
		return null;
	}
	,__class__: cocktail_core_css_parsers_CSSSelectorParser
};
var cocktail_core_css_parsers_CSSStyleParser = function() { };
$hxClasses["cocktail.core.css.parsers.CSSStyleParser"] = cocktail_core_css_parsers_CSSStyleParser;
cocktail_core_css_parsers_CSSStyleParser.__name__ = true;
cocktail_core_css_parsers_CSSStyleParser._typedProperties = null;
cocktail_core_css_parsers_CSSStyleParser.parseStyle = function(styles,baseURL) {
	cocktail_core_css_parsers_CSSStyleParser._position = 0;
	var state = cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES;
	var next = cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN;
	if(cocktail_core_css_parsers_CSSStyleParser._typedProperties == null) cocktail_core_css_parsers_CSSStyleParser._typedProperties = [];
	cocktail_core_css_parsers_CSSStyleParser._typedProperties = [];
	var typedProperties = cocktail_core_css_parsers_CSSStyleParser._typedProperties;
	var position = 0;
	var start = position;
	var c = styles.charCodeAt(position);
	var styleName = null;
	while(!(c != c)) {
		switch(state[1]) {
		case 2:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 5:
			switch(c) {
			case 47:
				state = cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN_COMMENT;
				break;
			default:
				start = position;
				state = cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_NAME;
				continue;
			}
			break;
		case 7:
			if(c != 42) state = cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE; else state = cocktail_core_css_parsers_StyleDeclarationParserState.COMMENT;
			break;
		case 6:
			if(c == 42) state = cocktail_core_css_parsers_StyleDeclarationParserState.END_COMMENT;
			break;
		case 8:
			if(c == 47) {
				state = cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES;
				next = cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN;
			} else state = cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE;
			break;
		case 0:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 45)) switch(c) {
			case 58:
				styleName = HxOverrides.substr(styles,start,position - start);
				state = cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES;
				next = cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_VALUE;
				continue;
				break;
			case 32:
				styleName = HxOverrides.substr(styles,start,position - start);
				state = cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES;
				next = cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_SEPARATOR;
				continue;
				break;
			default:
				state = cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE;
				continue;
			}
			break;
		case 4:
			if(c == 58) state = cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_VALUE; else {
				state = cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE;
				continue;
			}
			break;
		case 1:
			var typedProperty = cocktail_core_css_parsers_CSSStyleParser.parseStyleValue(styleName,styles,position,baseURL);
			position = cocktail_core_css_parsers_CSSStyleParser._position;
			if(typedProperty != null) typedProperties.push(typedProperty);
			state = cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES;
			next = cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN;
			break;
		case 3:
			return [];
		}
		c = StringTools.fastCodeAt(styles,++position);
	}
	return typedProperties;
};
cocktail_core_css_parsers_CSSStyleParser.parseStyleValue = function(propertyName,styles,position,baseURL) {
	var c = styles.charCodeAt(position);
	if(c == 58) {
		++position;
		c = styles.charCodeAt(position);
	}
	var state = cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES;
	var next = cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE;
	var start = position;
	var important = false;
	var styleValues = [];
	var styleValuesLists = [];
	var fontNotations = [];
	try {
		while(!(c != c)) {
			switch(state[1]) {
			case 0:
				switch(c) {
				case 10:case 13:case 9:case 32:
					break;
				default:
					state = next;
					continue;
				}
				break;
			case 4:
				if(c != c) {
					state = cocktail_core_css_parsers_StyleValueParserState.END;
					continue;
				} else if(c == 47 && fontNotations.length > 0) {
					state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
					continue;
				} else {
					if(fontNotations.length == 1) {
						fontNotations.push(styleValues.pop());
						styleValues.push(cocktail_core_css_CSSPropertyValue.FONT_SIZE_LINE_HEIGHT_GROUP(fontNotations[0],fontNotations[1]));
						fontNotations = [];
					}
					switch(c) {
					case 32:
						state = cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES;
						next = cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE;
						break;
					case 44:
						styleValuesLists.push(styleValues);
						styleValues = [];
						state = cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES;
						next = cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE;
						break;
					case 47:
						if(propertyName == "font") {
							fontNotations.push(styleValues.pop());
							state = cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES;
							next = cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE;
						} else {
							state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
							continue;
						}
						break;
					case 59:
						state = cocktail_core_css_parsers_StyleValueParserState.END;
						continue;
						break;
					default:
						state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
						continue;
					}
				}
				break;
			case 1:
				switch(c) {
				case 44:
					styleValuesLists.push(styleValues);
					styleValues = [];
					state = cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES;
					next = cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE;
					c = StringTools.fastCodeAt(styles,++position);
					continue;
					break;
				case 59:
					state = cocktail_core_css_parsers_StyleValueParserState.END;
					continue;
					break;
				case 45:case 43:case 46:
					state = cocktail_core_css_parsers_StyleValueParserState.NUMBER_INTEGER_DIMENSION_PERCENTAGE;
					start = position;
					continue;
					break;
				case 35:
					state = cocktail_core_css_parsers_StyleValueParserState.HEX;
					start = position;
					continue;
					break;
				case 33:
					state = cocktail_core_css_parsers_StyleValueParserState.IMPORTANT;
					start = position;
					continue;
					break;
				case 34:case 39:
					state = cocktail_core_css_parsers_StyleValueParserState.STRING;
					start = position;
					continue;
					break;
				}
				if(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 45) {
					state = cocktail_core_css_parsers_StyleValueParserState.IDENT_FUNCTION;
					start = position;
					continue;
				}
				if(c >= 48 && c <= 57) {
					state = cocktail_core_css_parsers_StyleValueParserState.NUMBER_INTEGER_DIMENSION_PERCENTAGE;
					start = position;
					continue;
				}
				state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
				continue;
				break;
			case 7:
				if(c != c) throw "__break__"; else if(c != 59) {
					state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
					continue;
				} else throw "__break__";
				break;
			case 6:
				var endPosition = cocktail_core_css_parsers_CSSStyleParser.parseImportant(styles,++position);
				if(endPosition != -1) {
					position = endPosition;
					c = styles.charCodeAt(position);
					important = true;
					state = cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES;
					next = cocktail_core_css_parsers_StyleValueParserState.END;
					continue;
				} else {
					state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
					continue;
				}
				break;
			case 8:
				var endPosition1 = cocktail_core_css_parsers_CSSStyleParser.parseHexaColor(styles,++position,styleValues);
				if(endPosition1 != -1) {
					position = endPosition1;
					state = cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END;
				} else {
					state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
					continue;
				}
				break;
			case 9:
				var endPosition2 = cocktail_core_css_parsers_CSSStyleParser.parseString(styles,position,styleValues);
				if(endPosition2 != -1) {
					position = endPosition2;
					c = styles.charCodeAt(position);
					state = cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END;
					continue;
				} else {
					state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
					continue;
				}
				break;
			case 2:
				var endPosition3 = cocktail_core_css_parsers_CSSStyleParser.parseIdentOrFunctionnalNotation(styles,position,styleValues,baseURL);
				if(endPosition3 != -1) {
					position = endPosition3;
					c = styles.charCodeAt(position);
					state = cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END;
					continue;
				} else {
					state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
					continue;
				}
				break;
			case 3:
				var endPosition4 = cocktail_core_css_parsers_CSSStyleParser.parseIntegerNumberDimensionOrPercentage(styles,position,styleValues);
				if(endPosition4 != -1) {
					position = endPosition4;
					c = styles.charCodeAt(position);
					state = cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END;
					continue;
				} else {
					state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
					continue;
				}
				break;
			case 5:
				if(c == 59) {
					cocktail_core_css_parsers_CSSStyleParser._position = ++position;
					return null;
				}
				break;
			}
			c = StringTools.fastCodeAt(styles,++position);
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	cocktail_core_css_parsers_CSSStyleParser._position = position;
	if(fontNotations.length == 1) {
		fontNotations.push(styleValues.pop());
		styleValues.push(cocktail_core_css_CSSPropertyValue.FONT_SIZE_LINE_HEIGHT_GROUP(fontNotations[0],fontNotations[1]));
		fontNotations = [];
	}
	if(styleValuesLists.length == 0) {
		if(styleValues.length == 1) {
			var typedProperty = new cocktail_core_css_TypedPropertyVO();
			typedProperty.important = important;
			typedProperty.index = cocktail_core_css_CSSConstants.getPropertyIndexFromName(propertyName);
			typedProperty.typedValue = styleValues[0];
			return typedProperty;
		} else {
			var typedProperty1 = new cocktail_core_css_TypedPropertyVO();
			typedProperty1.important = important;
			typedProperty1.index = cocktail_core_css_CSSConstants.getPropertyIndexFromName(propertyName);
			typedProperty1.typedValue = cocktail_core_css_CSSPropertyValue.GROUP(styleValues);
			return typedProperty1;
		}
	} else {
		var styleListProperty = [];
		if(styleValues.length > 0) styleValuesLists.push(styleValues);
		var _g1 = 0;
		var _g = styleValuesLists.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(styleValuesLists[i].length == 1) styleListProperty.push(styleValuesLists[i][0]); else styleListProperty.push(cocktail_core_css_CSSPropertyValue.GROUP(styleValuesLists[i]));
		}
		var typedProperty2 = new cocktail_core_css_TypedPropertyVO();
		typedProperty2.important = important;
		typedProperty2.index = cocktail_core_css_CSSConstants.getPropertyIndexFromName(propertyName);
		typedProperty2.typedValue = cocktail_core_css_CSSPropertyValue.CSS_LIST(styleListProperty);
		return typedProperty2;
	}
};
cocktail_core_css_parsers_CSSStyleParser.parseImportant = function(styles,position) {
	var c = styles.charCodeAt(position);
	while(c == 32) c = StringTools.fastCodeAt(styles,++position);
	var start = position;
	while(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 45) c = StringTools.fastCodeAt(styles,++position);
	var ident = HxOverrides.substr(styles,start,position - start);
	if(ident == "important") return position;
	return -1;
};
cocktail_core_css_parsers_CSSStyleParser.parseIntegerNumberDimensionOrPercentage = function(styles,position,styleValues) {
	var c = styles.charCodeAt(position);
	var start = position;
	if(c == 45 || c == 43) c = StringTools.fastCodeAt(styles,++position);
	var isNumber = c == 46;
	while(c >= 48 && c <= 57) c = StringTools.fastCodeAt(styles,++position);
	if(c != c && isNumber == false) {
		var integer = Std.parseInt(HxOverrides.substr(styles,start,position - start));
		styleValues.push(cocktail_core_css_CSSPropertyValue.INTEGER(integer));
		return position;
	}
	if(c == 46) {
		c = StringTools.fastCodeAt(styles,++position);
		isNumber = true;
		while(c >= 48 && c <= 57) c = StringTools.fastCodeAt(styles,++position);
	}
	if(c != c) {
		var number = Std.parseFloat(HxOverrides.substr(styles,start,position - start));
		styleValues.push(cocktail_core_css_CSSPropertyValue.NUMBER(number));
		return position;
	}
	if(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 45) {
		var numberOrInteger = Std.parseFloat(HxOverrides.substr(styles,start,position - start));
		position = cocktail_core_css_parsers_CSSStyleParser.parseDimension(numberOrInteger,styles,position,styleValues);
	} else switch(c) {
	case 37:
		var numberOrInteger1 = Std.parseFloat(HxOverrides.substr(styles,start,position - start));
		styleValues.push(cocktail_core_css_CSSPropertyValue.PERCENTAGE(numberOrInteger1));
		++position;
		break;
	default:
		if(isNumber) {
			var number1 = Std.parseFloat(HxOverrides.substr(styles,start,position - start));
			styleValues.push(cocktail_core_css_CSSPropertyValue.NUMBER(number1));
		} else {
			var integer1 = Std.parseInt(HxOverrides.substr(styles,start,position - start));
			styleValues.push(cocktail_core_css_CSSPropertyValue.INTEGER(integer1));
		}
	}
	return position;
};
cocktail_core_css_parsers_CSSStyleParser.parseDimension = function(numberOrInteger,styles,position,styleValues) {
	var c = styles.charCodeAt(position);
	var start = position;
	while(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 45) c = StringTools.fastCodeAt(styles,++position);
	var ident = HxOverrides.substr(styles,start,position - start);
	switch(ident) {
	case "px":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.PX(numberOrInteger)));
		break;
	case "em":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.EM(numberOrInteger)));
		break;
	case "ex":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.EX(numberOrInteger)));
		break;
	case "mm":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.MM(numberOrInteger)));
		break;
	case "in":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.IN(numberOrInteger)));
		break;
	case "cm":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.CM(numberOrInteger)));
		break;
	case "pc":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.PC(numberOrInteger)));
		break;
	case "pt":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.PT(numberOrInteger)));
		break;
	case "ch":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.CH(numberOrInteger)));
		break;
	case "rem":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.REM(numberOrInteger)));
		break;
	case "vh":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.VH(numberOrInteger)));
		break;
	case "vw":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.VW(numberOrInteger)));
		break;
	case "vmin":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.VMIN(numberOrInteger)));
		break;
	case "vmax":
		styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.VMAX(numberOrInteger)));
		break;
	case "deg":
		styleValues.push(cocktail_core_css_CSSPropertyValue.ANGLE(cocktail_core_css_CSSAngleValue.DEG(numberOrInteger)));
		break;
	case "rad":
		styleValues.push(cocktail_core_css_CSSPropertyValue.ANGLE(cocktail_core_css_CSSAngleValue.RAD(numberOrInteger)));
		break;
	case "grad":
		styleValues.push(cocktail_core_css_CSSPropertyValue.ANGLE(cocktail_core_css_CSSAngleValue.GRAD(numberOrInteger)));
		break;
	case "turn":
		styleValues.push(cocktail_core_css_CSSPropertyValue.ANGLE(cocktail_core_css_CSSAngleValue.TURN(numberOrInteger)));
		break;
	case "s":
		styleValues.push(cocktail_core_css_CSSPropertyValue.TIME(cocktail_core_css_CSSTimeValue.SECONDS(numberOrInteger)));
		break;
	case "ms":
		styleValues.push(cocktail_core_css_CSSPropertyValue.TIME(cocktail_core_css_CSSTimeValue.MILLISECONDS(numberOrInteger)));
		break;
	case "Hz":
		styleValues.push(cocktail_core_css_CSSPropertyValue.FREQUENCY(cocktail_core_css_CSSFrequencyValue.HERTZ(numberOrInteger)));
		break;
	case "kHz":
		styleValues.push(cocktail_core_css_CSSPropertyValue.FREQUENCY(cocktail_core_css_CSSFrequencyValue.KILO_HERTZ(numberOrInteger)));
		break;
	case "dpi":
		styleValues.push(cocktail_core_css_CSSPropertyValue.RESOLUTION(cocktail_core_css_CSSResolutionValue.DPI(numberOrInteger)));
		break;
	case "dpcm":
		styleValues.push(cocktail_core_css_CSSPropertyValue.RESOLUTION(cocktail_core_css_CSSResolutionValue.DPCM(numberOrInteger)));
		break;
	case "dppx":
		styleValues.push(cocktail_core_css_CSSPropertyValue.RESOLUTION(cocktail_core_css_CSSResolutionValue.DPPX(numberOrInteger)));
		break;
	default:
		return -1;
	}
	return position;
};
cocktail_core_css_parsers_CSSStyleParser.parseString = function(styles,position,styleValues) {
	var quote = styles.charCodeAt(position);
	var start = ++position;
	var c = styles.charCodeAt(position);
	while(c != quote) {
		if(c != c) return -1;
		c = StringTools.fastCodeAt(styles,++position);
	}
	var stringValue = HxOverrides.substr(styles,start,position - start);
	styleValues.push(cocktail_core_css_CSSPropertyValue.STRING(stringValue));
	return ++position;
};
cocktail_core_css_parsers_CSSStyleParser.parseIdentOrFunctionnalNotation = function(styles,position,styleValues,baseURL) {
	var c = styles.charCodeAt(position);
	var start = position;
	while(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 45) c = StringTools.fastCodeAt(styles,++position);
	var ident = HxOverrides.substr(styles,start,position - start);
	switch(c) {
	case 40:
		position = cocktail_core_css_parsers_CSSStyleParser.parseFunctionnalNotation(ident,styles,++position,styleValues,baseURL);
		break;
	default:
		cocktail_core_css_parsers_CSSStyleParser.parseIdent(ident,styleValues);
	}
	return position;
};
cocktail_core_css_parsers_CSSStyleParser.parseHexaColor = function(styles,position,styleValues) {
	var c = styles.charCodeAt(position);
	var start = position;
	while(c >= 97 && c <= 102 || c >= 65 && c <= 70 || c >= 48 && c <= 57) c = StringTools.fastCodeAt(styles,++position);
	var hexa = HxOverrides.substr(styles,start,position - start);
	if(hexa.length == 3 || hexa.length == 6) {
		styleValues.push(cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(hexa)));
		return --position;
	}
	return -1;
};
cocktail_core_css_parsers_CSSStyleParser.parseFunctionnalNotation = function(ident,styles,position,styleValues,baseURL) {
	var c = styles.charCodeAt(position);
	var start = position;
	while(c != 41) {
		if(c != c) return -1;
		c = StringTools.fastCodeAt(styles,++position);
	}
	var cssFunction = HxOverrides.substr(styles,start,position - start);
	if(ident == "url") {
		if(cssFunction.charAt(0) != "'" && cssFunction.charAt(0) != "\"") cssFunction = "'" + cssFunction + "'";
	}
	var functionValues = cocktail_core_css_parsers_CSSStyleParser.parseStyleValue("",cssFunction,0,baseURL);
	var functionValue = cocktail_core_css_parsers_CSSStyleParser.getFunctionalNotation(ident,functionValues.typedValue,baseURL);
	if(functionValue == null) return -1; else {
		styleValues.push(functionValue);
		return ++position;
	}
};
cocktail_core_css_parsers_CSSStyleParser.getFunctionalNotation = function(name,value,baseURL) {
	switch(name) {
	case "rgb":
		return cocktail_core_css_parsers_CSSStyleParser.parseRGBOrRGBA(value,false);
	case "rgba":
		return cocktail_core_css_parsers_CSSStyleParser.parseRGBOrRGBA(value,true);
	case "url":
		switch(value[1]) {
		case 3:
			var value1 = value[2];
			return cocktail_core_css_CSSPropertyValue.URL(cocktail_core_css_parsers_CSSStyleParser.getURLRelativeToDocument(value1,baseURL));
		case 6:
			var value2 = value[2];
			return cocktail_core_css_CSSPropertyValue.URL(cocktail_core_css_parsers_CSSStyleParser.getURLRelativeToDocument(value2,baseURL));
		default:
			return null;
		}
		break;
	case "matrix":
		switch(value[1]) {
		case 15:
			var value3 = value[2];
			if(value3.length == 6) {
				var matrixNumbers = [];
				var _g1 = 0;
				var _g = value3.length;
				while(_g1 < _g) {
					var i = _g1++;
					{
						var _g2 = value3[i];
						switch(_g2[1]) {
						case 1:
							var value4 = _g2[2];
							matrixNumbers.push(value4);
							break;
						case 0:
							var value5 = _g2[2];
							matrixNumbers.push(value5);
							break;
						default:
							return null;
						}
					}
				}
				return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.MATRIX(matrixNumbers[0],matrixNumbers[1],matrixNumbers[2],matrixNumbers[3],matrixNumbers[4],matrixNumbers[5]));
			}
			break;
		default:
		}
		break;
	case "rotate":
		switch(value[1]) {
		case 8:
			var value6 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.ROTATE(value6));
		default:
		}
		break;
	case "scaleX":
		switch(value[1]) {
		case 1:
			var value7 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE_X(value7));
		case 0:
			var value8 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE_X(value8));
		default:
		}
		break;
	case "scaleY":
		switch(value[1]) {
		case 1:
			var value9 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE_Y(value9));
		case 0:
			var value10 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE_Y(value10));
		default:
		}
		break;
	case "scale":
		switch(value[1]) {
		case 1:
			var value11 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE(value11,value11));
		case 0:
			var value12 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE(value12,value12));
		case 15:
			var value13 = value[2];
			if(value13.length == 2) {
				var scaleX = 0.0;
				var scaleY = 0.0;
				{
					var _g3 = value13[0];
					switch(_g3[1]) {
					case 1:
						var value14 = _g3[2];
						scaleX = value14;
						break;
					case 0:
						var value15 = _g3[2];
						scaleX = value15;
						break;
					default:
						return null;
					}
				}
				{
					var _g4 = value13[1];
					switch(_g4[1]) {
					case 1:
						var value16 = _g4[2];
						scaleY = value16;
						break;
					case 0:
						var value17 = _g4[2];
						scaleY = value17;
						break;
					default:
						return null;
					}
				}
				return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE(scaleX,scaleY));
			}
			break;
		default:
		}
		break;
	case "skew":
		switch(value[1]) {
		case 8:
			var value18 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SKEW(value18,value18));
		case 15:
			var value19 = value[2];
			if(value19.length == 2) {
				var skewX = null;
				var skewY = null;
				{
					var _g5 = value19[0];
					switch(_g5[1]) {
					case 8:
						var value20 = _g5[2];
						skewX = value20;
						break;
					default:
						return null;
					}
				}
				{
					var _g6 = value19[1];
					switch(_g6[1]) {
					case 8:
						var value21 = _g6[2];
						skewY = value21;
						break;
					default:
						return null;
					}
				}
				return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SKEW(skewX,skewY));
			}
			break;
		default:
		}
		break;
	case "skewX":
		switch(value[1]) {
		case 8:
			var value22 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SKEW_X(value22));
		default:
		}
		break;
	case "skewY":
		switch(value[1]) {
		case 8:
			var value23 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SKEW_Y(value23));
		default:
		}
		break;
	case "translateX":
		switch(value[1]) {
		case 18:
			var value24 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_X(cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH(value24)));
		case 2:
			var value25 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_X(cocktail_core_css_CSSTranslationValue.PERCENTAGE(value25)));
		case 7:
			var value26 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_X(cocktail_core_css_CSSTranslationValue.LENGTH(value26)));
		default:
		}
		break;
	case "translateY":
		switch(value[1]) {
		case 18:
			var value27 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_Y(cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH(value27)));
		case 2:
			var value28 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_Y(cocktail_core_css_CSSTranslationValue.PERCENTAGE(value28)));
		case 7:
			var value29 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_Y(cocktail_core_css_CSSTranslationValue.LENGTH(value29)));
		default:
		}
		break;
	case "translate":
		switch(value[1]) {
		case 18:
			var value30 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE(cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH(value30),cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH(value30)));
		case 2:
			var value31 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE(cocktail_core_css_CSSTranslationValue.PERCENTAGE(value31),cocktail_core_css_CSSTranslationValue.PERCENTAGE(value31)));
		case 7:
			var value32 = value[2];
			return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE(cocktail_core_css_CSSTranslationValue.LENGTH(value32),cocktail_core_css_CSSTranslationValue.LENGTH(value32)));
		case 15:
			var value33 = value[2];
			var translateX = null;
			var translateY = null;
			if(value33.length == 2) {
				{
					var _g7 = value33[0];
					switch(_g7[1]) {
					case 18:
						var value34 = _g7[2];
						translateX = cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH(value34);
						break;
					case 2:
						var value35 = _g7[2];
						translateX = cocktail_core_css_CSSTranslationValue.PERCENTAGE(value35);
						break;
					case 7:
						var value36 = _g7[2];
						translateX = cocktail_core_css_CSSTranslationValue.LENGTH(value36);
						break;
					default:
						return null;
					}
				}
				{
					var _g8 = value33[1];
					switch(_g8[1]) {
					case 18:
						var value37 = _g8[2];
						translateY = cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH(value37);
						break;
					case 2:
						var value38 = _g8[2];
						translateY = cocktail_core_css_CSSTranslationValue.PERCENTAGE(value38);
						break;
					case 7:
						var value39 = _g8[2];
						translateY = cocktail_core_css_CSSTranslationValue.LENGTH(value39);
						break;
					default:
						return null;
					}
				}
				return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE(translateX,translateY));
			}
			break;
		default:
		}
		break;
	default:
	}
	return null;
};
cocktail_core_css_parsers_CSSStyleParser.parseRGBOrRGBA = function(property,isRGBA) {
	switch(property[1]) {
	case 15:
		var value = property[2];
		if(isRGBA == true) {
			if(value.length != 4) return null;
		} else if(value.length != 3) return null;
		var isPercentRGB = false;
		var red = 0;
		var green = 0;
		var blue = 0;
		var percentRed = 0.0;
		var percentGreen = 0.0;
		var percentBlue = 0.0;
		{
			var _g = value[0];
			switch(_g[1]) {
			case 0:
				var value1 = _g[2];
				red = value1;
				break;
			case 2:
				var value2 = _g[2];
				percentRed = value2;
				isPercentRGB = true;
				break;
			default:
				return null;
			}
		}
		{
			var _g1 = value[1];
			switch(_g1[1]) {
			case 0:
				var value3 = _g1[2];
				green = value3;
				if(isPercentRGB == true) return null;
				break;
			case 2:
				var value4 = _g1[2];
				percentGreen = value4;
				if(isPercentRGB == false) return null;
				break;
			default:
				return null;
			}
		}
		{
			var _g2 = value[2];
			switch(_g2[1]) {
			case 0:
				var value5 = _g2[2];
				blue = value5;
				if(isPercentRGB == true) return null;
				break;
			case 2:
				var value6 = _g2[2];
				percentBlue = value6;
				if(isPercentRGB == false) return null;
				break;
			default:
				return null;
			}
		}
		if(isRGBA == false) {
			if(isPercentRGB == true) return cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.RGB_PERCENTAGE(percentRed,percentGreen,percentBlue)); else return cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.RGB(red,green,blue));
		} else {
			var alpha = 0.0;
			{
				var _g3 = value[3];
				switch(_g3[1]) {
				case 1:
					var value7 = _g3[2];
					alpha = value7;
					break;
				case 0:
					var value8 = _g3[2];
					alpha = value8;
					break;
				default:
					return null;
				}
			}
			if(isPercentRGB == true) return cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.RGBA_PERCENTAGE(percentRed,percentGreen,percentBlue,alpha)); else return cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.RGBA(red,green,blue,alpha));
		}
		return null;
	default:
		return null;
	}
};
cocktail_core_css_parsers_CSSStyleParser.parseIdent = function(ident,styleValues) {
	ident = ident.toLowerCase();
	switch(ident) {
	case "inherit":
		styleValues.push(cocktail_core_css_CSSPropertyValue.INHERIT);
		break;
	case "initial":
		styleValues.push(cocktail_core_css_CSSPropertyValue.INITIAL);
		break;
	default:
		cocktail_core_css_parsers_CSSStyleParser.parseKeyword(ident,styleValues);
	}
};
cocktail_core_css_parsers_CSSStyleParser.parseKeyword = function(ident,styleValues) {
	var cssPropertyValue = cocktail_core_css_CSSPropertyValue.IDENTIFIER(ident);
	switch(ident) {
	case "normal":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL);
		break;
	case "bold":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BOLD);
		break;
	case "bolder":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BOLDER);
		break;
	case "lighter":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LIGHTER);
		break;
	case "oblique":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.OBLIQUE);
		break;
	case "italic":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ITALIC);
		break;
	case "small-caps":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SMALL_CAPS);
		break;
	case "pre":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.PRE);
		break;
	case "nowrap":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NO_WRAP);
		break;
	case "pre-wrap":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.PRE_WRAP);
		break;
	case "pre-line":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.PRE_LINE);
		break;
	case "left":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LEFT);
		break;
	case "right":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.RIGHT);
		break;
	case "center":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CENTER);
		break;
	case "justify":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.JUSTIFY);
		break;
	case "capitalize":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CAPITALIZE);
		break;
	case "uppercase":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.UPPERCASE);
		break;
	case "lowercase":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LOWERCASE);
		break;
	case "none":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE);
		break;
	case "baseline":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BASELINE);
		break;
	case "sub":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SUB);
		break;
	case "super":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SUPER);
		break;
	case "top":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.TOP);
		break;
	case "text-top":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.TEXT_TOP);
		break;
	case "middle":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MIDDLE);
		break;
	case "bottom":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BOTTOM);
		break;
	case "text-bottom":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.TEXT_BOTTOM);
		break;
	case "auto":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO);
		break;
	case "block":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BLOCK);
		break;
	case "inline-block":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INLINE_BLOCK);
		break;
	case "inline":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INLINE);
		break;
	case "both":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BOTH);
		break;
	case "static":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.STATIC);
		break;
	case "relative":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.RELATIVE);
		break;
	case "absolute":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ABSOLUTE);
		break;
	case "fixed":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.FIXED);
		break;
	case "visible":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE);
		break;
	case "hidden":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.HIDDEN);
		break;
	case "scroll":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SCROLL);
		break;
	case "border-box":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BORDER_BOX);
		break;
	case "padding-box":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.PADDING_BOX);
		break;
	case "content-box":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CONTENT_BOX);
		break;
	case "contain":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CONTAIN);
		break;
	case "cover":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.COVER);
		break;
	case "crosshair":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CROSSHAIR);
		break;
	case "default":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.DEFAULT);
		break;
	case "pointer":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.POINTER);
		break;
	case "text":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.TEXT);
		break;
	case "all":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ALL);
		break;
	case "ease":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.EASE);
		break;
	case "linear":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LINEAR);
		break;
	case "ease-in":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.EASE_IN);
		break;
	case "ease-out":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.EASE_OUT);
		break;
	case "ease-in-out":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.EASE_IN_OUT);
		break;
	case "step-start":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.STEP_START);
		break;
	case "step-end":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.STEP_END);
		break;
	case "start":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.START);
		break;
	case "end":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.END);
		break;
	case "x-small":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.X_SMALL);
		break;
	case "xx-small":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.XX_SMALL);
		break;
	case "x-large":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.X_LARGE);
		break;
	case "xx-large":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.XX_LARGE);
		break;
	case "medium":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM);
		break;
	case "smaller":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SMALLER);
		break;
	case "larger":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LARGER);
		break;
	case "space":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SPACE);
		break;
	case "round":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ROUND);
		break;
	case "large":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LARGE);
		break;
	case "small":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SMALL);
		break;
	case "repeat-x":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT_X);
		break;
	case "repeat-y":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT_Y);
		break;
	case "no-repeat":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NO_REPEAT);
		break;
	case "repeat":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT);
		break;
	case "thin":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.THIN);
		break;
	case "thick":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.THICK);
		break;
	case "dotted":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.DOTTED);
		break;
	case "dashed":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.DASHED);
		break;
	case "solid":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SOLID);
		break;
	case "double":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.DOUBLE);
		break;
	case "groove":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.GROOVE);
		break;
	case "ridge":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.RIDGE);
		break;
	case "inset":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INSET);
		break;
	case "outset":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.OUTSET);
		break;
	case "invert":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INVERT);
		break;
	case "underline":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.UNDERLINE);
		break;
	case "overline":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.OVERLINE);
		break;
	case "line-through":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LINE_THROUGH);
		break;
	case "blink":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BLINK);
		break;
	case "transparent":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.TRANSPARENT);
		break;
	case "currentcolor":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.CURRENT_COLOR);
		break;
	default:
		cssPropertyValue = cocktail_core_css_parsers_CSSStyleParser.parseColorKeyword(ident);
	}
	if(cssPropertyValue == null) cssPropertyValue = cocktail_core_css_CSSPropertyValue.IDENTIFIER(ident);
	styleValues.push(cssPropertyValue);
};
cocktail_core_css_parsers_CSSStyleParser.parseColorKeyword = function(ident) {
	var cssPropertyValue = null;
	switch(ident) {
	case "aliceblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ALICE_BLUE));
		break;
	case "antiquewhite":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ANTIQUE_WHITE));
		break;
	case "aqua":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.AQUA));
		break;
	case "aquamarine":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.AQUAMARINE));
		break;
	case "azure":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.AZURE));
		break;
	case "beige":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BEIGE));
		break;
	case "bisque":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BISQUE));
		break;
	case "dimgray":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DIM_GRAY));
		break;
	case "dimgrey":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DIM_GREY));
		break;
	case "blue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BLUE));
		break;
	case "black":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BLACK));
		break;
	case "blanchedalmond":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BLANCHE_DALMOND));
		break;
	case "blueviolet":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BLUE_VIOLET));
		break;
	case "brown":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BROWN));
		break;
	case "burlywood":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ALICE_BLUE));
		break;
	case "cadetblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CADET_BLUE));
		break;
	case "chartreuse":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CHARTREUSE));
		break;
	case "chocolate":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CHOCOLATE));
		break;
	case "coral":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CORAL));
		break;
	case "cornflowerblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CORNFLOWER_BLUE));
		break;
	case "cornsilk":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CORNSILK));
		break;
	case "crimson":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CRIMSON));
		break;
	case "cyan":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CYAN));
		break;
	case "darkblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_BLUE));
		break;
	case "darkgoldenrod":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_GOLDEN_ROD));
		break;
	case "darkgray":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_GRAY));
		break;
	case "darkgreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_GREEN));
		break;
	case "darkgrey":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_GREY));
		break;
	case "darkkhaki":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_KHAKI));
		break;
	case "darkmagenta":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_MAGENTA));
		break;
	case "darkolivegreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_OLIVE_GREEN));
		break;
	case "darkorange":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_ORANGE));
		break;
	case "darkorchid":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_ORCHID));
		break;
	case "darkred":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_RED));
		break;
	case "darksalmon":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_SALMON));
		break;
	case "darkseagreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_SEA_GREEN));
		break;
	case "darkslateblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_SLATE_BLUE));
		break;
	case "darkslategray":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_SLATE_GRAY));
		break;
	case "darkslategrey":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_SLATE_GREY));
		break;
	case "darkturquoise":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_TURQUOISE));
		break;
	case "darkviolet":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_VIOLET));
		break;
	case "deeppink":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DEEP_PINK));
		break;
	case "deepskyblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DEEP_SKY_BLUE));
		break;
	case "dodgerblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DODGER_BLUE));
		break;
	case "firebrick":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.FIRE_BRICK));
		break;
	case "floralwhite":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.FLORAL_WHITE));
		break;
	case "forestgreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.FOREST_GREEN));
		break;
	case "gainsboro":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GAINSBORO));
		break;
	case "ghostwhite":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GHOST_WHITE));
		break;
	case "gold":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GOLD));
		break;
	case "goldenrod":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GOLDEN_ROD));
		break;
	case "greenyellow":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GREEN_YELLOW));
		break;
	case "honeydew":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.HONEY_DEW));
		break;
	case "hotpink":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.HOT_PINK));
		break;
	case "indianred":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.INDIAN_RED));
		break;
	case "indigo":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.INDIGO));
		break;
	case "ivory":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.IVORY));
		break;
	case "khaki":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.KHAKI));
		break;
	case "lavender":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LAVENDER));
		break;
	case "lavenderblush":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LAVENDER_BLUSH));
		break;
	case "lawngreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LAWN_GREEN));
		break;
	case "lemonchiffon":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LEMON_CHIFFON));
		break;
	case "lightblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_BLUE));
		break;
	case "lightcoral":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_CORAL));
		break;
	case "lightcyan":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_CYAN));
		break;
	case "lightgoldenrodyellow":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_GOLDENROD_YELLOW));
		break;
	case "lightgray":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_GRAY));
		break;
	case "lightgrey":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_GREY));
		break;
	case "lightgreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_GREEN));
		break;
	case "lightpink":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_PINK));
		break;
	case "lightsalmon":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_SALMON));
		break;
	case "lightseagreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_SEA_GREEN));
		break;
	case "lightskyblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_SKY_BLUE));
		break;
	case "lightslategray":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GRAY));
		break;
	case "lightslategrey":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GREY));
		break;
	case "lightsteelblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_STEEL_BLUE));
		break;
	default:
		cssPropertyValue = cocktail_core_css_parsers_CSSStyleParser.parseColorKeyword2(ident);
	}
	return cssPropertyValue;
};
cocktail_core_css_parsers_CSSStyleParser.parseColorKeyword2 = function(ident) {
	var cssPropertyValue = null;
	switch(ident) {
	case "lightyellow":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_YELLOW));
		break;
	case "limegreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIME_GREEN));
		break;
	case "linen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LINEN));
		break;
	case "magenta":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MAGENTA));
		break;
	case "marron":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MAROON));
		break;
	case "mediumaquamarine":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_AQUAMARINE));
		break;
	case "mediumblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_BLUE));
		break;
	case "mediumorchid":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_ORCHID));
		break;
	case "mediumpurple":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_PURPLE));
		break;
	case "mediumseagreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_SEA_GREEN));
		break;
	case "mediumslateblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_SLATE_BLUE));
		break;
	case "mediumspringgreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_SPRING_GREEN));
		break;
	case "mintcream":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MINT_CREAM));
		break;
	case "mistyrose":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MISTY_ROSE));
		break;
	case "moccasin":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MOCCASIN));
		break;
	case "navajowhite":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.NAVAJO_WHITE));
		break;
	case "oldlace":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.OLD_LACE));
		break;
	case "olivedrab":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.OLIVE_DRAB));
		break;
	case "orangered":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ORANGE_RED));
		break;
	case "orchid":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ORCHID));
		break;
	case "palegoldenrod":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PALE_GOLDEN_ROD));
		break;
	case "palegreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PALE_GREEN));
		break;
	case "paleturquoise":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PALE_TURQUOISE));
		break;
	case "palevioletred":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PALE_VIOLET_RED));
		break;
	case "papayawhip":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PAPAYA_WHIP));
		break;
	case "peachpuff":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PEACH_PUFF));
		break;
	case "peru":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PERU));
		break;
	case "pink":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PINK));
		break;
	case "plum":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PLUM));
		break;
	case "powderblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.POWDER_BLUE));
		break;
	case "rosybrown":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ROSY_BROWN));
		break;
	case "royalblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ROYAL_BLUE));
		break;
	case "saddlebrown":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SADDLE_BROWN));
		break;
	case "salmon":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SALMON));
		break;
	case "sandybrown":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SANDY_BROWN));
		break;
	case "seagreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SEA_GREEN));
		break;
	case "sienna":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SIENNA));
		break;
	case "skyblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SKY_BLUE));
		break;
	case "slateblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SLATE_BLUE));
		break;
	case "slategray":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SLATE_GRAY));
		break;
	case "slategrey":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SLATE_GREY));
		break;
	case "snow":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SNOW));
		break;
	case "springgreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SPRING_GREEN));
		break;
	case "steelblue":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.STEEL_BLUE));
		break;
	case "tan":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.TAN));
		break;
	case "thisle":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.THISLE));
		break;
	case "tomato":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.TOMATO));
		break;
	case "turquoise":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.TURQUOISE));
		break;
	case "violet":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.VIOLET));
		break;
	case "wheat":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.WHEAT));
		break;
	case "whitesmoke":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.WHITE_SMOKE));
		break;
	case "yellowgreen":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.YELLOW_GREEN));
		break;
	case "silver":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SILVER));
		break;
	case "gray":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GRAY));
		break;
	case "grey":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GREY));
		break;
	case "white":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.WHITE));
		break;
	case "maroon":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MAROON));
		break;
	case "red":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.RED));
		break;
	case "purple":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PURPLE));
		break;
	case "fuchsia":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.FUCHSIA));
		break;
	case "green":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GREEN));
		break;
	case "lime":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIME));
		break;
	case "olive":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.OLIVE));
		break;
	case "yellow":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.YELLOW));
		break;
	case "navy":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.NAVY));
		break;
	case "orange":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ORANGE));
		break;
	case "teal":
		cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.TEAL));
		break;
	}
	return cssPropertyValue;
};
cocktail_core_css_parsers_CSSStyleParser.getURLRelativeToDocument = function(value,baseURL) {
	if(baseURL == null) return value;
	var url = cocktail_core_url_URL.fromString(value);
	if(cocktail_core_url_URL.isRelative(url) == false) return value;
	var typedBaseURL = cocktail_core_url_URL.fromString(baseURL);
	return cocktail_core_url_URL.toString(cocktail_core_url_URL.appendURL(typedBaseURL,url));
};
var cocktail_core_css_parsers_CSSStyleSerializer = function() { };
$hxClasses["cocktail.core.css.parsers.CSSStyleSerializer"] = cocktail_core_css_parsers_CSSStyleSerializer;
cocktail_core_css_parsers_CSSStyleSerializer.__name__ = true;
cocktail_core_css_parsers_CSSStyleSerializer.serialize = function(property) {
	switch(property[1]) {
	case 4:
		var value = property[2];
		return cocktail_core_css_parsers_CSSStyleSerializer.serializeKeyword(value);
	case 3:
		var value1 = property[2];
		return value1;
	case 6:
		var value2 = property[2];
		return "\"" + value2 + "\"";
	case 5:
		var value3 = property[2];
		return "url(" + value3 + ")";
	case 16:
		return "inherit";
	case 17:
		return "initial";
	case 9:
		var value4 = property[2];
		return cocktail_core_css_parsers_CSSStyleSerializer.serializeTime(value4);
	case 2:
		var value5 = property[2];
		return value5 + "%";
	case 8:
		var value6 = property[2];
		return cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle(value6);
	case 0:
		var value7 = property[2];
		if(value7 == null) return "null"; else return "" + value7;
		break;
	case 1:
		var value8 = property[2];
		if(value8 == null) return "null"; else return "" + value8;
		break;
	case 18:
		var value9 = property[2];
		if(value9 == null) return "null"; else return "" + value9;
		break;
	case 19:
		var intervalChange = property[3];
		var intervalNumber = property[2];
		return "steps(" + (intervalNumber == null?"null":"" + intervalNumber) + "," + cocktail_core_css_parsers_CSSStyleSerializer.serializeKeyword(intervalChange) + ")";
	case 20:
		var y2 = property[5];
		var x2 = property[4];
		var y1 = property[3];
		var x1 = property[2];
		return "cubic-bezier(" + (x1 == null?"null":"" + x1) + "," + (y1 == null?"null":"" + y1) + "," + (x2 == null?"null":"" + x2) + "," + (y2 == null?"null":"" + y2) + ")";
	case 10:
		var value10 = property[2];
		return cocktail_core_css_parsers_CSSStyleSerializer.serializeFrequency(value10);
	case 7:
		var value11 = property[2];
		return cocktail_core_css_parsers_CSSStyleSerializer.serializeLength(value11);
	case 11:
		var value12 = property[2];
		return cocktail_core_css_parsers_CSSStyleSerializer.serializeResolution(value12);
	case 12:
		var value13 = property[2];
		return cocktail_core_css_parsers_CSSStyleSerializer.serializeColor(value13);
	case 21:
		var value14 = property[2];
		return cocktail_core_css_parsers_CSSStyleSerializer.serializeTransformFunction(value14);
	case 13:
		var value15 = property[2];
		return cocktail_core_css_parsers_CSSStyleSerializer.serializeGroup(value15);
	case 14:
		var lineHeight = property[3];
		var fontSize = property[2];
		return cocktail_core_css_parsers_CSSStyleSerializer.serialize(fontSize) + "/" + cocktail_core_css_parsers_CSSStyleSerializer.serialize(lineHeight);
	case 15:
		var value16 = property[2];
		return cocktail_core_css_parsers_CSSStyleSerializer.serializeList(value16);
	}
};
cocktail_core_css_parsers_CSSStyleSerializer.serializeList = function(list) {
	var serializedList = "";
	var _g1 = 0;
	var _g = list.length;
	while(_g1 < _g) {
		var i = _g1++;
		serializedList += cocktail_core_css_parsers_CSSStyleSerializer.serialize(list[i]);
		if(i < list.length) serializedList += ",";
	}
	return serializedList;
};
cocktail_core_css_parsers_CSSStyleSerializer.serializeGroup = function(group) {
	var serializedGroup = "";
	var _g1 = 0;
	var _g = group.length;
	while(_g1 < _g) {
		var i = _g1++;
		serializedGroup += cocktail_core_css_parsers_CSSStyleSerializer.serialize(group[i]);
		if(i < group.length) serializedGroup += " ";
	}
	return serializedGroup;
};
cocktail_core_css_parsers_CSSStyleSerializer.serializeTransformFunction = function(transformFunction) {
	switch(transformFunction[1]) {
	case 0:
		var f = transformFunction[7];
		var e = transformFunction[6];
		var d = transformFunction[5];
		var c = transformFunction[4];
		var b = transformFunction[3];
		var a = transformFunction[2];
		return "matrix(" + (a == null?"null":"" + a) + "," + (b == null?"null":"" + b) + "," + (c == null?"null":"" + c) + "," + (d == null?"null":"" + d) + "," + (e == null?"null":"" + e) + "," + (f == null?"null":"" + f) + ")";
	case 1:
		var ty = transformFunction[3];
		var tx = transformFunction[2];
		return "translate(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeTranslation(tx) + "," + cocktail_core_css_parsers_CSSStyleSerializer.serializeTranslation(ty) + ")";
	case 2:
		var tx1 = transformFunction[2];
		return "translateX(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeTranslation(tx1) + ")";
	case 3:
		var ty1 = transformFunction[2];
		return "translateY(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeTranslation(ty1) + ")";
	case 10:
		var angleY = transformFunction[3];
		var angleX = transformFunction[2];
		return "skew(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle(angleX) + "," + cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle(angleY) + ")";
	case 8:
		var angleX1 = transformFunction[2];
		return "skewX(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle(angleX1) + ")";
	case 9:
		var angleY1 = transformFunction[2];
		return "skewY(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle(angleY1) + ")";
	case 7:
		var angle = transformFunction[2];
		return "rotate(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle(angle) + ")";
	case 4:
		var sy = transformFunction[3];
		var sx = transformFunction[2];
		return "scale(" + (sx == null?"null":"" + sx) + "," + (sy == null?"null":"" + sy) + ")";
	case 5:
		var sx1 = transformFunction[2];
		return "scaleX(" + (sx1 == null?"null":"" + sx1) + ")";
	case 6:
		var sy1 = transformFunction[2];
		return "scaleY(" + (sy1 == null?"null":"" + sy1) + ")";
	}
};
cocktail_core_css_parsers_CSSStyleSerializer.serializeTranslation = function(translation) {
	switch(translation[1]) {
	case 1:
		var value = translation[2];
		return cocktail_core_css_parsers_CSSStyleSerializer.serializeLength(value);
	case 2:
		var value1 = translation[2];
		return value1 + "%";
	case 0:
		var value2 = translation[2];
		if(value2 == null) return "null"; else return "" + value2;
		break;
	}
};
cocktail_core_css_parsers_CSSStyleSerializer.serializeColor = function(color) {
	switch(color[1]) {
	case 7:
		var value = color[2];
		return cocktail_core_css_parsers_CSSStyleSerializer.serializeColorKeyword(value);
	case 0:
		var blue = color[4];
		var green = color[3];
		var red = color[2];
		return "rgb(" + (red == null?"null":"" + red) + "," + (green == null?"null":"" + green) + "," + (blue == null?"null":"" + blue) + ")";
	case 1:
		var blue1 = color[4];
		var green1 = color[3];
		var red1 = color[2];
		return "rgb(" + (red1 == null?"null":"" + red1) + "%," + (green1 == null?"null":"" + green1) + "%," + (blue1 == null?"null":"" + blue1) + "%)";
	case 2:
		var alpha = color[5];
		var blue2 = color[4];
		var green2 = color[3];
		var red2 = color[2];
		return "rgba(" + (red2 == null?"null":"" + red2) + "," + (green2 == null?"null":"" + green2) + "," + (blue2 == null?"null":"" + blue2) + "," + (alpha == null?"null":"" + alpha) + ")";
	case 3:
		var alpha1 = color[5];
		var blue3 = color[4];
		var green3 = color[3];
		var red3 = color[2];
		return "rgba(" + (red3 == null?"null":"" + red3) + "%," + (green3 == null?"null":"" + green3) + "%," + (blue3 == null?"null":"" + blue3) + "%," + (alpha1 == null?"null":"" + alpha1) + "%)";
	case 8:
		return "transparent";
	case 5:
		var lightness = color[4];
		var saturation = color[3];
		var hue = color[2];
		return "hsl(" + (hue == null?"null":"" + hue) + "," + (saturation == null?"null":"" + saturation) + "," + (lightness == null?"null":"" + lightness) + ")";
	case 6:
		var alpha2 = color[5];
		var lightness1 = color[4];
		var saturation1 = color[3];
		var hue1 = color[2];
		return "hsl(" + (hue1 == null?"null":"" + hue1) + "," + (saturation1 == null?"null":"" + saturation1) + "," + (lightness1 == null?"null":"" + lightness1) + "," + (alpha2 == null?"null":"" + alpha2) + ")";
	case 4:
		var value1 = color[2];
		return "#" + value1;
	case 9:
		return "currentColor";
	}
};
cocktail_core_css_parsers_CSSStyleSerializer.serializeColorKeyword = function(keyword) {
	switch(keyword[1]) {
	case 0:
		return "aliceblue";
	case 1:
		return "antiquewhite";
	case 2:
		return "aqua";
	case 3:
		return "aquamarine";
	case 4:
		return "azure";
	case 5:
		return "beige";
	case 6:
		return "bisque";
	case 9:
		return "blue";
	case 7:
		return "black";
	case 8:
		return "blanchedalmond";
	case 10:
		return "blueviolet";
	case 11:
		return "brown";
	case 12:
		return "burlywood";
	case 13:
		return "cadetblue";
	case 14:
		return "chartreuse";
	case 15:
		return "chocolate";
	case 16:
		return "coral";
	case 17:
		return "cornflowerblue";
	case 18:
		return "cornsilk";
	case 19:
		return "crimson";
	case 20:
		return "cyan";
	case 21:
		return "darkblue";
	case 22:
		return "darkcyan";
	case 23:
		return "darkgoldenrod";
	case 24:
		return "darkgray";
	case 25:
		return "darkgreen";
	case 26:
		return "darkgrey";
	case 27:
		return "darkkhaki";
	case 28:
		return "darkmagenta";
	case 29:
		return "darkolivegreen";
	case 30:
		return "darkorange";
	case 31:
		return "darkorchid";
	case 32:
		return "darkred";
	case 33:
		return "darksalmon";
	case 34:
		return "darkseagreen";
	case 35:
		return "darkslateblue";
	case 36:
		return "darkslategray";
	case 37:
		return "darkslategrey";
	case 38:
		return "darkturquoise";
	case 39:
		return "darkviolet";
	case 40:
		return "deeppink";
	case 41:
		return "deepskyblue";
	case 42:
		return "dimgray";
	case 43:
		return "dimgrey";
	case 44:
		return "dodgerblue";
	case 45:
		return "firebrick";
	case 46:
		return "floralwhite";
	case 47:
		return "forestgreen";
	case 48:
		return "fuchsia";
	case 49:
		return "gainsboro";
	case 50:
		return "ghostwhite";
	case 51:
		return "gold";
	case 52:
		return "goldenrod";
	case 53:
		return "gray";
	case 56:
		return "grey";
	case 55:
		return "greenyellow";
	case 57:
		return "honeydew";
	case 58:
		return "hotpink";
	case 60:
		return "indigo";
	case 61:
		return "ivory";
	case 59:
		return "indianred";
	case 62:
		return "khaki";
	case 63:
		return "lavender";
	case 64:
		return "lavenderblush";
	case 65:
		return "lawngreen";
	case 66:
		return "lemonchiffon";
	case 67:
		return "lightblue";
	case 68:
		return "lightcoral";
	case 69:
		return "lightcyan";
	case 70:
		return "lightgoldenrodyellow";
	case 71:
		return "lightgray";
	case 72:
		return "lightgreen";
	case 73:
		return "lightgrey";
	case 74:
		return "lightpink";
	case 75:
		return "lightsalmon";
	case 76:
		return "lightseagreen";
	case 77:
		return "lightskyblue";
	case 78:
		return "lightslategray";
	case 79:
		return "lightslategrey";
	case 80:
		return "lightsteelblue";
	case 81:
		return "lightyellow";
	case 82:
		return "lime";
	case 83:
		return "limegreen";
	case 84:
		return "linen";
	case 85:
		return "magenta";
	case 86:
		return "marron";
	case 87:
		return "mediumaquamarine";
	case 88:
		return "mediumblue";
	case 89:
		return "mediumorchid";
	case 90:
		return "mediumpurple";
	case 91:
		return "mediumseagreen";
	case 92:
		return "mediumslateblue";
	case 93:
		return "mediumspringgreen";
	case 94:
		return "mediumturquoise";
	case 95:
		return "mediumvioletred";
	case 96:
		return "midnightblue";
	case 97:
		return "mintcream";
	case 98:
		return "mistyrose";
	case 99:
		return "moccasin";
	case 100:
		return "navajowhite";
	case 102:
		return "oldlace";
	case 104:
		return "olivedrab";
	case 106:
		return "orangered";
	case 107:
		return "orchid";
	case 108:
		return "palegoldenrod";
	case 109:
		return "palegreen";
	case 110:
		return "paleturquoise";
	case 111:
		return "palevioletred";
	case 112:
		return "papayawhip";
	case 113:
		return "peachpuff";
	case 114:
		return "peru";
	case 115:
		return "pink";
	case 116:
		return "plum";
	case 117:
		return "powderblue";
	case 120:
		return "rosybrown";
	case 121:
		return "royalblue";
	case 122:
		return "saddlebrown";
	case 123:
		return "salmon";
	case 124:
		return "sandybrown";
	case 125:
		return "seagreen";
	case 126:
		return "seashell";
	case 127:
		return "sienna";
	case 128:
		return "silver";
	case 129:
		return "skyblue";
	case 130:
		return "slateblue";
	case 131:
		return "slategray";
	case 132:
		return "slategrey";
	case 133:
		return "snow";
	case 134:
		return "springgreen";
	case 135:
		return "steelblue";
	case 136:
		return "tan";
	case 138:
		return "thisle";
	case 139:
		return "tomato";
	case 140:
		return "turquoise";
	case 141:
		return "violet";
	case 142:
		return "wheat";
	case 143:
		return "white";
	case 144:
		return "whitesmoke";
	case 146:
		return "yellowgreen";
	case 119:
		return "red";
	case 118:
		return "purple";
	case 54:
		return "green";
	case 103:
		return "olive";
	case 145:
		return "yellow";
	case 101:
		return "navy";
	case 105:
		return "orange";
	case 137:
		return "teal";
	}
};
cocktail_core_css_parsers_CSSStyleSerializer.serializeResolution = function(resolution) {
	switch(resolution[1]) {
	case 1:
		var value = resolution[2];
		return value + "dcpm";
	case 0:
		var value1 = resolution[2];
		return value1 + "dpi";
	case 2:
		var value2 = resolution[2];
		return value2 + "dppx";
	}
};
cocktail_core_css_parsers_CSSStyleSerializer.serializeLength = function(length) {
	switch(length[1]) {
	case 0:
		var value = length[2];
		return value + "px";
	case 6:
		var value1 = length[2];
		return value1 + "em";
	case 5:
		var value2 = length[2];
		return value2 + "in";
	case 4:
		var value3 = length[2];
		return value3 + "pc";
	case 8:
		var value4 = length[2];
		return value4 + "ex";
	case 3:
		var value5 = length[2];
		return value5 + "pt";
	case 2:
		var value6 = length[2];
		return value6 + "mm";
	case 1:
		var value7 = length[2];
		return value7 + "cm";
	case 9:
		var value8 = length[2];
		return value8 + "ch";
	case 7:
		var value9 = length[2];
		return value9 + "rem";
	case 13:
		var value10 = length[2];
		return value10 + "vmax";
	case 12:
		var value11 = length[2];
		return value11 + "vmin";
	case 10:
		var value12 = length[2];
		return value12 + "vw";
	case 11:
		var value13 = length[2];
		return value13 + "vh";
	}
};
cocktail_core_css_parsers_CSSStyleSerializer.serializeFrequency = function(frequency) {
	switch(frequency[1]) {
	case 0:
		var value = frequency[2];
		return value + "hz";
	case 1:
		var value1 = frequency[2];
		return value1 + "khz";
	}
};
cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle = function(angle) {
	switch(angle[1]) {
	case 0:
		var value = angle[2];
		return value + "deg";
	case 2:
		var value1 = angle[2];
		return value1 + "rad";
	case 3:
		var value2 = angle[2];
		return value2 + "turn";
	case 1:
		var value3 = angle[2];
		return value3 + "grad";
	}
};
cocktail_core_css_parsers_CSSStyleSerializer.serializeTime = function(time) {
	switch(time[1]) {
	case 0:
		var value = time[2];
		return value + "s";
	case 1:
		var value1 = time[2];
		return value1 + "ms";
	}
};
cocktail_core_css_parsers_CSSStyleSerializer.serializeKeyword = function(keyword) {
	switch(keyword[1]) {
	case 0:
		return "normal";
	case 1:
		return "bold";
	case 2:
		return "bolder";
	case 3:
		return "lighter";
	case 5:
		return "oblique";
	case 4:
		return "italic";
	case 6:
		return "small-caps";
	case 7:
		return "pre";
	case 8:
		return "no-wrap";
	case 9:
		return "pre-wrap";
	case 10:
		return "pre-line";
	case 11:
		return "left";
	case 12:
		return "right";
	case 13:
		return "center";
	case 14:
		return "justify";
	case 15:
		return "capitalize";
	case 16:
		return "uppercase";
	case 17:
		return "lowercase";
	case 18:
		return "none";
	case 19:
		return "baseline";
	case 20:
		return "sub";
	case 21:
		return "super";
	case 22:
		return "top";
	case 23:
		return "text-top";
	case 24:
		return "middle";
	case 25:
		return "bottom";
	case 26:
		return "text-bottom";
	case 27:
		return "auto";
	case 28:
		return "block";
	case 29:
		return "inline-block";
	case 30:
		return "inline";
	case 31:
		return "both";
	case 32:
		return "static";
	case 33:
		return "relative";
	case 34:
		return "absolute";
	case 35:
		return "fixed";
	case 36:
		return "visible";
	case 37:
		return "hidden";
	case 38:
		return "scroll";
	case 39:
		return "border-box";
	case 40:
		return "padding-box";
	case 41:
		return "content-box";
	case 42:
		return "contain";
	case 43:
		return "cover";
	case 44:
		return "crosshair";
	case 45:
		return "default";
	case 46:
		return "pointer";
	case 47:
		return "text";
	case 48:
		return "all";
	case 49:
		return "ease";
	case 50:
		return "linear";
	case 51:
		return "ease-in";
	case 52:
		return "ease-out";
	case 53:
		return "ease-in-out";
	case 54:
		return "step-start";
	case 55:
		return "step-end";
	case 56:
		return "start";
	case 57:
		return "end";
	case 58:
		return "xx-small";
	case 59:
		return "x-small";
	case 60:
		return "small";
	case 64:
		return "xx-large";
	case 63:
		return "x-large";
	case 62:
		return "large";
	case 61:
		return "medium";
	case 65:
		return "larger";
	case 66:
		return "smaller";
	case 70:
		return "space";
	case 71:
		return "round";
	case 69:
		return "repeat-y";
	case 68:
		return "repeat-x";
	case 72:
		return "no-repeat";
	case 67:
		return "repeat";
	case 73:
		return "thin";
	case 74:
		return "thick";
	case 75:
		return "dotted";
	case 76:
		return "dashed";
	case 77:
		return "solid";
	case 78:
		return "double";
	case 79:
		return "groove";
	case 80:
		return "ridge";
	case 81:
		return "inset";
	case 82:
		return "outset";
	case 83:
		return "invert";
	case 84:
		return "underline";
	case 85:
		return "overline";
	case 86:
		return "line-through";
	case 87:
		return "blink";
	}
};
var cocktail_core_event_EventCallback = function() {
	cocktail_core_event_EventTarget.call(this);
};
$hxClasses["cocktail.core.event.EventCallback"] = cocktail_core_event_EventCallback;
cocktail_core_event_EventCallback.__name__ = true;
cocktail_core_event_EventCallback.__super__ = cocktail_core_event_EventTarget;
cocktail_core_event_EventCallback.prototype = $extend(cocktail_core_event_EventTarget.prototype,{
	__class__: cocktail_core_event_EventCallback
});
var cocktail_core_dom_Node = function() {
	cocktail_core_event_EventCallback.call(this);
	this.initChildNodes();
};
$hxClasses["cocktail.core.dom.Node"] = cocktail_core_dom_Node;
cocktail_core_dom_Node.__name__ = true;
cocktail_core_dom_Node.__super__ = cocktail_core_event_EventCallback;
cocktail_core_dom_Node.prototype = $extend(cocktail_core_event_EventCallback.prototype,{
	initChildNodes: function() {
		this.childNodes = [];
	}
	,removeChild: function(oldChild) {
		oldChild.parentNode = null;
		HxOverrides.remove(this.childNodes,oldChild);
		return oldChild;
	}
	,appendChild: function(newChild) {
		this.removeFromParentIfNecessary(newChild);
		newChild.parentNode = this;
		this.childNodes.push(newChild);
		return newChild;
	}
	,hasChildNodes: function() {
		return this.childNodes.length > 0;
	}
	,getTargetAncestors: function() {
		var parent = this.parentNode;
		var targetAncestors = cocktail_core_event_EventCallback.prototype.getTargetAncestors.call(this);
		while(parent != null) {
			targetAncestors.push(parent);
			parent = parent.parentNode;
		}
		return targetAncestors;
	}
	,removeFromParentIfNecessary: function(newChild) {
		if(newChild.parentNode != null) {
			var parentNode = newChild.parentNode;
			parentNode.removeChild(newChild);
		}
	}
	,get_firstChild: function() {
		if(this.hasChildNodes() == true) return this.childNodes[0]; else return null;
	}
	,get_lastChild: function() {
		if(this.hasChildNodes() == true) return this.childNodes[this.childNodes.length - 1]; else return null;
	}
	,get_nextSibling: function() {
		if(this.parentNode == null) return null;
		if(this.parentNode.get_lastChild() != this) {
			var parentChildNodes = this.parentNode.childNodes;
			var length = parentChildNodes.length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				if(parentChildNodes[i] == this) return parentChildNodes[i + 1];
			}
		}
		return null;
	}
	,get_previousSibling: function() {
		if(this.parentNode == null) return null;
		if(this.parentNode.get_firstChild() != this) {
			var length = this.parentNode.childNodes.length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				if(this.parentNode.childNodes[i] == this) return this.parentNode.childNodes[i - 1];
			}
		}
		return null;
	}
	,get_nodeType: function() {
		return -1;
	}
	,get_nodeValue: function() {
		return null;
	}
	,set_ownerDocument: function(value) {
		return this.ownerDocument = value;
	}
	,get_nodeName: function() {
		return null;
	}
	,__class__: cocktail_core_dom_Node
	,__properties__: {set_ownerDocument:"set_ownerDocument",get_nodeName:"get_nodeName",get_nodeValue:"get_nodeValue",get_nodeType:"get_nodeType",get_previousSibling:"get_previousSibling",get_nextSibling:"get_nextSibling",get_lastChild:"get_lastChild",get_firstChild:"get_firstChild"}
});
var cocktail_core_dom_Attr = function(name) {
	this.name = name;
	this.specified = false;
	cocktail_core_dom_Node.call(this);
};
$hxClasses["cocktail.core.dom.Attr"] = cocktail_core_dom_Attr;
cocktail_core_dom_Attr.__name__ = true;
cocktail_core_dom_Attr.__super__ = cocktail_core_dom_Node;
cocktail_core_dom_Attr.prototype = $extend(cocktail_core_dom_Node.prototype,{
	initChildNodes: function() {
	}
	,get_nodeName: function() {
		return this.name;
	}
	,get_nodeType: function() {
		return 2;
	}
	,get_nodeValue: function() {
		return this.get_value();
	}
	,get_value: function() {
		if(this.value == null) return "";
		return this.value;
	}
	,set_value: function(value) {
		this.specified = true;
		return this.value = value;
	}
	,__class__: cocktail_core_dom_Attr
	,__properties__: $extend(cocktail_core_dom_Node.prototype.__properties__,{set_value:"set_value",get_value:"get_value"})
});
var cocktail_core_dom_CharacterData = function() {
	cocktail_core_dom_Node.call(this);
};
$hxClasses["cocktail.core.dom.CharacterData"] = cocktail_core_dom_CharacterData;
cocktail_core_dom_CharacterData.__name__ = true;
cocktail_core_dom_CharacterData.__super__ = cocktail_core_dom_Node;
cocktail_core_dom_CharacterData.prototype = $extend(cocktail_core_dom_Node.prototype,{
	get_nodeValue: function() {
		return this.data;
	}
	,set_nodeValue: function(value) {
		return this.data = value;
	}
	,__class__: cocktail_core_dom_CharacterData
});
var cocktail_core_dom_Comment = function() {
	cocktail_core_dom_CharacterData.call(this);
};
$hxClasses["cocktail.core.dom.Comment"] = cocktail_core_dom_Comment;
cocktail_core_dom_Comment.__name__ = true;
cocktail_core_dom_Comment.__super__ = cocktail_core_dom_CharacterData;
cocktail_core_dom_Comment.prototype = $extend(cocktail_core_dom_CharacterData.prototype,{
	get_nodeType: function() {
		return 8;
	}
	,__class__: cocktail_core_dom_Comment
});
var cocktail_core_dom_Document = function() {
	cocktail_core_dom_Node.call(this);
};
$hxClasses["cocktail.core.dom.Document"] = cocktail_core_dom_Document;
cocktail_core_dom_Document.__name__ = true;
cocktail_core_dom_Document.__super__ = cocktail_core_dom_Node;
cocktail_core_dom_Document.prototype = $extend(cocktail_core_dom_Node.prototype,{
	createElement: function(tagName) {
		return null;
	}
	,createTextNode: function(data) {
		var text = new cocktail_core_dom_Text();
		text.set_nodeValue(data);
		text.set_ownerDocument(this);
		return text;
	}
	,createComment: function(data) {
		var comment = new cocktail_core_dom_Comment();
		comment.set_nodeValue(data);
		return comment;
	}
	,getElementsByTagName: function(tagName) {
		if(this.documentElement == null) return [];
		return this.documentElement.getElementsByTagName(tagName);
	}
	,get_nodeType: function() {
		return 9;
	}
	,__class__: cocktail_core_dom_Document
});
var cocktail_core_dom_Element = function(tagName) {
	this.tagName = tagName;
	this.initAttributes();
	cocktail_core_dom_Node.call(this);
};
$hxClasses["cocktail.core.dom.Element"] = cocktail_core_dom_Element;
cocktail_core_dom_Element.__name__ = true;
cocktail_core_dom_Element.__super__ = cocktail_core_dom_Node;
cocktail_core_dom_Element.prototype = $extend(cocktail_core_dom_Node.prototype,{
	initAttributes: function() {
		this.attributes = new cocktail_core_dom_NamedNodeMap();
	}
	,getAttribute: function(name) {
		var attribute = this.getAttributeNode(name);
		if(attribute != null) return attribute.get_value(); else return null;
	}
	,setAttribute: function(name,value) {
		var attribute = this.attributes.getNamedItem(name);
		if(attribute == null) {
			attribute = new cocktail_core_dom_Attr(name);
			this.attributes.setNamedItem(attribute);
			attribute.ownerElement = this;
		}
		attribute.set_value(value);
	}
	,getAttributeNode: function(name) {
		var attribute = this.attributes.getNamedItem(name);
		if(attribute != null) return attribute;
		return null;
	}
	,getElementsByTagName: function(tagName) {
		var elements = [];
		this.doGetElementsByTagName(this,tagName,elements);
		return elements;
	}
	,doGetElementsByTagName: function(node,tagName,elements) {
		if(node.hasChildNodes() == true) {
			var length = node.childNodes.length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				var childNode = node.childNodes[i];
				if(childNode.get_nodeName() == tagName) elements.push(childNode); else if(tagName == "*" && childNode.get_nodeType() == 1) elements.push(childNode);
				if(childNode.get_nodeType() == 1) this.doGetElementsByTagName(childNode,tagName,elements);
			}
		}
	}
	,doGetTextContent: function(node) {
		var text = "";
		if(node.hasChildNodes() == true) {
			var length = node.childNodes.length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				var childNode = node.childNodes[i];
				var _g1 = childNode.get_nodeType();
				switch(_g1) {
				case 3:
					var textNode = childNode;
					text += textNode.data;
					break;
				}
				text += this.doGetTextContent(childNode);
			}
		}
		return text;
	}
	,get_nodeName: function() {
		return this.tagName;
	}
	,get_nodeType: function() {
		return 1;
	}
	,get_textContent: function() {
		return this.doGetTextContent(this);
	}
	,get_nextElementSibling: function() {
		if(this.get_nextSibling() == null) return null;
		var nextElementSibling = this.get_nextSibling();
		while(nextElementSibling.get_nodeType() != 1) {
			nextElementSibling = nextElementSibling.get_nextSibling();
			if(nextElementSibling == null) return null;
		}
		return nextElementSibling;
	}
	,get_previousElementSibling: function() {
		if(this.get_previousSibling() == null) return null;
		var previousElementSibling = this.get_previousSibling();
		while(previousElementSibling.get_nodeType() != 1) {
			previousElementSibling = previousElementSibling.get_previousSibling();
			if(previousElementSibling == null) return null;
		}
		return previousElementSibling;
	}
	,__class__: cocktail_core_dom_Element
	,__properties__: $extend(cocktail_core_dom_Node.prototype.__properties__,{get_nextElementSibling:"get_nextElementSibling",get_previousElementSibling:"get_previousElementSibling"})
});
var cocktail_core_dom_NamedNodeMap = function() {
	this._nodes = [];
};
$hxClasses["cocktail.core.dom.NamedNodeMap"] = cocktail_core_dom_NamedNodeMap;
cocktail_core_dom_NamedNodeMap.__name__ = true;
cocktail_core_dom_NamedNodeMap.prototype = {
	getNamedItem: function(name) {
		var length = this._nodes.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			if(this._nodes[i].name == name) return this._nodes[i];
		}
		return null;
	}
	,setNamedItem: function(arg) {
		var replacedNode = this.getNamedItem(arg.get_nodeName());
		if(replacedNode != null) {
			var _g1 = 0;
			var _g = this.get_length();
			while(_g1 < _g) {
				var i = _g1++;
				if(this._nodes[i] == replacedNode) {
					this._nodes[i] = arg;
					return replacedNode;
				}
			}
		} else this._nodes.push(arg);
		return replacedNode;
	}
	,item: function(index) {
		if(index > this.get_length() - 1) return null; else return this._nodes[index];
	}
	,get_length: function() {
		return this._nodes.length;
	}
	,__class__: cocktail_core_dom_NamedNodeMap
	,__properties__: {get_length:"get_length"}
};
var cocktail_core_dom_Text = function() {
	cocktail_core_dom_CharacterData.call(this);
};
$hxClasses["cocktail.core.dom.Text"] = cocktail_core_dom_Text;
cocktail_core_dom_Text.__name__ = true;
cocktail_core_dom_Text.__super__ = cocktail_core_dom_CharacterData;
cocktail_core_dom_Text.prototype = $extend(cocktail_core_dom_CharacterData.prototype,{
	get_nodeName: function() {
		return "#text";
	}
	,get_nodeType: function() {
		return 3;
	}
	,__class__: cocktail_core_dom_Text
});
var cocktail_core_ds_IFastNode = function() { };
$hxClasses["cocktail.core.ds.IFastNode"] = cocktail_core_ds_IFastNode;
cocktail_core_ds_IFastNode.__name__ = true;
cocktail_core_ds_IFastNode.prototype = {
	__class__: cocktail_core_ds_IFastNode
};
var cocktail_core_ds_FastNode = function() {
};
$hxClasses["cocktail.core.ds.FastNode"] = cocktail_core_ds_FastNode;
cocktail_core_ds_FastNode.__name__ = true;
cocktail_core_ds_FastNode.__interfaces__ = [cocktail_core_ds_IFastNode];
cocktail_core_ds_FastNode.prototype = {
	removeChild: function(oldChild) {
		if(oldChild.parentNode != this) throw new js__$Boot_HaxeError("not a child node");
		oldChild.parentNode = null;
		if(this.firstChild == oldChild && this.lastChild == oldChild) {
			this.firstChild = null;
			this.lastChild = null;
		} else if(this.firstChild == oldChild) {
			var nextSibling = oldChild.nextSibling;
			this.firstChild = nextSibling;
			if(nextSibling != null) nextSibling.previousSibling = null;
		} else if(this.lastChild == oldChild) {
			var previousSibling = oldChild.previousSibling;
			this.lastChild = previousSibling;
			if(previousSibling != null) previousSibling.nextSibling = null;
		} else {
			var previousSibling1 = oldChild.previousSibling;
			var nextSibling1 = oldChild.nextSibling;
			previousSibling1.nextSibling = nextSibling1;
			nextSibling1.previousSibling = previousSibling1;
		}
		oldChild.previousSibling = null;
		oldChild.nextSibling = null;
	}
	,appendChild: function(newChild) {
		this.removeFromParentIfNecessary(newChild);
		newChild.parentNode = this;
		if(this.firstChild == null) {
			this.firstChild = newChild;
			this.lastChild = newChild;
			newChild.previousSibling = null;
			newChild.nextSibling = null;
		} else {
			var oldLastChild = this.lastChild;
			this.lastChild = newChild;
			oldLastChild.nextSibling = newChild;
			newChild.previousSibling = oldLastChild;
			newChild.nextSibling = null;
		}
	}
	,removeFromParentIfNecessary: function(newChild) {
		if(newChild.parentNode != null) {
			var parentNode = newChild.parentNode;
			parentNode.removeChild(newChild);
		}
	}
	,insertBefore: function(newChild,refChild) {
		if(this.firstChild == null || refChild == null) {
			this.appendChild(newChild);
			return;
		}
		this.removeFromParentIfNecessary(newChild);
		newChild.parentNode = this;
		var oldPreviousSibling = refChild.previousSibling;
		if(oldPreviousSibling == null) {
			this.firstChild = newChild;
			refChild.previousSibling = newChild;
			newChild.nextSibling = refChild;
			newChild.previousSibling = null;
		} else {
			oldPreviousSibling.nextSibling = newChild;
			refChild.previousSibling = newChild;
			newChild.previousSibling = oldPreviousSibling;
			newChild.nextSibling = refChild;
		}
	}
	,__class__: cocktail_core_ds_FastNode
};
var cocktail_core_event_Event = function() {
	this.dispatched = false;
	this.eventPhase = 0;
};
$hxClasses["cocktail.core.event.Event"] = cocktail_core_event_Event;
cocktail_core_event_Event.__name__ = true;
cocktail_core_event_Event.prototype = {
	initEvent: function(eventTypeArg,canBubbleArg,cancelableArg) {
		if(this.dispatched == true) return;
		this.type = eventTypeArg;
		this.bubbles = canBubbleArg;
		this.cancelable = cancelableArg;
	}
	,__class__: cocktail_core_event_Event
};
var cocktail_core_event_CustomEvent = function() {
	cocktail_core_event_Event.call(this);
};
$hxClasses["cocktail.core.event.CustomEvent"] = cocktail_core_event_CustomEvent;
cocktail_core_event_CustomEvent.__name__ = true;
cocktail_core_event_CustomEvent.__super__ = cocktail_core_event_Event;
cocktail_core_event_CustomEvent.prototype = $extend(cocktail_core_event_Event.prototype,{
	initCustomEvent: function(eventTypeArg,canBubbleArg,cancelableArg,detailArg) {
		if(this.dispatched == true) return;
		this.initEvent(eventTypeArg,canBubbleArg,cancelableArg);
		this.detail = detailArg;
	}
	,__class__: cocktail_core_event_CustomEvent
});
var cocktail_core_event_EventListener = function(eventType,listener,useCapture) {
	this.listener = listener;
	this.useCapture = useCapture;
	this.eventType = eventType;
};
$hxClasses["cocktail.core.event.EventListener"] = cocktail_core_event_EventListener;
cocktail_core_event_EventListener.__name__ = true;
cocktail_core_event_EventListener.prototype = {
	handleEvent: function(evt) {
		this.listener(evt);
	}
	,__class__: cocktail_core_event_EventListener
};
var cocktail_core_event_UIEvent = function() {
	cocktail_core_event_Event.call(this);
};
$hxClasses["cocktail.core.event.UIEvent"] = cocktail_core_event_UIEvent;
cocktail_core_event_UIEvent.__name__ = true;
cocktail_core_event_UIEvent.__super__ = cocktail_core_event_Event;
cocktail_core_event_UIEvent.prototype = $extend(cocktail_core_event_Event.prototype,{
	initUIEvent: function(eventTypeArg,canBubbleArg,cancelableArg,viewArg,detailArg) {
		if(this.dispatched == true) return;
		this.initEvent(eventTypeArg,canBubbleArg,cancelableArg);
		this.view = viewArg;
		this.detail = detailArg;
	}
	,__class__: cocktail_core_event_UIEvent
});
var cocktail_core_event_FocusEvent = function() {
	cocktail_core_event_UIEvent.call(this);
};
$hxClasses["cocktail.core.event.FocusEvent"] = cocktail_core_event_FocusEvent;
cocktail_core_event_FocusEvent.__name__ = true;
cocktail_core_event_FocusEvent.__super__ = cocktail_core_event_UIEvent;
cocktail_core_event_FocusEvent.prototype = $extend(cocktail_core_event_UIEvent.prototype,{
	initFocusEvent: function(eventTypeArg,canBubbleArg,cancelableArg,viewArg,detailArg,relatedTargetArg) {
		if(this.dispatched == true) return;
		this.initUIEvent(eventTypeArg,canBubbleArg,cancelableArg,viewArg,detailArg);
		this.relatedTarget = relatedTargetArg;
	}
	,__class__: cocktail_core_event_FocusEvent
});
var cocktail_core_event_KeyboardEvent = function() {
	cocktail_core_event_UIEvent.call(this);
};
$hxClasses["cocktail.core.event.KeyboardEvent"] = cocktail_core_event_KeyboardEvent;
cocktail_core_event_KeyboardEvent.__name__ = true;
cocktail_core_event_KeyboardEvent.__super__ = cocktail_core_event_UIEvent;
cocktail_core_event_KeyboardEvent.prototype = $extend(cocktail_core_event_UIEvent.prototype,{
	initKeyboardEvent: function(eventTypeArg,canBubbleArg,cancelableArg,viewArg,charArg,keyArg,locationArg,modifiersListArg,repeatArg,localeArg) {
		if(this.dispatched == true) return;
		this.initUIEvent(eventTypeArg,canBubbleArg,cancelableArg,viewArg,0);
		this.keyChar = charArg;
		this.key = keyArg;
		this.repeat = repeatArg;
		this.location = locationArg;
		this.locale = localeArg;
		this.setModifiersListArg(modifiersListArg);
	}
	,setModifiersListArg: function(modifiersListArg) {
		this.ctrlKey = false;
		this.shiftKey = false;
		this.altKey = false;
		this.metaKey = false;
		if(modifiersListArg == null) return;
		var modifiers = modifiersListArg.split(" ");
		var _g1 = 0;
		var _g = modifiers.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = modifiers[i];
			switch(_g2) {
			case "Shift":
				this.shiftKey = true;
				break;
			case "Alt":
				this.altKey = true;
				break;
			case "Control":
				this.ctrlKey = true;
				break;
			case "Meta":
				this.metaKey = true;
				break;
			}
		}
	}
	,__class__: cocktail_core_event_KeyboardEvent
});
var cocktail_core_event_MouseEvent = function() {
	cocktail_core_event_UIEvent.call(this);
};
$hxClasses["cocktail.core.event.MouseEvent"] = cocktail_core_event_MouseEvent;
cocktail_core_event_MouseEvent.__name__ = true;
cocktail_core_event_MouseEvent.__super__ = cocktail_core_event_UIEvent;
cocktail_core_event_MouseEvent.prototype = $extend(cocktail_core_event_UIEvent.prototype,{
	initMouseEvent: function(eventTypeArg,canBubbleArg,cancelableArg,viewArg,detailArg,screenXArg,screenYArg,clientXArg,clientYArg,ctrlKeyArg,altKeyArg,shiftKeyArg,metaKeyArg,buttonArg,relatedTargeArg) {
		if(this.dispatched == true) return;
		this.initUIEvent(eventTypeArg,canBubbleArg,cancelableArg,viewArg,detailArg);
		this.screenX = screenXArg;
		this.screenY = screenYArg;
		this.clientX = clientXArg;
		this.clientY = clientYArg;
		this.ctrlKey = ctrlKeyArg;
		this.shiftKey = shiftKeyArg;
		this.altKey = altKeyArg;
		this.metaKey = metaKeyArg;
		this.button = buttonArg;
		this.relatedTarget = relatedTargeArg;
	}
	,__class__: cocktail_core_event_MouseEvent
});
var cocktail_core_event_ProgressEvent = function() {
	cocktail_core_event_Event.call(this);
	this.lengthComputable = false;
	this.loaded = 0;
	this.total = 0;
};
$hxClasses["cocktail.core.event.ProgressEvent"] = cocktail_core_event_ProgressEvent;
cocktail_core_event_ProgressEvent.__name__ = true;
cocktail_core_event_ProgressEvent.__super__ = cocktail_core_event_Event;
cocktail_core_event_ProgressEvent.prototype = $extend(cocktail_core_event_Event.prototype,{
	initProgressEvent: function(eventTypeArg,canBubbleArg,cancelableArg,lengthComputableArg,loadedArg,totalArg) {
		if(this.dispatched == true) return;
		this.initEvent(eventTypeArg,canBubbleArg,cancelableArg);
		this.lengthComputable = lengthComputableArg;
		this.loaded = loadedArg;
		this.total = totalArg;
	}
	,__class__: cocktail_core_event_ProgressEvent
});
var cocktail_core_event_Touch = function() {
};
$hxClasses["cocktail.core.event.Touch"] = cocktail_core_event_Touch;
cocktail_core_event_Touch.__name__ = true;
cocktail_core_event_Touch.prototype = {
	__class__: cocktail_core_event_Touch
};
var cocktail_core_event_TouchEvent = function() {
	cocktail_core_event_UIEvent.call(this);
};
$hxClasses["cocktail.core.event.TouchEvent"] = cocktail_core_event_TouchEvent;
cocktail_core_event_TouchEvent.__name__ = true;
cocktail_core_event_TouchEvent.__super__ = cocktail_core_event_UIEvent;
cocktail_core_event_TouchEvent.prototype = $extend(cocktail_core_event_UIEvent.prototype,{
	initTouchEvent: function(eventTypeArg,canBubbleArg,cancelableArg,viewArg,detailArg,touchesArg,targetTouchesArg,changedTouchesArg,altKeyArg,metaKeyArg,ctrlKeyArg,shiftKeyArg) {
		if(this.dispatched == true) return;
		this.initUIEvent(eventTypeArg,canBubbleArg,cancelableArg,viewArg,detailArg);
		this.touches = touchesArg;
		targetTouchesArg = this.targetTouches;
		this.changedTouches = changedTouchesArg;
		this.altKey = altKeyArg;
		this.metaKey = metaKeyArg;
		this.ctrlKey = ctrlKeyArg;
		this.shiftKey = shiftKeyArg;
	}
	,__class__: cocktail_core_event_TouchEvent
});
var cocktail_core_event_TouchList = function(touches) {
	this._touches = touches;
};
$hxClasses["cocktail.core.event.TouchList"] = cocktail_core_event_TouchList;
cocktail_core_event_TouchList.__name__ = true;
cocktail_core_event_TouchList.prototype = {
	item: function(index) {
		return this._touches[index];
	}
	,get_length: function() {
		return this._touches.length;
	}
	,__class__: cocktail_core_event_TouchList
	,__properties__: {get_length:"get_length"}
};
var cocktail_core_event_TransitionEvent = function() {
	cocktail_core_event_Event.call(this);
};
$hxClasses["cocktail.core.event.TransitionEvent"] = cocktail_core_event_TransitionEvent;
cocktail_core_event_TransitionEvent.__name__ = true;
cocktail_core_event_TransitionEvent.__super__ = cocktail_core_event_Event;
cocktail_core_event_TransitionEvent.prototype = $extend(cocktail_core_event_Event.prototype,{
	initTransitionEvent: function(eventTypeArg,canBubbleArg,cancelableArg,propertyNameArg,elapsedTimeArg,pseudoElementArg) {
		if(this.dispatched == true) return;
		this.initEvent(eventTypeArg,canBubbleArg,cancelableArg);
		this.propertyName = propertyNameArg;
		this.elapsedTime = elapsedTimeArg;
		this.pseudoElement = pseudoElementArg;
	}
	,__class__: cocktail_core_event_TransitionEvent
});
var cocktail_core_event_WheelEvent = function() {
	cocktail_core_event_MouseEvent.call(this);
};
$hxClasses["cocktail.core.event.WheelEvent"] = cocktail_core_event_WheelEvent;
cocktail_core_event_WheelEvent.__name__ = true;
cocktail_core_event_WheelEvent.__super__ = cocktail_core_event_MouseEvent;
cocktail_core_event_WheelEvent.prototype = $extend(cocktail_core_event_MouseEvent.prototype,{
	initWheelEvent: function(eventTypeArg,canBubbleArg,cancelableArg,viewArg,detailArg,screenXArg,screenYArg,clientXArg,clientYArg,buttonArg,relatedTargetArg,modifiersListArg,deltaXArg,deltaYArg,deltaZArg,deltaModeArg) {
		if(this.dispatched == true) return;
		this.initMouseEvent(eventTypeArg,canBubbleArg,cancelableArg,viewArg,detailArg,screenXArg,screenYArg,clientXArg,clientYArg,false,false,false,false,buttonArg,relatedTargetArg);
		this.deltaY = deltaYArg;
		this.deltaX = deltaXArg;
		this.deltaMode = deltaModeArg;
		this.deltaZ = deltaZArg;
	}
	,__class__: cocktail_core_event_WheelEvent
});
var cocktail_core_floats_FloatsManager = function() {
	var floatsLeft = [];
	var floatsRight = [];
	this.childrenWithClearance = [];
	this.floats = new cocktail_core_layout_FloatsVO(floatsLeft,floatsRight);
};
$hxClasses["cocktail.core.floats.FloatsManager"] = cocktail_core_floats_FloatsManager;
cocktail_core_floats_FloatsManager.__name__ = true;
cocktail_core_floats_FloatsManager.prototype = {
	init: function() {
		if(this.floats.left.length > 0 || this.floats.right.length > 0) {
			this.floats.left = [];
			this.floats.right = [];
		}
		this.childrenWithClearance = [];
	}
	,registerClear: function(elementRenderer) {
		this.childrenWithClearance.push(elementRenderer);
	}
	,getClearance: function(target,currentY) {
		var clearance = 0;
		var _g = target.coreStyle.getKeyword(target.coreStyle.getComputedOrInitialProperty(3));
		switch(_g[1]) {
		case 11:
			clearance = this.doGetClearance(target,currentY,this.floats.left);
			break;
		case 12:
			clearance = this.doGetClearance(target,currentY,this.floats.right);
			break;
		case 31:
			clearance = this.clearBoth(target,currentY);
			break;
		default:
		}
		return clearance;
	}
	,hasClearance: function(target,currentY) {
		var hasClearance = false;
		var _g = target.coreStyle.getKeyword(target.coreStyle.getComputedOrInitialProperty(3));
		switch(_g[1]) {
		case 11:
			hasClearance = this.doGetHasClearance(target,currentY,this.floats.left);
			break;
		case 12:
			hasClearance = this.doGetHasClearance(target,currentY,this.floats.right);
			break;
		case 31:
			hasClearance = this.hasClearanceBoth(target,currentY);
			break;
		default:
		}
		return hasClearance;
	}
	,clearBoth: function(target,currentY) {
		var leftClearance = this.doGetClearance(target,currentY,this.floats.left);
		var rightClearance = this.doGetClearance(target,currentY,this.floats.right);
		if(leftClearance > rightClearance) return leftClearance; else return rightClearance;
	}
	,hasClearanceBoth: function(target,currentY) {
		var hasLeftClearance = this.doGetHasClearance(target,currentY,this.floats.left);
		if(hasLeftClearance == true) return true;
		return this.doGetHasClearance(target,currentY,this.floats.right);
	}
	,doGetClearance: function(target,currentY,floats) {
		var clearance = 0;
		var maxY = currentY;
		var length = floats.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var floatBounds = floats[i].bounds;
			if(floatBounds.y + floatBounds.height >= maxY || floatBounds.y <= maxY && floatBounds.y + floatBounds.height > maxY) maxY = floatBounds.y + floatBounds.height;
		}
		return maxY - currentY;
	}
	,doGetHasClearance: function(target,currentY,floats) {
		var length = floats.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var floatBounds = floats[i].bounds;
			if(floatBounds.y + floatBounds.height >= currentY || floatBounds.y <= currentY && floatBounds.y + floatBounds.height > currentY) return true;
		}
		return false;
	}
	,registerFloat: function(elementRenderer,floatY,containingBlockWidth,containingBlockXOffset) {
		var bounds = this.getFloatBoundsIfAlreadyRegistered(elementRenderer);
		if(bounds != null) return bounds;
		var _g = elementRenderer.coreStyle.getKeyword(elementRenderer.coreStyle.getComputedOrInitialProperty(2));
		switch(_g[1]) {
		case 11:
			var floatBounds = this.getLeftFloatBounds(elementRenderer,floatY,containingBlockWidth,containingBlockXOffset);
			this.floats.left.push(new cocktail_core_layout_FloatVO(elementRenderer,floatBounds));
			return floatBounds;
		case 12:
			var floatBounds1 = this.getRightFloatBounds(elementRenderer,floatY,containingBlockWidth,containingBlockXOffset);
			this.floats.right.push(new cocktail_core_layout_FloatVO(elementRenderer,floatBounds1));
			return floatBounds1;
		default:
			throw new js__$Boot_HaxeError("Illegal value for float style");
		}
	}
	,getFloatBoundsIfAlreadyRegistered: function(elementRenderer) {
		var _g1 = 0;
		var _g = this.floats.left.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.floats.left[i].node == elementRenderer) return this.floats.left[i].bounds;
		}
		var _g11 = 0;
		var _g2 = this.floats.right.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(this.floats.right[i1].node == elementRenderer) return this.floats.right[i1].bounds;
		}
		return null;
	}
	,getLeftFloatBounds: function(elementRenderer,floatY,containingBlockWidth,containingBlockXOffset) {
		var floatBounds = this.getFloatBounds(elementRenderer,floatY,containingBlockWidth,containingBlockXOffset);
		floatBounds.x = this.getLeftFloatOffset(floatBounds.y,floatBounds.height,containingBlockXOffset);
		return floatBounds;
	}
	,getRightFloatBounds: function(elementRenderer,floatY,containingBlockWidth,containingBlockXOffset) {
		var floatBounds = this.getFloatBounds(elementRenderer,floatY,containingBlockWidth,containingBlockXOffset);
		floatBounds.x = this.getRightFloatOffset(floatBounds.y,floatBounds.height,floatBounds.width,containingBlockXOffset,containingBlockWidth) - floatBounds.width;
		return floatBounds;
	}
	,getFloatBounds: function(elementRenderer,floatY,containingBlockWidth,containingBlockXOffset) {
		var usedValues = elementRenderer.coreStyle.usedValues;
		var floatWidth = elementRenderer.bounds.width + usedValues.marginLeft + usedValues.marginRight;
		var floatHeight = elementRenderer.bounds.height + usedValues.marginTop + usedValues.marginBottom;
		var floatY1 = this.getFirstAvailableYPosition(floatY,floatHeight,floatWidth,containingBlockWidth,containingBlockXOffset);
		var floatX = 0.0;
		var rect = new cocktail_core_geom_RectangleVO();
		rect.x = floatX;
		rect.y = floatY1;
		rect.width = floatWidth;
		rect.height = floatHeight;
		return rect;
	}
	,getFirstAvailableYPosition: function(currentYPosition,elementHeight,elementWidth,containingBlockWidth,containingBlockXOffset) {
		var retY = currentYPosition;
		while(this.canFitElementAtY(retY,elementHeight,elementWidth,containingBlockWidth,containingBlockXOffset) == false) {
			var afterFloats = [];
			var leftFloatLength = this.floats.left.length;
			var _g = 0;
			while(_g < leftFloatLength) {
				var i = _g++;
				var floatBounds = this.floats.left[i].bounds;
				if(floatBounds.y <= retY && floatBounds.height + floatBounds.y > retY || floatBounds.y <= retY + elementHeight && floatBounds.y > retY) afterFloats.push(floatBounds);
			}
			var rightFloatLength = this.floats.right.length;
			var _g1 = 0;
			while(_g1 < rightFloatLength) {
				var i1 = _g1++;
				var floatBounds1 = this.floats.right[i1].bounds;
				if(floatBounds1.y <= retY && floatBounds1.height + floatBounds1.y > retY || floatBounds1.y <= retY + elementHeight && floatBounds1.y > retY) afterFloats.push(floatBounds1);
			}
			if(afterFloats.length == 0) break; else {
				var nextY = 1000000;
				var _g11 = 0;
				var _g2 = afterFloats.length;
				while(_g11 < _g2) {
					var i2 = _g11++;
					if(afterFloats[i2].y + afterFloats[i2].height - retY < nextY) nextY = afterFloats[i2].y + afterFloats[i2].height - retY;
				}
				retY += nextY;
			}
		}
		return retY;
	}
	,canFitElementAtY: function(y,elementHeight,elementWidth,containingBlockWidth,containingBlockXOffset) {
		if(this.getRightFloatOffset(y,elementHeight,elementWidth,containingBlockXOffset,containingBlockWidth) - this.getLeftFloatOffset(y,elementHeight,containingBlockXOffset) < elementWidth) return false; else return true;
	}
	,getLeftFloatOffset: function(y,elementHeight,containingBlockXOffset) {
		var leftFloatOffset = containingBlockXOffset;
		var length = this.floats.left.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var floatBounds = this.floats.left[i].bounds;
			if(floatBounds.y + floatBounds.height > y && floatBounds.y <= y || floatBounds.y <= y + elementHeight && floatBounds.y > y) {
				if(floatBounds.x + floatBounds.width > leftFloatOffset) leftFloatOffset = floatBounds.x + floatBounds.width;
			}
		}
		return leftFloatOffset;
	}
	,getRightFloatOffset: function(y,elementHeight,elementWidth,containingBlockXOffset,containingBlockWidth) {
		var rightFloatOffset = containingBlockXOffset + containingBlockWidth;
		var length = this.floats.right.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var floatBounds = this.floats.right[i].bounds;
			if(floatBounds.y + floatBounds.height > y && floatBounds.y <= y || floatBounds.y <= y + elementHeight && floatBounds.y > y) {
				if(floatBounds.x < rightFloatOffset) rightFloatOffset = floatBounds.x;
			}
		}
		return rightFloatOffset;
	}
	,get_hasFloats: function() {
		return this.floats.left.length > 0 || this.floats.right.length > 0;
	}
	,__class__: cocktail_core_floats_FloatsManager
	,__properties__: {get_hasFloats:"get_hasFloats"}
};
var cocktail_core_focus_FocusManager = function() {
};
$hxClasses["cocktail.core.focus.FocusManager"] = cocktail_core_focus_FocusManager;
cocktail_core_focus_FocusManager.__name__ = true;
cocktail_core_focus_FocusManager.prototype = {
	dispose: function() {
		this.activeElement = null;
	}
	,getNextFocusedElement: function(reverse,rootElement,activeElement) {
		var tabList = this.buildTabList(rootElement);
		var tabListIndex;
		if(activeElement == rootElement) {
			if(reverse == false) tabListIndex = 0; else tabListIndex = tabList.length - 1;
		} else {
			tabListIndex = this.getElementTabListIndex(activeElement,tabList);
			if(reverse == false) tabListIndex++; else tabListIndex--;
		}
		if(tabListIndex == tabList.length) tabListIndex = 0; else if(tabListIndex == -1) tabListIndex = tabList.length - 1;
		return tabList[tabListIndex];
	}
	,getElementTabListIndex: function(element,tabList) {
		var _g1 = 0;
		var _g = tabList.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(tabList[i] == element) return i;
		}
		return -1;
	}
	,buildTabList: function(rootElement) {
		var orderedTabList = [];
		var indexedTabList = [];
		this.doBuildTabList(rootElement,orderedTabList,indexedTabList);
		var _g1 = 0;
		var _g = orderedTabList.length;
		while(_g1 < _g) {
			var i = _g1++;
			indexedTabList.push(orderedTabList[i]);
		}
		return indexedTabList;
	}
	,doBuildTabList: function(htmlElement,orderedTabList,indexedTabList) {
		var _g1 = 0;
		var _g = htmlElement.childNodes.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(htmlElement.childNodes[i].get_nodeType() == 1) {
				var child = htmlElement.childNodes[i];
				if(child.hasChildNodes() == true) this.doBuildTabList(child,orderedTabList,indexedTabList);
				if(child.isFocusable() == true) {
					if(child.get_tabIndex() == 0) orderedTabList.push(child); else if(child.get_tabIndex() > 0) {
						if(indexedTabList.length == 0) indexedTabList.push(child); else {
							var foundSpotFlag = false;
							var _g3 = 0;
							var _g2 = indexedTabList.length;
							while(_g3 < _g2) {
								var j = _g3++;
								if(child.get_tabIndex() < indexedTabList[j].get_tabIndex()) {
									indexedTabList.splice(j,0,child);
									foundSpotFlag = true;
								}
							}
							if(foundSpotFlag == false) indexedTabList.push(child);
						}
					}
				}
			}
		}
	}
	,setActiveElement: function(newActiveElement,body) {
		if(newActiveElement == null) return this.activeElement;
		if(this.activeElement == null) return this.activeElement = newActiveElement;
		if(newActiveElement != this.activeElement) {
			var focusOutEvent = new cocktail_core_event_FocusEvent();
			focusOutEvent.initFocusEvent("focusout",true,false,null,0.0,newActiveElement);
			this.activeElement.dispatchEvent(focusOutEvent);
			var focusInEvent = new cocktail_core_event_FocusEvent();
			focusInEvent.initFocusEvent("focusin",true,false,null,0.0,this.activeElement);
			newActiveElement.dispatchEvent(focusInEvent);
			var oldActiveElement = this.activeElement;
			oldActiveElement.invalidateStyleDeclaration(false);
			if(newActiveElement.isFocusable() == true) this.activeElement = newActiveElement; else this.activeElement = body;
			this.activeElement.invalidateStyleDeclaration(false);
			var blurEvent = new cocktail_core_event_FocusEvent();
			blurEvent.initFocusEvent("blur",false,false,null,0.0,null);
			oldActiveElement.dispatchEvent(blurEvent);
			var focusEvent = new cocktail_core_event_FocusEvent();
			focusEvent.initFocusEvent("focus",false,false,null,0.0,null);
			newActiveElement.dispatchEvent(focusEvent);
			if(this.activeElement.onfocus != null) {
				var focusEvent1 = new cocktail_core_event_FocusEvent();
				focusEvent1.initFocusEvent("focus",true,false,null,0.0,null);
				this.activeElement.onfocus(focusEvent1);
			}
		}
		return this.activeElement;
	}
	,__class__: cocktail_core_focus_FocusManager
};
var cocktail_core_font_FontMetricsVO = function(fontSize,ascent,descent,xHeight,subscriptOffset,superscriptOffset,underlineOffset,spaceWidth,zeroHeight) {
	this.fontSize = fontSize;
	this.ascent = ascent;
	this.descent = descent;
	this.xHeight = xHeight;
	this.subscriptOffset = subscriptOffset;
	this.superscriptOffset = superscriptOffset;
	this.underlineOffset = underlineOffset;
	this.spaceWidth = spaceWidth;
	this.zeroHeight = zeroHeight;
};
$hxClasses["cocktail.core.font.FontMetricsVO"] = cocktail_core_font_FontMetricsVO;
cocktail_core_font_FontMetricsVO.__name__ = true;
cocktail_core_font_FontMetricsVO.prototype = {
	__class__: cocktail_core_font_FontMetricsVO
};
var cocktail_core_font_FontManager = function() {
	this._fontBuilder = new cocktail_port_platform_flash_$player_FontBuilder();
	this._computedFontMetrics = new haxe_ds_StringMap();
};
$hxClasses["cocktail.core.font.FontManager"] = cocktail_core_font_FontManager;
cocktail_core_font_FontManager.__name__ = true;
cocktail_core_font_FontManager.prototype = {
	dispose: function() {
		this._fontBuilder.dispose();
	}
	,getFontMetrics: function(fontFamily,fontSize) {
		var fontMetrics;
		var fontSizeMap = this._computedFontMetrics.get(fontFamily);
		if(fontSizeMap != null) {
			var key = Math.round(fontSize);
			fontMetrics = fontSizeMap.h[key];
			if(fontMetrics == null) {
				fontMetrics = this.doGetFontMetrics(fontFamily,fontSize);
				var key1 = Math.round(fontSize);
				fontSizeMap.h[key1] = fontMetrics;
				this._computedFontMetrics.set(fontFamily,fontSizeMap);
			}
		} else {
			fontMetrics = this.doGetFontMetrics(fontFamily,fontSize);
			fontSizeMap = new haxe_ds_IntMap();
			var key2 = Math.round(fontSize);
			fontSizeMap.h[key2] = fontMetrics;
			this._computedFontMetrics.set(fontFamily,fontSizeMap);
		}
		return fontMetrics;
	}
	,createNativeTextElement: function(text,style,fontFamily) {
		return this._fontBuilder.createNativeTextElement(text,style,fontFamily);
	}
	,getNativeFontFamily: function(fontFamily) {
		return this._fontBuilder.getNativeFontFamily(fontFamily);
	}
	,doGetFontMetrics: function(fontFamily,fontSize) {
		return this._fontBuilder.getFontMetrics(fontFamily,fontSize);
	}
	,__class__: cocktail_core_font_FontManager
};
var cocktail_core_geom_CubicBezier = function() {
};
$hxClasses["cocktail.core.geom.CubicBezier"] = cocktail_core_geom_CubicBezier;
cocktail_core_geom_CubicBezier.__name__ = true;
cocktail_core_geom_CubicBezier.prototype = {
	init: function(x1,y1,x2,y2) {
		this._x1 = x1;
		this._y1 = y1;
		this._x2 = x2;
		this._y2 = y2;
		this._cx = 3 * this._x1;
		this._bx = 3 * (this._x2 - this._x1) - this._cx;
		this._ax = 1 - this._cx - this._bx;
		this._cy = 3 * this._y1;
		this._by = 3 * (this._y2 - this._y1) - this._cy;
		this._ay = 1 - this._cy - this._by;
	}
	,bezierY: function(t) {
		return t * (this._cy + t * (this._by + t * this._ay));
	}
	,__class__: cocktail_core_geom_CubicBezier
};
var cocktail_core_geom_RectangleVO = function() {
	this.x = 0;
	this.y = 0;
	this.width = 0;
	this.height = 0;
};
$hxClasses["cocktail.core.geom.RectangleVO"] = cocktail_core_geom_RectangleVO;
cocktail_core_geom_RectangleVO.__name__ = true;
cocktail_core_geom_RectangleVO.prototype = {
	__class__: cocktail_core_geom_RectangleVO
};
var cocktail_core_geom_PointVO = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["cocktail.core.geom.PointVO"] = cocktail_core_geom_PointVO;
cocktail_core_geom_PointVO.__name__ = true;
cocktail_core_geom_PointVO.prototype = {
	__class__: cocktail_core_geom_PointVO
};
var cocktail_core_geom_DimensionVO = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["cocktail.core.geom.DimensionVO"] = cocktail_core_geom_DimensionVO;
cocktail_core_geom_DimensionVO.__name__ = true;
cocktail_core_geom_DimensionVO.prototype = {
	__class__: cocktail_core_geom_DimensionVO
};
var cocktail_core_geom_GeomUtils = function() { };
$hxClasses["cocktail.core.geom.GeomUtils"] = cocktail_core_geom_GeomUtils;
cocktail_core_geom_GeomUtils.__name__ = true;
cocktail_core_geom_GeomUtils.addBounds = function(addedBounds,bounds,getHorizontalBounds,getVerticalBounds) {
	if(getVerticalBounds == null) getVerticalBounds = true;
	if(getHorizontalBounds == null) getHorizontalBounds = true;
	if(getHorizontalBounds == true) {
		if(addedBounds.x < bounds.x) bounds.x = addedBounds.x;
		if(addedBounds.x + addedBounds.width > bounds.x + bounds.width) bounds.width = addedBounds.x + addedBounds.width - bounds.x;
	}
	if(getVerticalBounds == true) {
		if(addedBounds.y < bounds.y) bounds.y = addedBounds.y;
		if(addedBounds.y + addedBounds.height > bounds.y + bounds.height) bounds.height = addedBounds.y + addedBounds.height - bounds.y;
	}
};
cocktail_core_geom_GeomUtils.intersectBounds = function(bounds1,bounds2,resultBounds) {
	if(bounds1.x + bounds1.width < bounds2.x || bounds2.x + bounds2.width < bounds1.x || bounds1.y + bounds1.height < bounds2.y || bounds2.y + bounds2.height < bounds1.y) {
		resultBounds.x = 0;
		resultBounds.y = 0;
		resultBounds.height = 0;
		resultBounds.width = 0;
	} else {
		var left = 0;
		var right = 0;
		var top = 0;
		var bottom = 0;
		if(bounds1.x < bounds2.x) left = bounds2.x; else left = bounds1.x;
		if(bounds1.x + bounds1.width < bounds2.x + bounds2.width) right = bounds1.x + bounds1.width; else right = bounds2.x + bounds2.width;
		if(bounds1.y < bounds2.y) top = bounds2.y; else top = bounds1.y;
		if(bounds1.y + bounds1.height < bounds2.y + bounds2.height) bottom = bounds1.y + bounds1.height; else bottom = bounds2.y + bounds2.height;
		resultBounds.x = left;
		resultBounds.y = top;
		resultBounds.width = right - left;
		resultBounds.height = bottom - top;
	}
};
cocktail_core_geom_GeomUtils.getCenteredBounds = function(maximumWidth,maximumHeight,boundsWidth,boundsHeight,resultBounds) {
	if(maximumWidth == 0 || maximumHeight == 0 || boundsWidth == 0 || boundsHeight == 0) return;
	var width;
	var height;
	if(maximumWidth > maximumHeight) {
		var ratio = boundsHeight / maximumHeight;
		if(boundsWidth / ratio < maximumWidth) {
			width = boundsWidth / ratio;
			height = maximumHeight;
		} else {
			ratio = boundsWidth / maximumWidth;
			width = maximumWidth;
			height = boundsHeight / ratio;
		}
	} else {
		var ratio1 = boundsWidth / maximumWidth;
		if(boundsHeight / ratio1 < maximumHeight) {
			height = boundsHeight / ratio1;
			width = maximumWidth;
		} else {
			ratio1 = boundsHeight / maximumHeight;
			width = boundsWidth / ratio1;
			height = maximumHeight;
		}
	}
	var xOffset = (maximumWidth - width) / 2;
	var yOffset = (maximumHeight - height) / 2;
	resultBounds.x = xOffset;
	resultBounds.y = yOffset;
	resultBounds.width = width;
	resultBounds.height = height;
};
var cocktail_core_geom_Matrix = function(a,b,c,d,e,f) {
	if(f == null) f = 0.0;
	if(e == null) e = 0.0;
	if(d == null) d = 1.0;
	if(c == null) c = 0.0;
	if(b == null) b = 0.0;
	if(a == null) a = 1.0;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.e = e;
	this.f = f;
};
$hxClasses["cocktail.core.geom.Matrix"] = cocktail_core_geom_Matrix;
cocktail_core_geom_Matrix.__name__ = true;
cocktail_core_geom_Matrix._concatenationMatrix = null;
cocktail_core_geom_Matrix.getConcatenationMatrix = function(a,b,c,d,e,f) {
	if(cocktail_core_geom_Matrix._concatenationMatrix == null) cocktail_core_geom_Matrix._concatenationMatrix = new cocktail_core_geom_Matrix();
	cocktail_core_geom_Matrix._concatenationMatrix.a = a;
	cocktail_core_geom_Matrix._concatenationMatrix.b = b;
	cocktail_core_geom_Matrix._concatenationMatrix.c = c;
	cocktail_core_geom_Matrix._concatenationMatrix.d = d;
	cocktail_core_geom_Matrix._concatenationMatrix.e = e;
	cocktail_core_geom_Matrix._concatenationMatrix.f = f;
	return cocktail_core_geom_Matrix._concatenationMatrix;
};
cocktail_core_geom_Matrix.prototype = {
	identity: function() {
		this.a = 1.0;
		this.b = 0.0;
		this.c = 0.0;
		this.d = 1.0;
		this.e = 0.0;
		this.f = 0.0;
	}
	,concatenate: function(matrix) {
		this.a = this.a * matrix.a + this.c * matrix.b;
		this.b = this.b * matrix.a + this.d * matrix.b;
		this.c = this.a * matrix.c + this.c * matrix.d;
		this.d = this.b * matrix.c + this.d * matrix.d;
		this.e = this.a * matrix.e + this.c * matrix.f + this.e;
		this.f = this.b * matrix.e + this.d * matrix.f + this.f;
	}
	,translate: function(x,y) {
		this.concatenate(cocktail_core_geom_Matrix.getConcatenationMatrix(1.0,0.0,0.0,1.0,x,y));
	}
	,rotate: function(angle) {
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		if(angle == Math.PI / 2) {
			a = d = 0.0;
			c = b = 1.0;
		} else if(angle == Math.PI) {
			a = d = -1.0;
			c = b = 0.0;
		} else if(angle == Math.PI * 3 / 2) {
			a = d = 0.0;
			c = b = -1.0;
		} else {
			a = d = Math.cos(angle);
			c = b = Math.sin(angle);
		}
		this.concatenate(cocktail_core_geom_Matrix.getConcatenationMatrix(a,b,c * -1.0,d,0.0,0.0));
	}
	,scale: function(scaleX,scaleY) {
		this.concatenate(cocktail_core_geom_Matrix.getConcatenationMatrix(scaleX,0.0,0.0,scaleY,0.0,0.0));
	}
	,skew: function(skewX,skewY) {
		this.concatenate(cocktail_core_geom_Matrix.getConcatenationMatrix(1.0,Math.tan(skewY),Math.tan(skewY),1.0,0.0,0.0));
	}
	,__class__: cocktail_core_geom_Matrix
};
var cocktail_core_graphics_BackgroundDrawer = function() { };
$hxClasses["cocktail.core.graphics.BackgroundDrawer"] = cocktail_core_graphics_BackgroundDrawer;
cocktail_core_graphics_BackgroundDrawer.__name__ = true;
cocktail_core_graphics_BackgroundDrawer.render = function(graphicContext,backgroundBox,style,elementRenderer,clipRect) {
	if(Math.round(backgroundBox.width) <= 0 || Math.round(backgroundBox.height) <= 0) return;
	if(style.usedValues.backgroundColor.alpha != 0.0) {
		cocktail_core_graphics_BackgroundDrawer._intersectionBounds.x = backgroundBox.x;
		cocktail_core_graphics_BackgroundDrawer._intersectionBounds.y = backgroundBox.y;
		cocktail_core_graphics_BackgroundDrawer._intersectionBounds.width = backgroundBox.width;
		cocktail_core_graphics_BackgroundDrawer._intersectionBounds.height = backgroundBox.height;
		cocktail_core_geom_GeomUtils.intersectBounds(cocktail_core_graphics_BackgroundDrawer._intersectionBounds,clipRect,cocktail_core_graphics_BackgroundDrawer._intersectionBounds);
		if(cocktail_core_graphics_BackgroundDrawer._intersectionBounds.width == 0 || cocktail_core_graphics_BackgroundDrawer._intersectionBounds.height == 0) return;
		graphicContext.nativeLayer.graphics.fillRect(backgroundBox,style.usedValues.backgroundColor,clipRect);
	}
	if(style.hasBackgroundImage == false) return;
	cocktail_core_graphics_BackgroundDrawer._intersectionBounds.x = backgroundBox.x;
	cocktail_core_graphics_BackgroundDrawer._intersectionBounds.y = backgroundBox.y;
	cocktail_core_graphics_BackgroundDrawer._intersectionBounds.width = backgroundBox.width;
	cocktail_core_graphics_BackgroundDrawer._intersectionBounds.height = backgroundBox.height;
	cocktail_core_geom_GeomUtils.intersectBounds(cocktail_core_graphics_BackgroundDrawer._intersectionBounds,clipRect,cocktail_core_graphics_BackgroundDrawer._intersectionBounds);
	if(cocktail_core_graphics_BackgroundDrawer._intersectionBounds.width == 0 || cocktail_core_graphics_BackgroundDrawer._intersectionBounds.height == 0) return;
	var backgroundImages = cocktail_core_graphics_BackgroundDrawer.getAsArray(style.getComputedOrInitialProperty(26));
	var backgroundPositions = cocktail_core_graphics_BackgroundDrawer.getAsArray(style.getComputedOrInitialProperty(30));
	var backgroundOrigins = cocktail_core_graphics_BackgroundDrawer.getAsArray(style.getComputedOrInitialProperty(28));
	var backgroundClips = cocktail_core_graphics_BackgroundDrawer.getAsArray(style.getComputedOrInitialProperty(31));
	var backgroundSizes = cocktail_core_graphics_BackgroundDrawer.getAsArray(style.getComputedOrInitialProperty(29));
	var backgroundRepeats = cocktail_core_graphics_BackgroundDrawer.getAsArray(style.getComputedOrInitialProperty(27));
	var i = backgroundImages.length - 1;
	while(i >= 0) {
		var backgroundImage = backgroundImages[i];
		switch(backgroundImage[1]) {
		case 4:
			var value = backgroundImage[2];
			break;
		case 5:
			var value1 = backgroundImage[2];
			cocktail_core_graphics_BackgroundDrawer.drawBackgroundImage(graphicContext,value1,style,backgroundBox,backgroundPositions[cocktail_core_graphics_BackgroundDrawer.getRepeatedIndex(i,backgroundPositions.length)],backgroundSizes[cocktail_core_graphics_BackgroundDrawer.getRepeatedIndex(i,backgroundSizes.length)],backgroundOrigins[cocktail_core_graphics_BackgroundDrawer.getRepeatedIndex(i,backgroundOrigins.length)],backgroundClips[cocktail_core_graphics_BackgroundDrawer.getRepeatedIndex(i,backgroundClips.length)],backgroundRepeats[cocktail_core_graphics_BackgroundDrawer.getRepeatedIndex(i,backgroundRepeats.length)],backgroundImages[i],elementRenderer,clipRect);
			break;
		default:
		}
		i--;
	}
};
cocktail_core_graphics_BackgroundDrawer.getAsArray = function(cssProperty) {
	switch(cssProperty[1]) {
	case 4:
		var value = cssProperty[2];
		return [cssProperty];
	case 7:
		var value1 = cssProperty[2];
		return [cssProperty];
	case 2:
		var value2 = cssProperty[2];
		return [cssProperty];
	case 13:
		var value3 = cssProperty[2];
		return [cssProperty];
	case 5:
		var value4 = cssProperty[2];
		return [cssProperty];
	case 15:
		var value5 = cssProperty[2];
		var arr = [];
		var _g1 = 0;
		var _g = value5.length;
		while(_g1 < _g) {
			var i = _g1++;
			arr.push(value5[i]);
		}
		return arr;
	default:
		return null;
	}
};
cocktail_core_graphics_BackgroundDrawer.getRepeatedIndex = function(index,length) {
	if(index < length) return index; else if(length == 1) return 0;
	return length % index;
};
cocktail_core_graphics_BackgroundDrawer.drawBackgroundImage = function(graphicContext,url,style,backgroundBox,backgroundPosition,backgroundSize,backgroundOrigin,backgroundClip,backgroundRepeat,backgroundImage,elementRenderer,clipRect) {
	var foundResource = false;
	var htmlDocument = elementRenderer.domNode.ownerDocument;
	var resource = htmlDocument.resourceManager.getImageResource(url);
	if(resource.loaded == true) {
		cocktail_core_graphics_BackgroundDrawer._intersectionBounds.x = backgroundBox.x;
		cocktail_core_graphics_BackgroundDrawer._intersectionBounds.y = backgroundBox.y;
		cocktail_core_graphics_BackgroundDrawer._intersectionBounds.width = backgroundBox.width;
		cocktail_core_graphics_BackgroundDrawer._intersectionBounds.height = backgroundBox.height;
		cocktail_core_geom_GeomUtils.intersectBounds(cocktail_core_graphics_BackgroundDrawer._intersectionBounds,clipRect,cocktail_core_graphics_BackgroundDrawer._intersectionBounds);
		var computedGradientStyles = cocktail_core_layout_computer_BackgroundStylesComputer.computeIndividualBackground(style,backgroundBox,resource.intrinsicWidth,resource.intrinsicHeight,resource.intrinsicRatio,backgroundPosition,backgroundSize,backgroundOrigin,backgroundClip,backgroundRepeat,backgroundImage);
		cocktail_core_graphics_BackgroundDrawer.doDrawBackgroundImage(backgroundBox,graphicContext,resource,computedGradientStyles.backgroundOrigin,computedGradientStyles.backgroundClip,resource.intrinsicWidth,resource.intrinsicHeight,resource.intrinsicRatio,computedGradientStyles.backgroundSize,computedGradientStyles.backgroundPosition,computedGradientStyles.backgroundRepeat,cocktail_core_graphics_BackgroundDrawer._intersectionBounds);
		foundResource = true;
	} else if(resource.loadedWithError == false) {
		resource.addEventListener("load",function(e) {
			elementRenderer.invalidateRendering();
		});
		resource.addEventListener("error",function(e1) {
			elementRenderer.invalidateRendering();
		});
		foundResource = true;
	}
	if(foundResource == false) {
	}
};
cocktail_core_graphics_BackgroundDrawer.doDrawBackgroundImage = function(backgroundBox,graphicContext,resource,backgroundPositioningBox,backgroundPaintingBox,intrinsicWidth,intrinsicHeight,intrinsicRatio,computedBackgroundSize,computedBackgroundPosition,backgroundRepeat,clipRect) {
	var backgroundRepeatX = null;
	var backgroundRepeatY = null;
	switch(backgroundRepeat[1]) {
	case 13:
		var value = backgroundRepeat[2];
		{
			var _g = value[0];
			switch(_g[1]) {
			case 4:
				var value1 = _g[2];
				backgroundRepeatX = value1;
				break;
			default:
			}
		}
		{
			var _g1 = value[1];
			switch(_g1[1]) {
			case 4:
				var value2 = _g1[2];
				backgroundRepeatY = value2;
				break;
			default:
			}
		}
		break;
	default:
	}
	var totalWidth = computedBackgroundPosition.x + backgroundPositioningBox.x;
	var maxWidth = backgroundPaintingBox.x + backgroundPaintingBox.width;
	var imageWidth = computedBackgroundSize.width;
	switch(backgroundRepeatX[1]) {
	case 72:
		maxWidth = totalWidth + imageWidth;
		break;
	case 67:
		while(totalWidth > backgroundPaintingBox.x) totalWidth -= imageWidth;
		break;
	case 70:
		imageWidth = Math.round(backgroundPositioningBox.width / computedBackgroundSize.width);
		while(totalWidth > backgroundPaintingBox.x) totalWidth -= imageWidth;
		break;
	case 71:
		while(totalWidth > backgroundPaintingBox.x) totalWidth -= imageWidth;
		break;
	default:
	}
	var initialWidth = totalWidth;
	var totalHeight = computedBackgroundPosition.y + Math.round(backgroundPositioningBox.y);
	var maxHeight = backgroundPaintingBox.y + backgroundPaintingBox.height;
	var imageHeight = computedBackgroundSize.height;
	switch(backgroundRepeatY[1]) {
	case 72:
		maxHeight = totalHeight + imageHeight;
		break;
	case 67:
		while(totalHeight > backgroundPaintingBox.y) totalHeight -= imageHeight;
		break;
	case 70:
		imageHeight = backgroundPositioningBox.height / computedBackgroundSize.height;
		while(totalHeight > backgroundPaintingBox.y) totalHeight -= imageHeight;
		break;
	case 71:
		while(totalHeight > backgroundPaintingBox.y) totalHeight -= imageHeight;
		break;
	default:
	}
	var initialHeight = totalHeight;
	if(imageWidth / intrinsicWidth == 1 && imageHeight / intrinsicHeight == 1) {
		cocktail_core_graphics_BackgroundDrawer._destinationPoint.x = totalWidth + backgroundBox.x - computedBackgroundPosition.x;
		cocktail_core_graphics_BackgroundDrawer._destinationPoint.y = totalHeight + backgroundBox.y - computedBackgroundPosition.y;
		var intWidth = intrinsicWidth;
		var intHeight = intrinsicHeight;
		cocktail_core_graphics_BackgroundDrawer._box.x = backgroundPaintingBox.x - computedBackgroundPosition.x;
		cocktail_core_graphics_BackgroundDrawer._box.y = backgroundPaintingBox.y - computedBackgroundPosition.y;
		cocktail_core_graphics_BackgroundDrawer._box.width = backgroundPaintingBox.width;
		cocktail_core_graphics_BackgroundDrawer._box.height = backgroundPaintingBox.height;
		while(totalHeight < maxHeight) {
			graphicContext.nativeLayer.graphics.copyPixels(resource.nativeResource,cocktail_core_graphics_BackgroundDrawer._box,cocktail_core_graphics_BackgroundDrawer._destinationPoint,clipRect);
			totalWidth += imageWidth;
			if(totalWidth >= maxWidth) {
				totalWidth = initialWidth;
				totalHeight += imageHeight;
			}
			cocktail_core_graphics_BackgroundDrawer._destinationPoint.x = totalWidth + backgroundBox.x - computedBackgroundPosition.x;
			cocktail_core_graphics_BackgroundDrawer._destinationPoint.y = totalHeight + backgroundBox.y - computedBackgroundPosition.y;
		}
	} else {
		var matrix = new cocktail_core_geom_Matrix();
		backgroundPaintingBox.x += backgroundBox.x + computedBackgroundPosition.x;
		backgroundPaintingBox.y += backgroundBox.y + computedBackgroundPosition.y;
		while(totalHeight < maxHeight) {
			matrix.identity();
			matrix.translate(totalWidth + backgroundBox.x,totalHeight + backgroundBox.y);
			matrix.scale(imageWidth / intrinsicWidth,imageHeight / intrinsicHeight);
			graphicContext.nativeLayer.graphics.drawImage(resource.nativeResource,matrix,backgroundPaintingBox,clipRect);
			totalWidth += imageWidth;
			if(totalWidth >= maxWidth) {
				totalWidth = initialWidth;
				totalHeight += imageHeight;
			}
		}
	}
};
var cocktail_core_graphics_BorderDrawer = function() { };
$hxClasses["cocktail.core.graphics.BorderDrawer"] = cocktail_core_graphics_BorderDrawer;
cocktail_core_graphics_BorderDrawer.__name__ = true;
cocktail_core_graphics_BorderDrawer.draw = function(graphicContext,borderBox,style,clipRect) {
	cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext,cocktail_core_graphics_BorderDrawer.getTopBorderBox(borderBox,style.usedValues.borderTopWidth),style.usedValues.borderTopColor,style.getKeyword(style.getComputedOrInitialProperty(72)),clipRect);
	cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext,cocktail_core_graphics_BorderDrawer.getLeftBorderBox(borderBox,style.usedValues.borderLeftWidth),style.usedValues.borderLeftColor,style.getKeyword(style.getComputedOrInitialProperty(75)),clipRect);
	cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext,cocktail_core_graphics_BorderDrawer.getRightBorderBox(borderBox,style.usedValues.borderRightWidth),style.usedValues.borderRightColor,style.getKeyword(style.getComputedOrInitialProperty(73)),clipRect);
	cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext,cocktail_core_graphics_BorderDrawer.getBottomBorderBox(borderBox,style.usedValues.borderBottomWidth),style.usedValues.borderBottomColor,style.getKeyword(style.getComputedOrInitialProperty(74)),clipRect);
};
cocktail_core_graphics_BorderDrawer.drawOutline = function(graphicContext,outlineBox,style,clipRect) {
	cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext,cocktail_core_graphics_BorderDrawer.getTopBorderBox(outlineBox,style.usedValues.outlineWidth),style.usedValues.outlineColor,style.getKeyword(style.getComputedOrInitialProperty(83)),clipRect);
	cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext,cocktail_core_graphics_BorderDrawer.getLeftBorderBox(outlineBox,style.usedValues.outlineWidth),style.usedValues.outlineColor,style.getKeyword(style.getComputedOrInitialProperty(83)),clipRect);
	cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext,cocktail_core_graphics_BorderDrawer.getRightBorderBox(outlineBox,style.usedValues.outlineWidth),style.usedValues.outlineColor,style.getKeyword(style.getComputedOrInitialProperty(83)),clipRect);
	cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext,cocktail_core_graphics_BorderDrawer.getBottomBorderBox(outlineBox,style.usedValues.outlineWidth),style.usedValues.outlineColor,style.getKeyword(style.getComputedOrInitialProperty(83)),clipRect);
};
cocktail_core_graphics_BorderDrawer.drawBorder = function(graphicContext,borderBox,borderColor,borderStyle,clipRect) {
	if(Math.round(borderBox.width) <= 0 || Math.round(borderBox.height) <= 0) return;
	graphicContext.nativeLayer.graphics.fillRect(borderBox,borderColor,clipRect);
};
cocktail_core_graphics_BorderDrawer.getTopBorderBox = function(borderBox,borderWidth) {
	cocktail_core_graphics_BorderDrawer._currentBorderBox.x = borderBox.x;
	cocktail_core_graphics_BorderDrawer._currentBorderBox.y = borderBox.y;
	cocktail_core_graphics_BorderDrawer._currentBorderBox.width = borderBox.width;
	cocktail_core_graphics_BorderDrawer._currentBorderBox.height = borderWidth;
	return cocktail_core_graphics_BorderDrawer._currentBorderBox;
};
cocktail_core_graphics_BorderDrawer.getBottomBorderBox = function(borderBox,borderWidth) {
	cocktail_core_graphics_BorderDrawer._currentBorderBox.x = borderBox.x;
	cocktail_core_graphics_BorderDrawer._currentBorderBox.y = borderBox.y + borderBox.height - borderWidth;
	cocktail_core_graphics_BorderDrawer._currentBorderBox.width = borderBox.width;
	cocktail_core_graphics_BorderDrawer._currentBorderBox.height = borderWidth;
	return cocktail_core_graphics_BorderDrawer._currentBorderBox;
};
cocktail_core_graphics_BorderDrawer.getLeftBorderBox = function(borderBox,borderWidth) {
	cocktail_core_graphics_BorderDrawer._currentBorderBox.x = borderBox.x;
	cocktail_core_graphics_BorderDrawer._currentBorderBox.y = borderBox.y;
	cocktail_core_graphics_BorderDrawer._currentBorderBox.width = borderWidth;
	cocktail_core_graphics_BorderDrawer._currentBorderBox.height = borderBox.height;
	return cocktail_core_graphics_BorderDrawer._currentBorderBox;
};
cocktail_core_graphics_BorderDrawer.getRightBorderBox = function(borderBox,borderWidth) {
	cocktail_core_graphics_BorderDrawer._currentBorderBox.x = borderBox.x + borderBox.width - borderWidth;
	cocktail_core_graphics_BorderDrawer._currentBorderBox.y = borderBox.y;
	cocktail_core_graphics_BorderDrawer._currentBorderBox.width = borderWidth;
	cocktail_core_graphics_BorderDrawer._currentBorderBox.height = borderBox.height;
	return cocktail_core_graphics_BorderDrawer._currentBorderBox;
};
var cocktail_core_graphics_GraphicsContext = function(layerRenderer) {
	cocktail_core_ds_FastNode.call(this);
	this.layerRenderer = layerRenderer;
	this._needsNativeLayerUpdate = true;
	this.nativeLayer = new cocktail_port_platform_flash_$player_NativeLayer();
};
$hxClasses["cocktail.core.graphics.GraphicsContext"] = cocktail_core_graphics_GraphicsContext;
cocktail_core_graphics_GraphicsContext.__name__ = true;
cocktail_core_graphics_GraphicsContext.__super__ = cocktail_core_ds_FastNode;
cocktail_core_graphics_GraphicsContext.prototype = $extend(cocktail_core_ds_FastNode.prototype,{
	dispose: function() {
		this.nativeLayer.dispose();
		this.nativeLayer = null;
		this.layerRenderer = null;
	}
	,appendChild: function(newChild) {
		cocktail_core_ds_FastNode.prototype.appendChild.call(this,newChild);
		newChild.addedToGraphicsContextTree();
	}
	,removeChild: function(oldChild) {
		oldChild.removedFromGraphicsContextTree();
		cocktail_core_ds_FastNode.prototype.removeChild.call(this,oldChild);
	}
	,insertBefore: function(newChild,refChild) {
		cocktail_core_ds_FastNode.prototype.insertBefore.call(this,newChild,refChild);
		if(refChild == null) return;
		newChild.addedToGraphicsContextTree();
	}
	,addedToGraphicsContextTree: function() {
		this.invalidateNativeLayer();
		this.invalidateBitmapSize();
	}
	,removedFromGraphicsContextTree: function() {
		this.detach();
		this.invalidateNativeLayer();
		this.invalidateBitmapSize();
	}
	,updateGraphicsSize: function(viewportWidth,viewportHeight) {
		if(this.layerRenderer.needsBitmap() == true) this.nativeLayer.initBitmapData(viewportWidth,viewportHeight);
		var child = this.firstChild;
		while(child != null) {
			child.updateGraphicsSize(viewportWidth,viewportHeight);
			child = child.nextSibling;
		}
	}
	,updateNativeLayer: function() {
		if(this._needsNativeLayerUpdate == true) {
			this._needsNativeLayerUpdate = false;
			this.detach();
			this.attach();
			return;
		}
		var child = this.firstChild;
		while(child != null) {
			child.updateNativeLayer();
			child = child.nextSibling;
		}
	}
	,invalidateNativeLayer: function() {
		this._needsNativeLayerUpdate = true;
		var htmlDocument = this.layerRenderer.rootElementRenderer.domNode.ownerDocument;
		htmlDocument.invalidationManager.invalidateNativeLayerTree();
	}
	,invalidateBitmapSize: function() {
		var htmlDocument = this.layerRenderer.rootElementRenderer.domNode.ownerDocument;
		htmlDocument.invalidationManager.invalidateBitmapSizes();
	}
	,attach: function() {
		this.doAttach();
		var child = this.firstChild;
		while(child != null) {
			child.attach();
			child = child.nextSibling;
		}
	}
	,detach: function() {
		var child = this.firstChild;
		while(child != null) {
			child.detach();
			child = child.nextSibling;
		}
		this.doDetach();
	}
	,doAttach: function() {
		var index = 0;
		var previousGraphicsContextSibling = this.previousSibling;
		while(previousGraphicsContextSibling != null) {
			index++;
			previousGraphicsContextSibling = previousGraphicsContextSibling.previousSibling;
		}
		this.nativeLayer.attach(this.parentNode.nativeLayer.platformLayer,index);
	}
	,doDetach: function() {
		this.nativeLayer.detach(this.parentNode.nativeLayer.platformLayer);
	}
	,__class__: cocktail_core_graphics_GraphicsContext
});
var cocktail_core_graphics_InitialGraphicsContext = function(layerRenderer) {
	cocktail_core_graphics_GraphicsContext.call(this,layerRenderer);
	this.invalidateNativeLayer();
};
$hxClasses["cocktail.core.graphics.InitialGraphicsContext"] = cocktail_core_graphics_InitialGraphicsContext;
cocktail_core_graphics_InitialGraphicsContext.__name__ = true;
cocktail_core_graphics_InitialGraphicsContext.__super__ = cocktail_core_graphics_GraphicsContext;
cocktail_core_graphics_InitialGraphicsContext.prototype = $extend(cocktail_core_graphics_GraphicsContext.prototype,{
	doAttach: function() {
		this.nativeLayer.attach(this.getTopPlatformLayer(),0);
		this.invalidateBitmapSize();
	}
	,doDetach: function() {
		this.nativeLayer.detach(this.getTopPlatformLayer());
	}
	,getTopPlatformLayer: function() {
		var htmlDocument = this.layerRenderer.rootElementRenderer.domNode.ownerDocument;
		return htmlDocument.getTopPlatformLayer();
	}
	,__class__: cocktail_core_graphics_InitialGraphicsContext
});
var cocktail_core_graphics_TextDrawer = function() { };
$hxClasses["cocktail.core.graphics.TextDrawer"] = cocktail_core_graphics_TextDrawer;
cocktail_core_graphics_TextDrawer.__name__ = true;
cocktail_core_graphics_TextDrawer.draw = function(graphicsContext,elementRenderer,hasUnderline,hasOverline,hasLineThrough,hasBlink,scrollOffset,clipRect) {
	var inlineBoxesLength = elementRenderer.inlineBoxes.length;
	var _g = 0;
	while(_g < inlineBoxesLength) {
		var i = _g++;
		var inlineBox = elementRenderer.inlineBoxes[i];
		cocktail_core_graphics_TextDrawer._renderRect.width = inlineBox.bounds.width;
		cocktail_core_graphics_TextDrawer._renderRect.height = inlineBox.bounds.height;
		cocktail_core_graphics_TextDrawer._destPoint.x = inlineBox.bounds.x + elementRenderer.globalBounds.x - scrollOffset.x;
		cocktail_core_graphics_TextDrawer._destPoint.y = inlineBox.bounds.y + elementRenderer.globalBounds.y - scrollOffset.y;
		cocktail_core_graphics_TextDrawer._destPoint.y += inlineBox.leadedAscent - elementRenderer.coreStyle.fontMetrics.ascent;
		if(inlineBox.lineBox != null) {
			cocktail_core_graphics_TextDrawer._destPoint.y += inlineBox.lineBox.bounds.y;
			cocktail_core_graphics_TextDrawer._destPoint.x += inlineBox.lineBox.bounds.x;
		}
		if(hasUnderline == true) {
			cocktail_core_graphics_TextDrawer._decorationRect.width = cocktail_core_graphics_TextDrawer._renderRect.width;
			cocktail_core_graphics_TextDrawer._decorationRect.height = cocktail_core_graphics_TextDrawer.TEXT_DECORATION_THICKNESS;
			cocktail_core_graphics_TextDrawer._decorationRect.x = cocktail_core_graphics_TextDrawer._destPoint.x;
			cocktail_core_graphics_TextDrawer._decorationRect.y = cocktail_core_graphics_TextDrawer._destPoint.y + elementRenderer.getLeadedAscent() + elementRenderer.coreStyle.fontMetrics.underlineOffset;
			graphicsContext.nativeLayer.graphics.fillRect(cocktail_core_graphics_TextDrawer._decorationRect,elementRenderer.coreStyle.usedValues.color,clipRect);
		}
		if(hasOverline == true) {
			cocktail_core_graphics_TextDrawer._decorationRect.width = cocktail_core_graphics_TextDrawer._renderRect.width;
			cocktail_core_graphics_TextDrawer._decorationRect.height = cocktail_core_graphics_TextDrawer.TEXT_DECORATION_THICKNESS;
			cocktail_core_graphics_TextDrawer._decorationRect.x = cocktail_core_graphics_TextDrawer._destPoint.x;
			cocktail_core_graphics_TextDrawer._decorationRect.y = cocktail_core_graphics_TextDrawer._destPoint.y;
			graphicsContext.nativeLayer.graphics.fillRect(cocktail_core_graphics_TextDrawer._decorationRect,elementRenderer.coreStyle.usedValues.color,clipRect);
		}
		if(inlineBox.isSpace == false) {
			var typedTextInlineBox = inlineBox;
			if(typedTextInlineBox.get_nativeTextBitmap() != null) graphicsContext.nativeLayer.graphics.copyPixels(typedTextInlineBox.get_nativeTextBitmap(),cocktail_core_graphics_TextDrawer._renderRect,cocktail_core_graphics_TextDrawer._destPoint,clipRect);
		}
		if(hasLineThrough == true) {
			cocktail_core_graphics_TextDrawer._decorationRect.width = cocktail_core_graphics_TextDrawer._renderRect.width;
			cocktail_core_graphics_TextDrawer._decorationRect.height = cocktail_core_graphics_TextDrawer.TEXT_DECORATION_THICKNESS;
			cocktail_core_graphics_TextDrawer._decorationRect.x = cocktail_core_graphics_TextDrawer._destPoint.x;
			cocktail_core_graphics_TextDrawer._decorationRect.y = cocktail_core_graphics_TextDrawer._destPoint.y + elementRenderer.coreStyle.fontMetrics.ascent / 2;
			graphicsContext.nativeLayer.graphics.fillRect(cocktail_core_graphics_TextDrawer._decorationRect,elementRenderer.coreStyle.usedValues.color,clipRect);
		}
	}
};
var cocktail_core_history_History = function(document) {
	this.stateDataArray = [];
	this.currentIdx = 0;
	this.document = document;
	this.stateDataArray.push({ state : null, title : "", url : null});
};
$hxClasses["cocktail.core.history.History"] = cocktail_core_history_History;
cocktail_core_history_History.__name__ = true;
cocktail_core_history_History.prototype = {
	dispose: function() {
		this.stateDataArray = null;
		this.document = null;
		this.state = null;
	}
	,__class__: cocktail_core_history_History
};
var cocktail_core_hittest_HitTestManager = function() {
	this._targetPoint = new cocktail_core_geom_PointVO(0.0,0.0);
	this._elementRenderersAtPoint = [];
};
$hxClasses["cocktail.core.hittest.HitTestManager"] = cocktail_core_hittest_HitTestManager;
cocktail_core_hittest_HitTestManager.__name__ = true;
cocktail_core_hittest_HitTestManager.prototype = {
	dispose: function() {
		this._elementRenderersAtPoint = null;
		this._targetPoint = null;
	}
	,getTopMostElementRendererAtPoint: function(stackingContext,x,y) {
		this._targetPoint.x = x;
		this._targetPoint.y = y;
		this._elementRenderersAtPoint = [];
		this.getElementRenderersAtPointInStackingContext(this._elementRenderersAtPoint,stackingContext,this._targetPoint);
		return this._elementRenderersAtPoint[this._elementRenderersAtPoint.length - 1];
	}
	,getElementRenderersAtPointInStackingContext: function(elementRenderersAtPoint,stackingContext,point) {
		this.getElementRenderersAtPointInLayers(elementRenderersAtPoint,stackingContext.layerRenderer,point);
		var child = stackingContext.firstChild;
		while(child != null) {
			this.getElementRenderersAtPointInStackingContext(elementRenderersAtPoint,child,point);
			child = child.nextSibling;
		}
	}
	,getElementRenderersAtPointInLayers: function(elementRenderersAtPoint,layer,point) {
		this.getElementRenderersAtPointInLayer(elementRenderersAtPoint,layer,layer.rootElementRenderer,point);
		var child = layer.firstChild;
		while(child != null) {
			if(child.hasOwnStackingContext == false) this.getElementRenderersAtPointInLayers(elementRenderersAtPoint,child,point);
			child = child.nextSibling;
		}
	}
	,getElementRenderersAtPointInLayer: function(elementRenderersAtPoint,layer,renderer,point) {
		this.hitTestElementRenderer(elementRenderersAtPoint,renderer,point);
		var child = renderer.firstChild;
		while(child != null) {
			if(child.layerRenderer == layer) {
				if(child.firstChild != null) this.getElementRenderersAtPointInLayer(elementRenderersAtPoint,layer,child,point); else this.hitTestElementRenderer(elementRenderersAtPoint,child,point);
			}
			child = child.nextSibling;
		}
	}
	,hitTestElementRenderer: function(elementRenderersAtPoint,elementRenderer,point) {
		if(this.isWithinBounds(point,elementRenderer.hitTestingBounds) == true) {
			if(elementRenderer.isVisible() == true) elementRenderersAtPoint.push(elementRenderer);
		}
	}
	,isWithinBounds: function(point,bounds) {
		return point.x >= bounds.x && point.x <= bounds.x + bounds.width && point.y >= bounds.y && point.y <= bounds.y + bounds.height;
	}
	,__class__: cocktail_core_hittest_HitTestManager
};
var cocktail_core_html_HTMLElement = function(tagName) {
	cocktail_core_dom_Element.call(this,tagName);
	this.attachedToDOM = false;
	this._isInitialised = false;
	this._needsCascading = false;
	this._needsStyleDeclarationUpdate = false;
	this._shouldCascadeAllProperties = true;
	this._needsElementRendererUpdate = true;
	this._pendingChangedProperties = [];
	this._initialStyleDeclaration = cocktail_core_css_InitialStyleDeclaration.getInstance();
};
$hxClasses["cocktail.core.html.HTMLElement"] = cocktail_core_html_HTMLElement;
cocktail_core_html_HTMLElement.__name__ = true;
cocktail_core_html_HTMLElement.__super__ = cocktail_core_dom_Element;
cocktail_core_html_HTMLElement.prototype = $extend(cocktail_core_dom_Element.prototype,{
	dispose: function() {
		this._ownerHTMLDocument = null;
		this.set_ownerDocument(null);
		this._initialStyleDeclaration = null;
		this._pendingChangedProperties = null;
		this.coreStyle.dispose();
		this.coreStyle = null;
		this.style.dispose();
		this.style = null;
	}
	,init: function() {
		this.initCoreStyle();
		this.initStyle();
	}
	,initCoreStyle: function() {
		this.coreStyle = new cocktail_core_css_CoreStyle(this);
	}
	,initStyle: function() {
		this.style = new cocktail_core_css_CSSStyleDeclaration(null,$bind(this,this.onInlineStyleChange));
	}
	,set_ownerDocument: function(value) {
		cocktail_core_dom_Element.prototype.set_ownerDocument.call(this,value);
		if(this._isInitialised == false) {
			this.init();
			this._isInitialised = true;
		}
		this._ownerHTMLDocument = value;
		return value;
	}
	,appendChild: function(newChild) {
		cocktail_core_dom_Element.prototype.appendChild.call(this,newChild);
		if(newChild.get_nodeType() == 1) {
			var child = newChild;
			child.appended();
		} else if(newChild.get_nodeType() == 3) this.invalidateElementRenderer();
		this.invalidateCascade();
		return newChild;
	}
	,removeChild: function(oldChild) {
		cocktail_core_dom_Element.prototype.removeChild.call(this,oldChild);
		if(oldChild.get_nodeType() == 1) {
			var child = oldChild;
			child.removed();
		} else if(oldChild.get_nodeType() == 3) this.invalidateElementRenderer();
		return oldChild;
	}
	,getElementsByTagName: function(tagName) {
		return cocktail_core_dom_Element.prototype.getElementsByTagName.call(this,tagName.toUpperCase());
	}
	,setAttribute: function(name,value) {
		name = name.toLowerCase();
		if(name == "style") {
			this.style.set_cssText(value);
			this.invalidateCascade();
		} else if(name == "class") this.set_className(value); else {
			cocktail_core_dom_Element.prototype.setAttribute.call(this,name,value);
			this.invalidateStyleDeclaration(true);
		}
	}
	,getAttribute: function(name) {
		if(name == "style") return this.style.get_cssText(); else return cocktail_core_dom_Element.prototype.getAttribute.call(this,name);
	}
	,getTargetAncestors: function() {
		var targetAncestors = cocktail_core_dom_Element.prototype.getTargetAncestors.call(this);
		targetAncestors.push(this._ownerHTMLDocument);
		if(this._ownerHTMLDocument.defaultView != null) targetAncestors.push(this._ownerHTMLDocument.defaultView);
		return targetAncestors;
	}
	,executeDefaultActionIfNeeded: function(defaultPrevented,event) {
		if(defaultPrevented == false) {
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.focus();
				break;
			}
		}
	}
	,reset: function() {
	}
	,invalidate: function() {
		if(this.elementRenderer != null) this.elementRenderer.invalidate();
	}
	,invalidateStyle: function(styleIndex) {
		if(this.elementRenderer != null) this.elementRenderer.invalidateStyle(styleIndex);
	}
	,invalidateElementRenderer: function() {
		this._needsElementRendererUpdate = true;
		if(this._ownerHTMLDocument != null) this._ownerHTMLDocument.invalidationManager.invalidateRenderingTree();
	}
	,invalidateLayerRenderer: function() {
		if(this.elementRenderer != null) this.elementRenderer.invalidateLayerRenderer();
	}
	,invalidateStyleDeclaration: function(recursive) {
		this._needsStyleDeclarationUpdate = true;
		if(recursive == true) {
			if(this.get_nodeType() == 1) {
				var length = this.childNodes.length;
				var _g = 0;
				while(_g < length) {
					var i = _g++;
					if(this.childNodes[i].get_nodeType() == 1) {
						var child = this.childNodes[i];
						child.invalidateStyleDeclaration(true);
					}
				}
			}
		}
		this.invalidateCascade();
	}
	,invalidateCascade: function() {
		this._needsCascading = true;
		if(this._ownerHTMLDocument != null) this._ownerHTMLDocument.invalidationManager.invalidateCascade();
	}
	,invalidateRendering: function() {
		if(this.elementRenderer != null) this._ownerHTMLDocument.invalidationManager.invalidateRendering();
	}
	,appended: function() {
		if(this.attachedToDOM == false) {
			if(this.isAttachedToDOM() == true) {
				this.attachedToDOM = true;
				this.addedToDOM();
				var child = this.get_firstChild();
				while(child != null) {
					if(child.get_nodeType() == 1) {
						var htmlChild = child;
						htmlChild.appended();
					}
					child = child.get_nextSibling();
				}
			}
		}
	}
	,removed: function() {
		this.attachedToDOM = false;
		this.removedFromDOM();
		var child = this.get_firstChild();
		while(child != null) {
			if(child.get_nodeType() == 1) {
				var htmlChild = child;
				htmlChild.removed();
			}
			child = child.get_nextSibling();
		}
	}
	,addedToDOM: function() {
		var _g = this.get_nodeType();
		switch(_g) {
		case 1:case 3:
			this.invalidateElementRenderer();
			break;
		}
		this.invalidateStyleDeclaration(true);
		this.invalidateCascade();
	}
	,removedFromDOM: function() {
		var _g = this.get_nodeType();
		switch(_g) {
		case 1:case 3:
			this.detach(true);
			this.invalidateElementRenderer();
			break;
		}
	}
	,isAttachedToDOM: function() {
		var parent = this.parentNode;
		while(parent != null) {
			if(parent.get_nodeType() == 9) return true;
			parent = parent.parentNode;
		}
		return false;
	}
	,updateElementRenderer: function() {
		if(this._needsElementRendererUpdate == true) {
			this._needsElementRendererUpdate = false;
			if(this.isRendered() == false) {
				if(this.elementRenderer != null) {
					this.detach(true);
					return;
				}
			} else if(this.elementRenderer == null) {
				this.attach(true);
				return;
			} else {
				this.detach(false);
				this.attach(false);
			}
		}
		if(this.get_nodeType() == 1) {
			var length = this.childNodes.length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				if(this.childNodes[i].get_nodeType() == 1) {
					var child = this.childNodes[i];
					child.updateElementRenderer();
				}
			}
		}
	}
	,attach: function(recursive) {
		if(this.isParentRendered() == false) return;
		if(this.isRendered() == true) this.createElementRenderer();
		if(this.elementRenderer != null) {
			this.attachToParentElementRenderer();
			if(this.get_nodeType() == 1) {
				var length = this.childNodes.length;
				var _g = 0;
				while(_g < length) {
					var i = _g++;
					if(recursive == true && this.childNodes[i].get_nodeType() == 1) {
						var child = this.childNodes[i];
						child.attach(true);
					} else if(this.childNodes[i].get_nodeType() == 3) this.attachTextNode(this.childNodes[i]);
				}
			}
		}
		this._needsElementRendererUpdate = false;
	}
	,detach: function(recursive) {
		if(this.elementRenderer != null) {
			if(this.get_nodeType() == 1) {
				var length = this.childNodes.length;
				var _g = 0;
				while(_g < length) {
					var i = _g++;
					if(recursive == true && this.childNodes[i].get_nodeType() == 1) {
						var child = this.childNodes[i];
						child.detach(true);
					} else if(this.childNodes[i].get_nodeType() == 3) this.detachTextNode(this.childNodes[i]);
				}
			}
			this.detachFromParentElementRenderer();
			this.elementRenderer = null;
		}
	}
	,cascade: function(cascadeManager,programmaticChange) {
		if(this._needsCascading == true || cascadeManager.hasPropertiesToCascade == true) {
			this.cascadeSelf(cascadeManager,programmaticChange);
			this._needsCascading = false;
			if(cascadeManager.hasDisplay == true || cascadeManager.hasFloat == true || cascadeManager.hasOverflowX == true || cascadeManager.hasOverflowY == true || cascadeManager.hasPosition == true) {
				this.detach(true);
				this.invalidateElementRenderer();
			} else if(cascadeManager.hasTransform == true || cascadeManager.hasZIndex == true || cascadeManager.hasOpacity == true) this.invalidateLayerRenderer();
		}
		var childLength = this.childNodes.length;
		var _g = 0;
		while(_g < childLength) {
			var i = _g++;
			if(this.childNodes[i].get_nodeType() == 1) {
				var htmlChild = this.childNodes[i];
				htmlChild.cascade(cascadeManager,programmaticChange);
			}
		}
	}
	,getStyleDeclaration: function() {
		this._shouldCascadeAllProperties = true;
		this.styleManagerCSSDeclaration = this._ownerHTMLDocument.getStyleDeclaration(this);
	}
	,cascadeSelf: function(cascadeManager,programmaticChange) {
		if(this.parentNode != null) {
			var parent = this.parentNode;
			if(parent.styleManagerCSSDeclaration != null) {
				if(this._needsStyleDeclarationUpdate == true || this.styleManagerCSSDeclaration == null) {
					this.getStyleDeclaration();
					this._needsStyleDeclarationUpdate = false;
				}
				var parentStyleDeclaration = parent.coreStyle.computedValues;
				var parentFontMetrics = parent.coreStyle.fontMetrics;
				if(this._shouldCascadeAllProperties == true) cascadeManager.shouldCascadeAll(); else {
					var length = this._pendingChangedProperties.length;
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						cascadeManager.addPropertyToCascade(this._pendingChangedProperties[i]);
					}
				}
				cascadeManager.parentRelativeLengthReference.em = parentFontMetrics.fontSize;
				cascadeManager.parentRelativeLengthReference.ch = parentFontMetrics.zeroHeight;
				cascadeManager.parentRelativeLengthReference.ex = parentFontMetrics.xHeight;
				this.coreStyle.cascade(cascadeManager,this._initialStyleDeclaration,this.styleManagerCSSDeclaration,this.style,parentStyleDeclaration,programmaticChange);
			}
		}
		this._shouldCascadeAllProperties = false;
		this._pendingChangedProperties = [];
	}
	,onInlineStyleChange: function(changedPropertyIndex) {
		if(this._shouldCascadeAllProperties == false) this._pendingChangedProperties.push(changedPropertyIndex);
		this.invalidateCascade();
	}
	,getNextElementRendererSibling: function() {
		var nextSibling = this.get_nextSibling();
		if(nextSibling == null) return null; else while(nextSibling != null) {
			if(nextSibling.get_nodeType() == 1) {
				var htmlNextSibling = nextSibling;
				if(htmlNextSibling.elementRenderer != null) {
					var elementRenderParent = htmlNextSibling.elementRenderer.parentNode;
					if(elementRenderParent.isAnonymousBlockBox() == true) return elementRenderParent;
					return htmlNextSibling.elementRenderer;
				}
			}
			nextSibling = nextSibling.get_nextSibling();
		}
		return null;
	}
	,attachToParentElementRenderer: function() {
		var parent = this.parentNode;
		parent.elementRenderer.insertBefore(this.elementRenderer,this.getNextElementRendererSibling());
	}
	,detachFromParentElementRenderer: function() {
		this.elementRenderer.parentNode.removeChild(this.elementRenderer);
	}
	,attachTextNode: function(textNode) {
		var textRenderer = new cocktail_core_renderer_TextRenderer(textNode,this.coreStyle);
		this.elementRenderer.appendChild(textRenderer);
	}
	,detachTextNode: function(textNode) {
		var child = this.elementRenderer.firstChild;
		while(child != null) {
			if(child.domNode == textNode) {
				this.elementRenderer.removeChild(child);
				return;
			} else if(child.isAnonymousBlockBox() == true) {
				if(child.firstChild != null) {
					if(child.firstChild.domNode == textNode) {
						this.elementRenderer.removeChild(child);
						return;
					}
				}
			}
			child = child.nextSibling;
		}
	}
	,createElementRenderer: function() {
		var _g = this.coreStyle.getKeyword(this.coreStyle.getComputedOrInitialProperty(0));
		switch(_g[1]) {
		case 28:case 29:
			this.elementRenderer = new cocktail_core_renderer_BlockBoxRenderer(this,this.coreStyle);
			break;
		case 30:
			this.elementRenderer = new cocktail_core_renderer_InlineBoxRenderer(this,this.coreStyle);
			break;
		case 18:
			break;
		default:
			throw new js__$Boot_HaxeError("Illegal value for display style");
		}
	}
	,isRendered: function() {
		if(this.get_hidden() == true) return false;
		if(this.coreStyle.isNone(this.coreStyle.getComputedOrInitialProperty(0))) return false;
		return true;
	}
	,isParentRendered: function() {
		if(this.parentNode == null) return false;
		var parent = this.parentNode;
		return parent.elementRenderer != null;
	}
	,startPendingTransitions: function() {
		var atLeastOneTransitionStarted = false;
		var transitionStarted = this.coreStyle.startPendingTransitions();
		if(transitionStarted == true) atLeastOneTransitionStarted = true;
		var length = this.childNodes.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			if(this.childNodes[i].get_nodeType() == 1) {
				var child = this.childNodes[i];
				var transitionStarted1 = child.startPendingTransitions();
				if(transitionStarted1 == true) atLeastOneTransitionStarted = true;
			}
		}
		return atLeastOneTransitionStarted;
	}
	,endPendingTransitions: function() {
		this.coreStyle.endPendingTransitions();
		var length = this.childNodes.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			if(this.childNodes[i].get_nodeType() == 1) {
				var child = this.childNodes[i];
				child.endPendingTransitions();
			}
		}
	}
	,createMouseClickEvent: function() {
		var mouseEvent = new cocktail_core_event_MouseEvent();
		mouseEvent.initMouseEvent("click",false,false,null,0,0,0,0,0,false,false,false,false,0,null);
		return mouseEvent;
	}
	,fireEvent: function(eventType,bubbles,cancelable) {
		var event = new cocktail_core_event_Event();
		event.initEvent(eventType,bubbles,cancelable);
		this.dispatchEvent(event);
		return event.defaultPrevented;
	}
	,isFocusable: function() {
		if(this.parentNode == null) return false;
		if(this.elementRenderer == null) return false; else if(this.isDefaultFocusable() == true) return true; else if(this.get_tabIndex() > 0) return true;
		return false;
	}
	,isDefaultFocusable: function() {
		return false;
	}
	,focus: function() {
		this._ownerHTMLDocument.set_activeElement(this);
	}
	,triggerActivationBehaviour: function(clickEvent) {
		var nearestActivatableElement = this.getNearestActivatableElement();
		if(nearestActivatableElement != null) nearestActivatableElement.runPreClickActivation();
		if(clickEvent == null) clickEvent = this.createMouseClickEvent();
		this.dispatchEvent(clickEvent);
		if(nearestActivatableElement != null) {
			if(clickEvent.defaultPrevented == true) nearestActivatableElement.runCanceledActivationStep(); else nearestActivatableElement.runPostClickActivationStep(clickEvent);
		}
	}
	,hasActivationBehaviour: function() {
		return false;
	}
	,runPreClickActivation: function() {
	}
	,runCanceledActivationStep: function() {
	}
	,runPostClickActivationStep: function(event) {
	}
	,getNearestActivatableElement: function() {
		var htmlElement = this;
		while(htmlElement.hasActivationBehaviour() == false) {
			if(htmlElement.parentNode == null || htmlElement.parentNode.get_nodeType() == 9) return null;
			htmlElement = htmlElement.parentNode;
		}
		return htmlElement;
	}
	,get_tabIndex: function() {
		var tabIndex = cocktail_core_dom_Element.prototype.getAttribute.call(this,"tabindex");
		if(tabIndex == null) {
			if(this.isDefaultFocusable() == true) return 0; else return -1;
		} else return Std.parseInt(tabIndex);
	}
	,get_id: function() {
		return this.getAttributeAsDOMString("id");
	}
	,get_className: function() {
		return this.getAttributeAsDOMString("class");
	}
	,set_className: function(value) {
		cocktail_core_dom_Element.prototype.setAttribute.call(this,"class",value);
		this.classList = value.split(" ");
		this.invalidateStyleDeclaration(true);
		return value;
	}
	,get_hidden: function() {
		return this.getAttributeAsBool("hidden");
	}
	,getAttributeAsDOMString: function(name) {
		var attribute = this.getAttribute(name);
		if(attribute == null) attribute = "";
		return attribute;
	}
	,getEnumeratedAttributeAsDOMString: function(name,allowedValues,missingValueDefault,invalidValueDefault) {
		var attribute = this.getAttribute(name);
		if(attribute == null) {
			if(missingValueDefault != null) return missingValueDefault; else return "";
		}
		var allowedValuesLength = allowedValues.length;
		var _g = 0;
		while(_g < allowedValuesLength) {
			var i = _g++;
			if(attribute == allowedValues[i]) return attribute;
		}
		if(invalidValueDefault != null) return invalidValueDefault; else if(missingValueDefault != null) return missingValueDefault; else return "";
	}
	,getAttributeAsBool: function(name) {
		if(this.getAttribute(name) != null) return true; else return false;
	}
	,getAttributeAsPositiveSignedInteger: function(name,defaultValue) {
		var attribute = this.getAttribute(name);
		if(attribute == null) {
			if(defaultValue != null) return defaultValue; else return -1;
		}
		var valueAsInt = Std.parseInt(attribute);
		if(valueAsInt < 0) return -1; else return valueAsInt;
	}
	,set_innerHTML: function(value) {
		var childLength = this.childNodes.length;
		var _g = 0;
		while(_g < childLength) {
			var i = _g++;
			this.removeChild(this.childNodes[0]);
		}
		var wrappedHTML = "<" + "DIV" + ">";
		wrappedHTML += value;
		wrappedHTML += "<" + "/" + "DIV" + ">";
		var node = cocktail_core_parser_DOMParser.parse(wrappedHTML,this.ownerDocument);
		if(node == null) return value;
		var length = node.childNodes.length;
		var _g1 = 0;
		while(_g1 < length) {
			var i1 = _g1++;
			this.appendChild(node.childNodes[0]);
		}
		return value;
	}
	,__class__: cocktail_core_html_HTMLElement
	,__properties__: $extend(cocktail_core_dom_Element.prototype.__properties__,{set_innerHTML:"set_innerHTML",get_hidden:"get_hidden",set_className:"set_className",get_className:"get_className",get_id:"get_id",get_tabIndex:"get_tabIndex"})
});
var cocktail_core_html_EmbeddedElement = function(tagName) {
	cocktail_core_html_HTMLElement.call(this,tagName);
};
$hxClasses["cocktail.core.html.EmbeddedElement"] = cocktail_core_html_EmbeddedElement;
cocktail_core_html_EmbeddedElement.__name__ = true;
cocktail_core_html_EmbeddedElement.__super__ = cocktail_core_html_HTMLElement;
cocktail_core_html_EmbeddedElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype,{
	init: function() {
		cocktail_core_html_HTMLElement.prototype.init.call(this);
	}
	,get_intrinsicHeight: function() {
		return this.intrinsicHeight;
	}
	,get_intrinsicWidth: function() {
		return this.intrinsicWidth;
	}
	,get_intrinsicRatio: function() {
		return this.intrinsicRatio;
	}
	,get_width: function() {
		return this.getAttributeAsPositiveSignedInteger("width",0);
	}
	,get_height: function() {
		return this.getAttributeAsPositiveSignedInteger("height",0);
	}
	,__class__: cocktail_core_html_EmbeddedElement
	,__properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__,{get_intrinsicRatio:"get_intrinsicRatio",get_intrinsicWidth:"get_intrinsicWidth",get_intrinsicHeight:"get_intrinsicHeight",get_width:"get_width",get_height:"get_height"})
});
var cocktail_core_html_FormAssociatedElement = function(tagName) {
	cocktail_core_html_EmbeddedElement.call(this,tagName);
};
$hxClasses["cocktail.core.html.FormAssociatedElement"] = cocktail_core_html_FormAssociatedElement;
cocktail_core_html_FormAssociatedElement.__name__ = true;
cocktail_core_html_FormAssociatedElement.__super__ = cocktail_core_html_EmbeddedElement;
cocktail_core_html_FormAssociatedElement.prototype = $extend(cocktail_core_html_EmbeddedElement.prototype,{
	appended: function() {
		cocktail_core_html_EmbeddedElement.prototype.appended.call(this);
		this.resetFormOwner();
	}
	,removed: function() {
		cocktail_core_html_EmbeddedElement.prototype.removed.call(this);
		this.resetFormOwner();
	}
	,resetFormOwner: function() {
		var firstFormAncestor = this.getFirstFormAncestor();
		if(firstFormAncestor == null) return;
		if(firstFormAncestor == this.form) return;
		if(this.form != null) {
			this.dissociateFormElement(this.form);
			this.form = null;
		}
		if(firstFormAncestor != null) {
			this.form = firstFormAncestor;
			this.associateFormElement(this.form);
		}
	}
	,getFirstFormAncestor: function() {
		if(this.parentNode.get_nodeType() != 1) return null;
		var parent = this.parentNode;
		while(parent != null) {
			if(parent.tagName == "FORM") return parent;
			if(parent.get_nodeType() != 1) return null;
			if(parent.parentNode == null) return null;
			if(parent.parentNode.get_nodeType() != 1) return null;
			parent = parent.parentNode;
		}
		return null;
	}
	,associateFormElement: function(form) {
		form.elements.push(this);
	}
	,dissociateFormElement: function(form) {
		HxOverrides.remove(form.elements,this);
	}
	,__class__: cocktail_core_html_FormAssociatedElement
});
var cocktail_core_html_HTMLAnchorElement = function() {
	cocktail_core_html_HTMLElement.call(this,"A");
};
$hxClasses["cocktail.core.html.HTMLAnchorElement"] = cocktail_core_html_HTMLAnchorElement;
cocktail_core_html_HTMLAnchorElement.__name__ = true;
cocktail_core_html_HTMLAnchorElement.__super__ = cocktail_core_html_HTMLElement;
cocktail_core_html_HTMLAnchorElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype,{
	hasActivationBehaviour: function() {
		return true;
	}
	,runPostClickActivationStep: function(event) {
		if(event.defaultPrevented == true) return;
		this.openDocument();
	}
	,isDefaultFocusable: function() {
		if(this.get_href() != null) return true; else return false;
	}
	,openDocument: function() {
		if(this.get_href() != null) this._ownerHTMLDocument.navigateToURL(this.get_href(),this.get_target());
	}
	,get_href: function() {
		return this.getAttributeAsDOMString("href");
	}
	,get_target: function() {
		return this.getAttributeAsDOMString("target");
	}
	,__class__: cocktail_core_html_HTMLAnchorElement
	,__properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__,{get_target:"get_target",get_href:"get_href"})
});
var cocktail_core_html_HTMLMediaElement = function(tagName) {
	cocktail_core_html_EmbeddedElement.call(this,tagName);
	this.networkState = 0;
	this.ended = false;
	this.duration = 0;
	this.paused = true;
	this.seeking = false;
	this.readyState = 0;
	this._autoplaying = true;
	this.set_volume(1.0);
	this.set_muted(false);
	this._stalledByPreload = false;
	this._loadedDataWasDispatched = false;
	this._defaultPlaybackStartPosition = 0;
	this._officialPlaybackPosition = 0;
	this._currentPlaybackPosition = 0;
	this._initialPlaybackPosition = 0;
	this._earliestPossiblePosition = 0;
};
$hxClasses["cocktail.core.html.HTMLMediaElement"] = cocktail_core_html_HTMLMediaElement;
cocktail_core_html_HTMLMediaElement.__name__ = true;
cocktail_core_html_HTMLMediaElement.__super__ = cocktail_core_html_EmbeddedElement;
cocktail_core_html_HTMLMediaElement.prototype = $extend(cocktail_core_html_EmbeddedElement.prototype,{
	init: function() {
		this.initNativeMedia();
		cocktail_core_html_EmbeddedElement.prototype.init.call(this);
	}
	,initNativeMedia: function() {
	}
	,appendChild: function(newChild) {
		cocktail_core_html_EmbeddedElement.prototype.appendChild.call(this,newChild);
		if(this.get_src() == null && this.networkState == 0) {
			if(newChild.get_nodeName() == "SOURCE") this.selectResource();
		}
		return newChild;
	}
	,setAttribute: function(name,value) {
		if(name == "src") this.set_src(value); else if(name == "preload") this.set_preload(value); else cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this,name,value);
	}
	,getAttribute: function(name) {
		if(name == "preload") return this.get_preload(); else return cocktail_core_html_EmbeddedElement.prototype.getAttribute.call(this,name);
	}
	,play: function() {
		if(this.networkState == 0) this.selectResource();
		if(this.ended == true) {
			this.ended = false;
			this.seek(0);
		}
		if(this.paused == true) {
			this.paused = false;
			this.fireEvent("play",false,false);
			var _g = this.readyState;
			switch(_g) {
			case 0:case 1:case 2:
				this.fireEvent("waiting",false,false);
				break;
			case 3:case 4:
				this.doPlay();
				this.fireEvent("playing",false,false);
				break;
			}
		}
		this._autoplaying = false;
		if(this._stalledByPreload == true) this.selectResource();
	}
	,canPlayType: function(type) {
		return this.nativeMedia.canPlayType(type);
	}
	,doPlay: function() {
		this.nativeMedia.play();
		this.onTimeUpdateTick(0);
	}
	,selectResource: function() {
		this.networkState = 3;
		this._ownerHTMLDocument.timer.delay($bind(this,this.doSelectResource));
	}
	,doSelectResource: function(time) {
		var mode;
		var candidate;
		if(this.get_src() != null) mode = 0; else if(this.hasChildSourceElement() == true) {
			mode = 1;
			var length = this.childNodes.length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				if(this.childNodes[i].get_nodeName() == "SOURCE") {
					candidate = this.childNodes[i];
					break;
				}
			}
		} else {
			this.networkState = 0;
			return;
		}
		this.networkState = 2;
		this.fireEvent("loadstart",false,false);
		if(mode == 0) {
			if(this.get_src() == "") {
				this.networkState = 3;
				this.fireEvent("error",false,false);
				return;
			}
			this.currentSrc = this.get_src();
			this.fetchResource(this.currentSrc);
		} else if(mode == 1) {
			var _g1 = 0;
			var _g2 = this.childNodes.length;
			while(_g1 < _g2) {
				var i1 = _g1++;
				if(this.childNodes[i1].get_nodeName() == "SOURCE") {
					var sourceChild = this.childNodes[i1];
					if(sourceChild.get_type() != null) {
						if(this.canPlayType(sourceChild.get_type()) == "probably") {
							this.currentSrc = sourceChild.get_src();
							this.fetchResource(this.currentSrc);
							return;
						}
					} else if(sourceChild.get_src() != null) {
						if(this.canPlayType(sourceChild.get_src()) == "probably") {
							this.currentSrc = sourceChild.get_src();
							this.fetchResource(this.currentSrc);
							return;
						}
					}
				}
			}
			this.networkState = 0;
		}
	}
	,fetchResource: function(url) {
		if(this.get_preload() == "none" && this._stalledByPreload == false) {
			if(this.get_autoplay() == false) {
				this.networkState = 1;
				this.fireEvent("suspend",false,false);
				this._stalledByPreload = true;
				return;
			}
		}
		this.nativeMedia.onLoadedMetaData = $bind(this,this.onNativeMediaLoadedMetaData);
		var absoluteUrl = this._ownerHTMLDocument.getAbsoluteURL(url);
		this.nativeMedia.set_src(absoluteUrl);
	}
	,seek: function(newPlaybackPosition) {
		if(this.readyState == 0) return;
		if(this.seeking == true) {
		}
		this.seeking = true;
		if(newPlaybackPosition > this.duration) newPlaybackPosition = this.duration;
		if(newPlaybackPosition < this._earliestPossiblePosition) newPlaybackPosition = 0;
		this.fireEvent("seeking",false,false);
		this._currentPlaybackPosition = newPlaybackPosition;
		this.nativeMedia.seek(newPlaybackPosition);
		this.fireEvent("timeupdate",false,false);
		this.fireEvent("seeked",false,false);
	}
	,setReadyState: function(newReadyState) {
		if(this.readyState == 0 && newReadyState == 1) this.fireEvent("loadedmetadata",false,false);
		if(this.readyState == 1 && (newReadyState == 2 || newReadyState == 4 || newReadyState == 3) || this.readyState == 3 && newReadyState == 4) {
			if(this._loadedDataWasDispatched == false && this.readyState == 1) {
				this.fireEvent("loadeddata",false,false);
				this._loadedDataWasDispatched = true;
			}
			if(newReadyState == 4 || newReadyState == 3) {
				if(this.readyState >= 3 && newReadyState <= 2) {
					if(this.isPotentiallyPlaying() == true) {
						this.fireEvent("timeupdate",false,false);
						this.fireEvent("waiting",false,false);
					}
				}
				if(this.readyState <= 2 && newReadyState == 3) {
					this.fireEvent("canplay",false,false);
					if(this.paused == false) {
						this.doPlay();
						this.fireEvent("playing",false,false);
					}
				}
				if(newReadyState == 4) {
					if(this.readyState == 2) {
						this.fireEvent("canplay",false,false);
						if(this.paused == false) {
							this.doPlay();
							this.fireEvent("playing",false,false);
						}
					}
					if(this._autoplaying == true) {
						if(this.paused == true) {
							if(this.get_autoplay() == true) {
								this.paused = false;
								this.fireEvent("play",false,false);
								this.doPlay();
								this.fireEvent("playing",false,false);
							}
						}
					}
					this.fireEvent("canplaythrough",false,false);
				}
			}
		}
		this.readyState = newReadyState;
	}
	,isPotentiallyPlaying: function() {
		if(this.paused == true) return false;
		if(this.ended == true) return false;
		return true;
	}
	,establishMediaTimeline: function() {
		this._currentPlaybackPosition = 0;
		this._initialPlaybackPosition = 0;
		this._officialPlaybackPosition = 0;
		this.duration = this.nativeMedia.get_duration();
		this.fireEvent("durationchange",false,false);
		this.setReadyState(1);
		var jumped = false;
		if(this._defaultPlaybackStartPosition > 0) {
			this.seek(this._defaultPlaybackStartPosition);
			jumped = true;
		}
		this._defaultPlaybackStartPosition = 0;
	}
	,hasChildSourceElement: function() {
		var _g1 = 0;
		var _g = this.childNodes.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.childNodes[i].get_nodeName() == "SOURCE") return true;
		}
		return false;
	}
	,onNativeMediaLoadedMetaData: function(e) {
		this.intrinsicHeight = this.nativeMedia.get_height();
		this.intrinsicWidth = this.nativeMedia.get_width();
		this.intrinsicRatio = this.get_intrinsicHeight() / this.get_intrinsicWidth();
		this.establishMediaTimeline();
		this.invalidate();
		this.onProgressTick(0);
		if(this._stalledByPreload == true) {
			this._stalledByPreload = false;
			this.play();
		}
	}
	,onTimeUpdateTick: function(timeStamp) {
		if(this.paused == true) return;
		this._currentPlaybackPosition = this.nativeMedia.get_currentTime();
		this._officialPlaybackPosition = this._currentPlaybackPosition;
		if(this.duration - this._currentPlaybackPosition < 0.2) {
			if(this.get_loop() == true) {
				this.seek(0);
				this.doPlay();
				return;
			}
			this.ended = true;
			this._currentPlaybackPosition = this.duration;
			this._officialPlaybackPosition = this._currentPlaybackPosition;
			this.fireEvent("timeupdate",false,false);
			if(this.paused == false) {
				this.paused = true;
				this.fireEvent("pause",false,false);
			}
			this.fireEvent("ended",false,false);
			return;
		}
		this.fireEvent("timeupdate",false,false);
		this._ownerHTMLDocument.timer.delay($bind(this,this.onTimeUpdateTick),250);
	}
	,onProgressTick: function(timeStamp) {
		this.fireEvent("progress",false,false);
		if(this.readyState == 1) this.setReadyState(3);
		if(this.nativeMedia.get_bytesLoaded() >= this.nativeMedia.get_bytesTotal()) {
			this.setReadyState(4);
			this.networkState = 1;
			this.fireEvent("suspend",false,false);
			return;
		}
		this._ownerHTMLDocument.timer.delay($bind(this,this.onProgressTick),350);
	}
	,get_src: function() {
		return this.getAttribute("src");
	}
	,set_src: function(value) {
		cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this,"src",value);
		this.selectResource();
		return value;
	}
	,get_autoplay: function() {
		if(this.getAttribute("autoplay") != null) return true; else return false;
	}
	,get_loop: function() {
		if(this.getAttribute("loop") != null) return true; else return false;
	}
	,get_preload: function() {
		var preloadValue = cocktail_core_html_EmbeddedElement.prototype.getAttribute.call(this,"preload");
		if(preloadValue == null) return "metadata";
		return preloadValue;
	}
	,set_preload: function(value) {
		switch(value) {
		case "":
			value = "auto";
			break;
		case "auto":case "metadata":case "none":
			break;
		default:
			value = "metadata";
		}
		cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this,"preload",value);
		return value;
	}
	,set_muted: function(value) {
		this.muted = value;
		if(this.nativeMedia == null) return value;
		if(value == false) this.nativeMedia.set_volume(this.volume); else this.nativeMedia.set_volume(0);
		this.fireEvent("volumechange",false,false);
		return value;
	}
	,set_volume: function(value) {
		this.volume = value;
		if(this.nativeMedia == null) return value;
		if(this.muted == false) this.nativeMedia.set_volume(value);
		this.fireEvent("volumechange",false,false);
		return value;
	}
	,__class__: cocktail_core_html_HTMLMediaElement
	,__properties__: $extend(cocktail_core_html_EmbeddedElement.prototype.__properties__,{set_volume:"set_volume",set_muted:"set_muted",set_preload:"set_preload",get_preload:"get_preload",get_loop:"get_loop",get_autoplay:"get_autoplay",set_src:"set_src",get_src:"get_src"})
});
var cocktail_core_html_HTMLAudioElement = function() {
	cocktail_core_html_HTMLMediaElement.call(this,"AUDIO");
};
$hxClasses["cocktail.core.html.HTMLAudioElement"] = cocktail_core_html_HTMLAudioElement;
cocktail_core_html_HTMLAudioElement.__name__ = true;
cocktail_core_html_HTMLAudioElement.__super__ = cocktail_core_html_HTMLMediaElement;
cocktail_core_html_HTMLAudioElement.prototype = $extend(cocktail_core_html_HTMLMediaElement.prototype,{
	initNativeMedia: function() {
		this.nativeMedia = new cocktail_port_platform_flash_$player_NativeAudio();
	}
	,createElementRenderer: function() {
	}
	,__class__: cocktail_core_html_HTMLAudioElement
});
var cocktail_core_html_HTMLBRElement = function() {
	cocktail_core_html_EmbeddedElement.call(this,"BR");
};
$hxClasses["cocktail.core.html.HTMLBRElement"] = cocktail_core_html_HTMLBRElement;
cocktail_core_html_HTMLBRElement.__name__ = true;
cocktail_core_html_HTMLBRElement.__super__ = cocktail_core_html_EmbeddedElement;
cocktail_core_html_HTMLBRElement.prototype = $extend(cocktail_core_html_EmbeddedElement.prototype,{
	__class__: cocktail_core_html_HTMLBRElement
});
var cocktail_core_html_HTMLBodyElement = function() {
	cocktail_core_html_HTMLElement.call(this,"BODY");
};
$hxClasses["cocktail.core.html.HTMLBodyElement"] = cocktail_core_html_HTMLBodyElement;
cocktail_core_html_HTMLBodyElement.__name__ = true;
cocktail_core_html_HTMLBodyElement.__super__ = cocktail_core_html_HTMLElement;
cocktail_core_html_HTMLBodyElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype,{
	createElementRenderer: function() {
		this.elementRenderer = new cocktail_core_renderer_BodyBoxRenderer(this,this.coreStyle);
	}
	,cascadeSelf: function(cascadeManager,programmaticChange) {
		cocktail_core_html_HTMLElement.prototype.cascadeSelf.call(this,cascadeManager,programmaticChange);
		var parent = this.parentNode;
		var parentCoreStyle = parent.coreStyle;
		if(parentCoreStyle.computedValues.get_overflowX() != null) {
			var _g = parentCoreStyle.getKeyword(parentCoreStyle.getComputedOrInitialProperty(51));
			switch(_g[1]) {
			case 36:
				parentCoreStyle.computedValues.set_overflowX(this.coreStyle.computedValues.get_overflowX());
				break;
			default:
			}
		}
		if(parentCoreStyle.computedValues.get_overflowY() != null) {
			var _g1 = parentCoreStyle.getKeyword(parentCoreStyle.getComputedOrInitialProperty(52));
			switch(_g1[1]) {
			case 36:
				parentCoreStyle.computedValues.set_overflowY(this.coreStyle.computedValues.get_overflowY());
				break;
			default:
			}
		}
	}
	,__class__: cocktail_core_html_HTMLBodyElement
});
var cocktail_core_html_ValueModeValue = $hxClasses["cocktail.core.html.ValueModeValue"] = { __ename__ : true, __constructs__ : ["VALUE","DEFAULT","DEFAULT_ON","FILENAME"] };
cocktail_core_html_ValueModeValue.VALUE = ["VALUE",0];
cocktail_core_html_ValueModeValue.VALUE.toString = $estr;
cocktail_core_html_ValueModeValue.VALUE.__enum__ = cocktail_core_html_ValueModeValue;
cocktail_core_html_ValueModeValue.DEFAULT = ["DEFAULT",1];
cocktail_core_html_ValueModeValue.DEFAULT.toString = $estr;
cocktail_core_html_ValueModeValue.DEFAULT.__enum__ = cocktail_core_html_ValueModeValue;
cocktail_core_html_ValueModeValue.DEFAULT_ON = ["DEFAULT_ON",2];
cocktail_core_html_ValueModeValue.DEFAULT_ON.toString = $estr;
cocktail_core_html_ValueModeValue.DEFAULT_ON.__enum__ = cocktail_core_html_ValueModeValue;
cocktail_core_html_ValueModeValue.FILENAME = ["FILENAME",3];
cocktail_core_html_ValueModeValue.FILENAME.toString = $estr;
cocktail_core_html_ValueModeValue.FILENAME.__enum__ = cocktail_core_html_ValueModeValue;
var cocktail_core_html_HTMLDocument = function() {
	cocktail_core_dom_Document.call(this);
	this.init();
};
$hxClasses["cocktail.core.html.HTMLDocument"] = cocktail_core_html_HTMLDocument;
cocktail_core_html_HTMLDocument.__name__ = true;
cocktail_core_html_HTMLDocument.__super__ = cocktail_core_dom_Document;
cocktail_core_html_HTMLDocument.prototype = $extend(cocktail_core_dom_Document.prototype,{
	dispose: function() {
		this.timer.dispose();
		this.timer = null;
		this.fontManager.dispose();
		this.fontManager = null;
		this.resourceManager.dispose();
		this.resourceManager = null;
		this.transitionManager.dispose();
		this.transitionManager = null;
		this.invalidationManager.dispose();
		this.invalidationManager = null;
		this.cascadeManager.dispose();
		this.cascadeManager = null;
		this._matchedPseudoClasses = null;
		this._focusManager.dispose();
		this._focusManager = null;
		this._hitTestManager.dispose();
		this._hitTestManager = null;
		this._multiTouchManager.dispose();
		this._multiTouchManager = null;
		this._lastTouchStartPosition = null;
		this.layoutManager.dispose();
		this.layoutManager = null;
		this.location.dispose();
		this.location = null;
		if(this.documentElement != null) {
			this.documentElement.dispose();
			this.documentElement = null;
			this.body = null;
		}
	}
	,init: function() {
		this.timer = new cocktail_core_timer_Timer();
		this.fontManager = new cocktail_core_font_FontManager();
		this.resourceManager = new cocktail_core_resource_ResourceManager(this);
		this.transitionManager = new cocktail_core_transition_TransitionManager(this);
		this.location = new cocktail_core_location_Location(this);
		this.location.onLocationChanged = $bind(this,this.onLocationChanged);
		this.initStyleManager();
		this.invalidationManager = new cocktail_core_invalidation_InvalidationManager(this);
		this.cascadeManager = new cocktail_core_css_CascadeManager();
		this._matchedPseudoClasses = new cocktail_core_css_MatchedPseudoClassesVO(false,false,false,false,false,false,false,false,false,false,null,null,null);
		this._focusManager = new cocktail_core_focus_FocusManager();
		this._hitTestManager = new cocktail_core_hittest_HitTestManager();
		this._multiTouchManager = new cocktail_core_multitouch_MultiTouchManager();
		this._shouldDispatchClickOnNextMouseUp = false;
		this._lastTouchStartPosition = new cocktail_core_geom_PointVO(0,0);
		this.layoutManager = new cocktail_core_layout_LayoutManager();
		this._delayLoadEventCounter = 0;
		this._documentLoaded = false;
		this._currentMouseCursor = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO);
	}
	,initBody: function(htmlBodyElement) {
		if(htmlBodyElement != null) {
			this.body = htmlBodyElement;
			this.documentElement.appendChild(this.body);
			this.set_activeElement(this.body);
		}
	}
	,initDocumentElement: function(documentElement) {
		this.documentElement = documentElement;
		this.appendChild(documentElement);
		documentElement.appended();
	}
	,initStyleManager: function() {
		this._selectorManager = new cocktail_core_css_SelectorManager();
		this._styleManager = new cocktail_core_css_StyleManager(this._selectorManager);
		this._styleManager.addStyleSheet(new cocktail_core_css_DefaultCSSStyleSheet());
	}
	,createElement: function(tagName) {
		var element;
		tagName = tagName.toUpperCase();
		switch(tagName) {
		case "IMG":
			element = new cocktail_core_html_HTMLImageElement();
			break;
		case "INPUT":
			element = new cocktail_core_html_HTMLInputElement();
			break;
		case "A":
			element = new cocktail_core_html_HTMLAnchorElement();
			break;
		case "HTML":
			element = new cocktail_core_html_HTMLHtmlElement();
			break;
		case "BODY":
			element = new cocktail_core_html_HTMLBodyElement();
			break;
		case "VIDEO":
			element = new cocktail_core_html_HTMLVideoElement();
			break;
		case "AUDIO":
			element = new cocktail_core_html_HTMLAudioElement();
			break;
		case "SOURCE":
			element = new cocktail_core_html_HTMLSourceElement();
			break;
		case "OBJECT":
			element = new cocktail_core_html_HTMLObjectElement();
			break;
		case "PARAM":
			element = new cocktail_core_html_HTMLParamElement();
			break;
		case "LINK":
			element = new cocktail_core_html_HTMLLinkElement();
			break;
		case "STYLE":
			element = new cocktail_core_html_HTMLStyleElement();
			break;
		case "BR":
			element = new cocktail_core_html_HTMLBRElement();
			break;
		case "META":
			element = new cocktail_core_html_HTMLMetaElement();
			break;
		case "FORM":
			element = new cocktail_core_html_HTMLFormElement();
			break;
		case "TEXTAREA":
			element = new cocktail_core_html_HTMLTextAreaElement();
			break;
		case "TITLE":
			element = new cocktail_core_html_HTMLTitleElement();
			break;
		default:
			element = new cocktail_core_html_HTMLElement(tagName);
		}
		element.set_ownerDocument(this);
		return element;
	}
	,delayLoadEvent: function() {
		this._delayLoadEventCounter++;
	}
	,undelayLoadEvent: function() {
		this._delayLoadEventCounter--;
		this.checkifDocumentLoaded();
	}
	,onDocumentLoaded: function() {
		this._documentLoaded = true;
		var event = new cocktail_core_event_UIEvent();
		event.initUIEvent("load",false,false,null,0);
		this.dispatchEvent(event);
	}
	,checkifDocumentLoaded: function() {
		if(this._delayLoadEventCounter == 0 && this._documentLoaded == false) this.onDocumentLoaded();
	}
	,onUpdated: function() {
		if(this.onDocumentUpdated != null) this.onDocumentUpdated();
	}
	,update: function() {
		this.invalidationManager.update();
	}
	,focusNextElement: function() {
		this.set_activeElement(this._focusManager.getNextFocusedElement(false,this.body,this.get_activeElement()));
	}
	,focusPreviousElement: function() {
		this.set_activeElement(this._focusManager.getNextFocusedElement(true,this.body,this.get_activeElement()));
	}
	,addStyleSheet: function(stylesheet) {
		this._styleManager.addStyleSheet(stylesheet);
		if(this.documentElement != null) {
			this.documentElement.invalidateStyleDeclaration(true);
			this.documentElement.cascade(this.cascadeManager,false);
		}
	}
	,removeStyleSheet: function(stylesheet) {
		this._styleManager.removeStyleSheet(stylesheet);
		this.documentElement.invalidateStyleDeclaration(true);
		this.documentElement.cascade(this.cascadeManager,false);
	}
	,getStyleDeclaration: function(node) {
		return this._styleManager.getStyleDeclaration(node,this.getMatchedPseudoClassesVO(node));
	}
	,getMatchedPseudoClassesVO: function(node) {
		var hover = false;
		var focus = false;
		var active = false;
		var link = false;
		var enabled = false;
		var disabled = false;
		var checked = false;
		var fullscreen = false;
		if(this._hoveredElementRenderer != null) hover = this._hoveredElementRenderer.domNode == node;
		if(this.get_activeElement() != null) focus = this.get_activeElement() == node;
		if(this._mousedDownedElementRenderer != null) active = this._mousedDownedElementRenderer.domNode == node;
		if(node.tagName == "A" && node.getAttribute("href") != null) link = true;
		if(node.tagName == "INPUT") {
			var inputNode = node;
			if(inputNode.get_disabled() == false) {
				enabled = true;
				disabled = false;
			} else {
				disabled = true;
				enabled = false;
			}
			if(inputNode.get_type() == "checkbox" || inputNode.get_type() == "radio") {
				if(inputNode.get_checked() == true) checked = true;
			}
		}
		if(this.fullscreenElement != null) fullscreen = true;
		this._matchedPseudoClasses.hasClasses = node.get_className() != "";
		if(this._matchedPseudoClasses.hasClasses == true) this._matchedPseudoClasses.nodeClassList = node.classList;
		this._matchedPseudoClasses.hasId = node.get_id() != "";
		if(this._matchedPseudoClasses.hasId == true) this._matchedPseudoClasses.nodeId = node.get_id();
		this._matchedPseudoClasses.nodeType = node.tagName;
		this._matchedPseudoClasses.hover = hover;
		this._matchedPseudoClasses.focus = focus;
		this._matchedPseudoClasses.active = active;
		this._matchedPseudoClasses.link = link;
		this._matchedPseudoClasses.enabled = enabled;
		this._matchedPseudoClasses.disabled = disabled;
		this._matchedPseudoClasses.checked = checked;
		this._matchedPseudoClasses.fullscreen = fullscreen;
		return this._matchedPseudoClasses;
	}
	,set_innerHTML: function(value) {
		var node = cocktail_core_parser_DOMParser.parse(value,this);
		this.initDocumentElement(node);
		this.initBody(node.getElementsByTagName("BODY")[0]);
		this.checkifDocumentLoaded();
		return value;
	}
	,onPlatformMouseEvent: function(mouseEvent) {
		var eventType = mouseEvent.type;
		var elementRendererAtPoint = this.getFirstElementRendererWhichCanDispatchMouseEvent(mouseEvent.screenX,mouseEvent.screenY);
		this.refreshHoveredElement(elementRendererAtPoint,mouseEvent);
		if(elementRendererAtPoint == null) return;
		elementRendererAtPoint.domNode.dispatchEvent(mouseEvent);
		switch(eventType) {
		case "mousedown":
			this._shouldDispatchClickOnNextMouseUp = true;
			this._mousedDownedElementRenderer = elementRendererAtPoint;
			var htmlElement = elementRendererAtPoint.domNode;
			htmlElement.invalidateStyleDeclaration(false);
			break;
		case "mouseup":
			if(this._shouldDispatchClickOnNextMouseUp == true) this.dispatchClickEvent(mouseEvent);
			if(this._mousedDownedElementRenderer != null) {
				var htmlElement1 = this._mousedDownedElementRenderer.domNode;
				htmlElement1.invalidateStyleDeclaration(false);
				this._mousedDownedElementRenderer = null;
			}
			break;
		}
	}
	,onPlatformMouseLeaveEvent: function(event) {
		if(this._hoveredElementRenderer != null) {
			var oldHoveredElementRenderer = this._hoveredElementRenderer;
			var mouseOutEvent = new cocktail_core_event_MouseEvent();
			mouseOutEvent.initMouseEvent("mouseout",true,true,null,0,0,0,0,0,false,false,false,false,0,null);
			this._hoveredElementRenderer.domNode.dispatchEvent(mouseOutEvent);
			var htmlElement = oldHoveredElementRenderer.domNode;
			htmlElement.invalidateStyleDeclaration(false);
			this._hoveredElementRenderer = null;
			this.setMouseCursor(cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
		}
	}
	,onPlatformMouseWheelEvent: function(wheelEvent) {
		var elementRendererAtPoint = this.getFirstElementRendererWhichCanDispatchMouseEvent(wheelEvent.screenX,wheelEvent.screenY);
		elementRendererAtPoint.domNode.dispatchEvent(wheelEvent);
	}
	,onPlatformMouseMoveEvent: function(mouseEvent) {
		if(this.documentElement.elementRenderer == null) return;
		var elementRendererAtPoint = this.getFirstElementRendererWhichCanDispatchMouseEvent(mouseEvent.screenX,mouseEvent.screenY);
		this.refreshHoveredElement(elementRendererAtPoint,mouseEvent);
		if(elementRendererAtPoint != null) elementRendererAtPoint.domNode.dispatchEvent(mouseEvent);
	}
	,onPlatformKeyDownEvent: function(keyboardEvent) {
		this.get_activeElement().dispatchEvent(keyboardEvent);
	}
	,onPlatformKeyUpEvent: function(keyboardEvent) {
		this.get_activeElement().dispatchEvent(keyboardEvent);
	}
	,onPlatformTouchEvent: function(touchEvent) {
		var touch = touchEvent.touches.item(0);
		var elementAtTouchPoint = this.getFirstElementRendererWhichCanDispatchMouseEvent(touch.screenX,touch.screenY);
		this._multiTouchManager.setUpTouchEvent(touchEvent,elementAtTouchPoint.domNode);
		elementAtTouchPoint.domNode.dispatchEvent(touchEvent);
		if(this._shouldDispatchClickOnNextMouseUp == true) {
			var _g = touchEvent.type;
			switch(_g) {
			case "touchstart":
				if(touchEvent.defaultPrevented == true) this._shouldDispatchClickOnNextMouseUp = false; else if(touchEvent.touches.get_length() > 1) {
				} else {
					this._lastTouchStartPosition.x = touchEvent.touches.item(0).screenX;
					this._lastTouchStartPosition.y = touchEvent.touches.item(0).screenY;
				}
				break;
			case "touchmove":
				if(touchEvent.defaultPrevented == true) this._shouldDispatchClickOnNextMouseUp = false; else {
					var yOffset = touchEvent.touches.item(0).screenY - this._lastTouchStartPosition.y;
					if(Math.abs(yOffset) > cocktail_core_config_Config.getInstance().touchMovePreventClickDistance) this._shouldDispatchClickOnNextMouseUp = false; else {
						var xOffset = touchEvent.touches.item(0).screenX - this._lastTouchStartPosition.x;
						if(Math.abs(xOffset) > cocktail_core_config_Config.getInstance().touchMovePreventClickDistance) this._shouldDispatchClickOnNextMouseUp = false;
					}
				}
				break;
			}
		}
	}
	,onPlatformResizeEvent: function(e) {
		this.invalidationManager.invalidateViewportSize();
	}
	,onPlatformOrientationChangeEvent: function(e) {
		this.invalidationManager.invalidateViewportSize();
	}
	,dispatchClickEvent: function(mouseEvent) {
		var elementRendererAtPoint = this.getFirstElementRendererWhichCanDispatchMouseEvent(mouseEvent.screenX,mouseEvent.screenY);
		var htmlElement = elementRendererAtPoint.domNode;
		var clickEvent = new cocktail_core_event_MouseEvent();
		clickEvent.initMouseEvent("click",true,true,null,0.0,mouseEvent.screenX,mouseEvent.screenY,mouseEvent.clientX,mouseEvent.clientY,mouseEvent.ctrlKey,mouseEvent.altKey,mouseEvent.shiftKey,mouseEvent.metaKey,mouseEvent.button,null);
		htmlElement.triggerActivationBehaviour(clickEvent);
	}
	,setMouseCursor: function(cursor) {
		if(cursor != this._currentMouseCursor) {
			this._currentMouseCursor = cursor;
			if(this.onSetMouseCursor != null) this.onSetMouseCursor(cursor);
		}
	}
	,refreshHoveredElement: function(elementRendererAtPoint,mouseEvent) {
		if(elementRendererAtPoint == null) return;
		if(this._hoveredElementRenderer != elementRendererAtPoint) {
			var oldHoveredElementRenderer = this._hoveredElementRenderer;
			if(this._hoveredElementRenderer != null) {
				var mouseOutEvent = new cocktail_core_event_MouseEvent();
				mouseOutEvent.initMouseEvent("mouseout",true,true,null,0.0,mouseEvent.screenX,mouseEvent.screenY,mouseEvent.clientX,mouseEvent.clientY,mouseEvent.ctrlKey,mouseEvent.altKey,mouseEvent.shiftKey,mouseEvent.metaKey,mouseEvent.button,elementRendererAtPoint.domNode);
				this._hoveredElementRenderer.domNode.dispatchEvent(mouseOutEvent);
				var htmlElement1 = oldHoveredElementRenderer.domNode;
				htmlElement1.invalidateStyleDeclaration(false);
			}
			this._hoveredElementRenderer = elementRendererAtPoint;
			var relatedTarget = null;
			if(this._hoveredElementRenderer != null) relatedTarget = this._hoveredElementRenderer.domNode;
			var mouseOverEvent = new cocktail_core_event_MouseEvent();
			mouseOverEvent.initMouseEvent("mouseover",true,true,null,0.0,mouseEvent.screenX,mouseEvent.screenY,mouseEvent.clientX,mouseEvent.clientY,mouseEvent.ctrlKey,mouseEvent.shiftKey,mouseEvent.altKey,mouseEvent.metaKey,mouseEvent.button,relatedTarget);
			elementRendererAtPoint.domNode.dispatchEvent(mouseOverEvent);
			var htmlElement = elementRendererAtPoint.domNode;
			htmlElement.invalidateStyleDeclaration(false);
			this._shouldDispatchClickOnNextMouseUp = false;
			this.setMouseCursor(htmlElement.coreStyle.getComputedOrInitialProperty(54));
		}
	}
	,navigateToURL: function(url,name) {
		if(name == null) name = "_blank";
		if(this.onNavigateToURL != null) this.onNavigateToURL(url,name);
	}
	,onLocationChanged: function() {
	}
	,getAbsoluteURL: function(url) {
		if(this.location.href == null) return url;
		var typedURL = cocktail_core_url_URL.fromString(url);
		if(cocktail_core_url_URL.isRelative(typedURL) == false) return url;
		var documentURL = cocktail_core_url_URL.fromString(this.location.href);
		var retURL = cocktail_core_url_URL.appendURL(documentURL,typedURL);
		return cocktail_core_url_URL.toString(retURL);
	}
	,onPlatformFullScreenChange: function(event) {
		if(this.isFullscreen != null) {
			if(this.isFullscreen() == false) this.exitFullscreen();
		}
	}
	,exitFullscreen: function() {
		if(this.fullscreenElement == null) return;
		this.set_fullscreenElement(null);
		if(this.onExitFullscreen != null) this.onExitFullscreen();
		var fullscreenEvent = new cocktail_core_event_Event();
		fullscreenEvent.initEvent("fullscreenchange",true,false);
		this.dispatchEvent(fullscreenEvent);
		this.cascadeDocument();
	}
	,set_fullscreenElement: function(value) {
		if(value == null) {
			this.fullscreenElement = null;
			return value;
		}
		if(this.fullscreenElement != null) return this.fullscreenElement;
		this.fullscreenElement = value;
		if(this.onEnterFullscreen != null) this.onEnterFullscreen();
		var fullscreenEvent = new cocktail_core_event_Event();
		fullscreenEvent.initEvent("fullscreenchange",true,false);
		this.dispatchEvent(fullscreenEvent);
		this.cascadeDocument();
		return value;
	}
	,cascadeDocument: function() {
		if(this.documentElement != null) {
			this.documentElement.invalidateStyleDeclaration(true);
			this.documentElement.cascade(this.cascadeManager,false);
		}
	}
	,getFirstElementRendererWhichCanDispatchMouseEvent: function(x,y) {
		var layerRendererTmp = this.documentElement.elementRenderer.layerRenderer;
		if(layerRendererTmp.stackingContext == null) layerRendererTmp.updateStackingContext();
		var elementRendererAtPoint = this._hitTestManager.getTopMostElementRendererAtPoint(layerRendererTmp.stackingContext,x,y);
		if(elementRendererAtPoint == null) return null;
		while(elementRendererAtPoint.domNode.get_nodeType() != 1 || elementRendererAtPoint.isAnonymousBlockBox() == true) {
			elementRendererAtPoint = elementRendererAtPoint.parentNode;
			if(elementRendererAtPoint == null) return null;
		}
		return elementRendererAtPoint;
	}
	,set_activeElement: function(newActiveElement) {
		this._focusManager.setActiveElement(newActiveElement,this.body);
		return this.get_activeElement();
	}
	,get_activeElement: function() {
		return this._focusManager.activeElement;
	}
	,__class__: cocktail_core_html_HTMLDocument
	,__properties__: $extend(cocktail_core_dom_Document.prototype.__properties__,{set_innerHTML:"set_innerHTML",set_fullscreenElement:"set_fullscreenElement",set_activeElement:"set_activeElement",get_activeElement:"get_activeElement"})
});
var cocktail_core_html_HTMLFormElement = function() {
	cocktail_core_html_HTMLElement.call(this,"FORM");
	this.elements = [];
	this._submittedFromSubmitMethod = false;
};
$hxClasses["cocktail.core.html.HTMLFormElement"] = cocktail_core_html_HTMLFormElement;
cocktail_core_html_HTMLFormElement.__name__ = true;
cocktail_core_html_HTMLFormElement.__super__ = cocktail_core_html_HTMLElement;
cocktail_core_html_HTMLFormElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype,{
	submitFrom: function(submitter) {
		this._submittedFromSubmitMethod = false;
		this.doSubmit(submitter);
	}
	,reset: function() {
		var defaultPrevented = this.fireEvent("reset",false,true);
		if(defaultPrevented == true) return;
		var _g1 = 0;
		var _g = this.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			this.elements[i].reset();
		}
	}
	,doSubmit: function(submitter) {
		if(this._submittedFromSubmitMethod == false) {
			var defaultPrevented = this.fireEvent("submit",false,true);
			if(defaultPrevented == true) return;
		}
		var formDataSet = this.constructFormDataSet(submitter);
		var action = this.getSubmitAction(submitter);
		var scheme = cocktail_core_url_URL.fromString(action).scheme;
		var enctype = this.getSubmitEnctype(submitter);
		var method = this.getSubmitMethod(submitter);
		var target = this.getSubmitTarget(submitter);
		if(action != "") switch(scheme) {
		case "http":
			if(method.toUpperCase() == "GET") this.mutateActionUrl(formDataSet,action); else if(method.toUpperCase() == "POST") this.submitAsEntityBody(formDataSet,action,enctype);
			break;
		} else this.mutateActionUrl(formDataSet,action);
	}
	,mutateActionUrl: function(formDataSet,action) {
		var query = this.encodeAsURLQuery(formDataSet);
		var actionURL = cocktail_core_url_URL.fromString(action);
		actionURL.query = query;
		var destination = cocktail_core_url_URL.toString(actionURL);
		this._ownerHTMLDocument.navigateToURL(destination);
	}
	,submitAsEntityBody: function(formDataSet,action,enctype) {
	}
	,encodeAsURLQuery: function(formDataSet) {
		var result = "";
		var length = formDataSet.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			if(result != "") result += "&";
			var formData = formDataSet[i];
			result += encodeURIComponent(formData.name) + "=" + encodeURIComponent(formData.value);
		}
		return result;
	}
	,getSubmitAction: function(submitter) {
		return this.get_action();
	}
	,getSubmitEnctype: function(submitter) {
		return this.get_enctype();
	}
	,getSubmitMethod: function(submitter) {
		var formMethod = this.get_method();
		if(formMethod == "") formMethod = "GET";
		return formMethod;
	}
	,getSubmitTarget: function(submitter) {
		return this.getAttributeAsDOMString("target");
	}
	,constructFormDataSet: function(submitter) {
		var submittableElements = this.getSubmittablesElements(this,[]);
		var formDataSet = [];
		var length = submittableElements.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var submittableElement = submittableElements[i];
			if(this.canBeSubmitted(submittableElement,submitter) == true) {
				var type = this.getElementType(submittableElement);
				var name = submittableElement.getAttribute("name");
				if(submittableElement.tagName == "SELECT") {
				} else if(submittableElement.tagName == "INPUT" && (type == "checkbox" || type == "radio")) {
					var inputElement = submittableElement;
					var value = inputElement.get_value();
					if(value == "") value = "on";
					formDataSet.push({ name : name, type : type, value : value});
				} else if(submittableElement.tagName == "INPUT" && type == "file") {
				} else if(submittableElement.tagName == "OBJECT") {
				} else {
					var value1 = this.getElementValue(submittableElement);
					formDataSet.push({ name : name, value : value1, type : type});
				}
			}
		}
		return formDataSet;
	}
	,getSubmittablesElements: function(rootElement,submittableElements) {
		var child = rootElement.get_firstChild();
		while(child != null) {
			var _g = child.tagName;
			switch(_g) {
			case "INPUT":case "OBJECT":case "TEXTAREA":
				submittableElements.push(child);
				break;
			}
			this.getSubmittablesElements(child,submittableElements);
			child = child.get_nextSibling();
		}
		return submittableElements;
	}
	,canBeSubmitted: function(element,submitter) {
		if(element.getAttribute("disabled") != null) return false;
		if(this.isButton(element) == true) {
			if(element != submitter) return false;
		}
		if(this.isUncheckedRadioOrCheckBox(element) == true) return false;
		if(this.getElementType(element) != "image") {
			if(element.getAttribute("name") == null || element.getAttribute("name") == "") return false;
		}
		if(element.tagName == "OBJECT") {
			var objectElement = element;
			if(objectElement.plugin == null) return false;
		}
		if(element.tagName == "TEXTAREA") {
			if(element.getAttribute("name") == null || element.getAttribute("name") == "") return false;
		}
		return true;
	}
	,isButton: function(element) {
		if(element.tagName == "BUTTON") return true; else if(element.tagName == "INPUT") {
			var inputElement = element;
			var _g = inputElement.get_type();
			switch(_g) {
			case "reset":case "button":case "submit":
				return true;
			}
		}
		return false;
	}
	,isUncheckedRadioOrCheckBox: function(element) {
		if(element.tagName == "INPUT") {
			var inputElement = element;
			var _g = inputElement.get_type();
			switch(_g) {
			case "radio":case "checkbox":
				return inputElement.get_checked() == false;
			}
		}
		return false;
	}
	,getElementType: function(element) {
		var _g = element.tagName;
		switch(_g) {
		case "INPUT":
			var inputElement = element;
			return inputElement.get_type();
		default:
			return "";
		}
	}
	,getElementValue: function(element) {
		var _g = element.tagName;
		switch(_g) {
		case "INPUT":
			var inputElement = element;
			return inputElement.get_value();
		case "TEXTAREA":
			var textAreaElement = element;
			return textAreaElement.get_value();
		default:
			return "";
		}
	}
	,get_length: function() {
		return this.elements.length;
	}
	,get_method: function() {
		return this.getEnumeratedAttributeAsDOMString("method",["GET","POST"],null,"GET");
	}
	,get_enctype: function() {
		return this.getEnumeratedAttributeAsDOMString("enctype",["application/x-www-form-urlencoded","multipart/form-data","text/plain"],null,"application/x-www-form-urlencoded");
	}
	,get_action: function() {
		return this.getAttributeAsDOMString("action");
	}
	,__class__: cocktail_core_html_HTMLFormElement
	,__properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__,{get_length:"get_length",get_action:"get_action",get_enctype:"get_enctype",get_method:"get_method"})
});
var cocktail_core_html_HTMLHtmlElement = function() {
	cocktail_core_html_HTMLElement.call(this,"HTML");
};
$hxClasses["cocktail.core.html.HTMLHtmlElement"] = cocktail_core_html_HTMLHtmlElement;
cocktail_core_html_HTMLHtmlElement.__name__ = true;
cocktail_core_html_HTMLHtmlElement.__super__ = cocktail_core_html_HTMLElement;
cocktail_core_html_HTMLHtmlElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype,{
	set_innerHTML: function(value) {
		cocktail_core_html_HTMLElement.prototype.set_innerHTML.call(this,value);
		var htmlDocument = this.ownerDocument;
		htmlDocument.initBody(this.getElementsByTagName("BODY")[0]);
		return value;
	}
	,isParentRendered: function() {
		return true;
	}
	,createElementRenderer: function() {
		this.elementRenderer = new cocktail_core_renderer_InitialBlockRenderer(this,this.coreStyle);
	}
	,attachToParentElementRenderer: function() {
	}
	,detachFromParentElementRenderer: function() {
		this.elementRenderer.removedFromRenderingTree();
	}
	,cascadeSelf: function(cascadeManager,programmaticChange) {
		if(this._needsStyleDeclarationUpdate == true || this.styleManagerCSSDeclaration == null) {
			this.getStyleDeclaration();
			this._needsStyleDeclarationUpdate = false;
		}
		if(this._shouldCascadeAllProperties == true) cascadeManager.shouldCascadeAll(); else {
			var length = this._pendingChangedProperties.length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				cascadeManager.addPropertyToCascade(this._pendingChangedProperties[i]);
			}
		}
		cascadeManager.parentRelativeLengthReference.em = 12.0;
		cascadeManager.parentRelativeLengthReference.ch = 12.0;
		cascadeManager.parentRelativeLengthReference.ex = 12.0;
		cascadeManager.parentRelativeLengthReference.rem = 12.0;
		this.coreStyle.cascade(cascadeManager,this._initialStyleDeclaration,this.styleManagerCSSDeclaration,this.style,this._initialStyleDeclaration,programmaticChange);
		cascadeManager.parentRelativeLengthReference.rem = this.coreStyle.fontMetrics.fontSize;
		cascadeManager.relativeLengthReference.rem = this.coreStyle.fontMetrics.fontSize;
		this._shouldCascadeAllProperties = false;
		this._pendingChangedProperties = [];
	}
	,__class__: cocktail_core_html_HTMLHtmlElement
});
var cocktail_core_html_HTMLImageElement = function() {
	cocktail_core_html_EmbeddedElement.call(this,"IMG");
};
$hxClasses["cocktail.core.html.HTMLImageElement"] = cocktail_core_html_HTMLImageElement;
cocktail_core_html_HTMLImageElement.__name__ = true;
cocktail_core_html_HTMLImageElement.__super__ = cocktail_core_html_EmbeddedElement;
cocktail_core_html_HTMLImageElement.prototype = $extend(cocktail_core_html_EmbeddedElement.prototype,{
	setAttribute: function(name,value) {
		if(name == "src") this.set_src(value); else cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this,name,value);
	}
	,createElementRenderer: function() {
		this.elementRenderer = new cocktail_core_renderer_ImageRenderer(this,this.coreStyle);
	}
	,set_src: function(value) {
		value = this._ownerHTMLDocument.getAbsoluteURL(value);
		cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this,"src",value);
		this._ownerHTMLDocument.getAbsoluteURL(value);
		var resource = this._ownerHTMLDocument.resourceManager.getImageResource(value);
		this._ownerHTMLDocument.delayLoadEvent();
		if(resource.loaded == false) {
			this._resourceLoadedCallback = $bind(this,this.onResourceLoaded);
			this._resourceLoadError = $bind(this,this.onResourceLoadError);
			resource.addEventListener("load",this._resourceLoadedCallback);
			resource.addEventListener("error",this._resourceLoadError);
		} else if(resource.loadedWithError == true) this.onLoadError(); else this.onLoadComplete(resource);
		return value;
	}
	,onResourceLoaded: function(e) {
		this.removeListeners(e.target);
		this.onLoadComplete(e.target);
	}
	,onResourceLoadError: function(e) {
		this.removeListeners(e.target);
		this.onLoadError();
	}
	,removeListeners: function(resource) {
		resource.removeEventListener("load",this._resourceLoadedCallback);
		resource.removeEventListener("error",this._resourceLoadError);
	}
	,onLoadComplete: function(resource) {
		this.intrinsicHeight = resource.intrinsicHeight;
		this.intrinsicWidth = resource.intrinsicWidth;
		this.intrinsicRatio = this.get_intrinsicHeight() / this.get_intrinsicWidth();
		if(this.getAttributeNode("height") != null && this.getAttributeNode("width") != null) this.invalidateRendering(); else this.invalidate();
		var loadEvent = new cocktail_core_event_UIEvent();
		loadEvent.initUIEvent("load",false,false,null,0.0);
		this.dispatchEvent(loadEvent);
		this._ownerHTMLDocument.undelayLoadEvent();
	}
	,onLoadError: function() {
		var errorEvent = new cocktail_core_event_UIEvent();
		errorEvent.initUIEvent("error",false,false,null,0.0);
		this.dispatchEvent(errorEvent);
		this._ownerHTMLDocument.undelayLoadEvent();
	}
	,__class__: cocktail_core_html_HTMLImageElement
	,__properties__: $extend(cocktail_core_html_EmbeddedElement.prototype.__properties__,{set_src:"set_src"})
});
var cocktail_core_html_HTMLInputElement = function() {
	cocktail_core_html_FormAssociatedElement.call(this,"INPUT");
	this._valueIsDirty = false;
	this._checkednessIsDirty = false;
	this._valueMode = cocktail_core_html_ValueModeValue.VALUE;
	this._value = "";
	this._checkedness = false;
};
$hxClasses["cocktail.core.html.HTMLInputElement"] = cocktail_core_html_HTMLInputElement;
cocktail_core_html_HTMLInputElement.__name__ = true;
cocktail_core_html_HTMLInputElement.__super__ = cocktail_core_html_FormAssociatedElement;
cocktail_core_html_HTMLInputElement.prototype = $extend(cocktail_core_html_FormAssociatedElement.prototype,{
	dispatchEvent: function(evt) {
		var defaultPrevented = cocktail_core_html_FormAssociatedElement.prototype.dispatchEvent.call(this,evt);
		if(this.elementRenderer != null) {
			if(evt.type == "focus") {
				var inputRenderer = this.elementRenderer;
				inputRenderer.focus();
			} else if(evt.type == "blur") {
				var inputRenderer1 = this.elementRenderer;
				inputRenderer1.blur();
			}
		}
		return defaultPrevented;
	}
	,setAttribute: function(name,value) {
		cocktail_core_html_FormAssociatedElement.prototype.setAttribute.call(this,name,value);
		if(name == "value") {
			if(this._valueIsDirty == false) this._value = value;
		} else if(name == "checked") {
			if(this._checkednessIsDirty == false) {
				if(value == "true") this.updateCheckedness(true); else this.updateCheckedness(false);
			}
		} else if(name == "name") {
			if(this._checkedness == true && this.get_type() == "radio") this.updateRadioButtonGroup();
		} else if(name == "disabled") this.updateInputRendererState();
	}
	,reset: function() {
		this._valueIsDirty = false;
		this._checkednessIsDirty = false;
		this._value = this.getAttributeAsDOMString("value");
		this.updateCheckedness(this.getAttributeAsBool("checked"));
		this.applyValueSanitization(this.get_value(),this.get_type());
		this.updateInputRendererState();
	}
	,createElementRenderer: function() {
		var _g = this.get_type();
		switch(_g) {
		case "text":
			this.elementRenderer = new cocktail_core_renderer_TextInputRenderer(this,this.coreStyle);
			break;
		case "password":
			this.elementRenderer = new cocktail_core_renderer_PasswordInputRenderer(this,this.coreStyle);
			break;
		case "checkbox":
			this.elementRenderer = new cocktail_core_renderer_CheckboxRenderer(this,this.coreStyle);
			break;
		case "radio":
			this.elementRenderer = new cocktail_core_renderer_RadioRenderer(this,this.coreStyle);
			break;
		case "button":case "reset":case "submit":
			this.elementRenderer = new cocktail_core_renderer_InputButtonRenderer(this,this.coreStyle);
			break;
		default:
		}
		if(this.elementRenderer != null) {
			var inputRenderer = this.elementRenderer;
			inputRenderer.onActivate = $bind(this,this.onUserActivation);
			inputRenderer.onInput = $bind(this,this.onUserInput);
			this.updateInputRendererState();
		}
	}
	,isDefaultFocusable: function() {
		if(this.get_disabled() == true) return false;
		if(this.isFocusableType() == false) return false;
		return true;
	}
	,associateFormElement: function(form) {
		cocktail_core_html_FormAssociatedElement.prototype.associateFormElement.call(this,form);
		if(this._checkedness == true && this.get_type() == "radio") this.updateRadioButtonGroup();
	}
	,hasActivationBehaviour: function() {
		var _g = this.get_type();
		switch(_g) {
		case "button":case "checkbox":case "radio":case "reset":case "submit":
			return true;
		default:
			return false;
		}
	}
	,runPreClickActivation: function() {
		if(this.isMutable() == false) return;
		var _g = this.get_type();
		switch(_g) {
		case "checkbox":
			this.updateCheckedness(!this._checkedness);
			break;
		case "radio":
			this.updateCheckedness(true);
			break;
		case "reset":
			if(this.form != null) this.form.reset();
			break;
		case "submit":
			if(this.form != null) this.form.submitFrom(this);
			break;
		}
	}
	,runPostClickActivationStep: function(event) {
		if(this.isMutable() == false) return;
		var _g = this.get_type();
		switch(_g) {
		case "checkbox":case "radio":
			this.fireEvent("change",false,false);
			break;
		}
	}
	,updateInputRendererState: function() {
		if(this.elementRenderer != null) {
			var inputRenderer = this.elementRenderer;
			inputRenderer.set_readonly(this.get_readOnly());
			inputRenderer.set_disabled(this.get_disabled());
			inputRenderer.set_maxLength(this.get_maxLength());
			inputRenderer.set_value(this.getElementRendererValue());
			inputRenderer.set_checked(this._checkedness);
		}
	}
	,applyValueSanitization: function(value,type) {
		switch(type) {
		case "text":case "password":
			return StringTools.replace(value,"\n","");
		}
		return value;
	}
	,isMutable: function() {
		if(this.get_disabled() == true) return false; else if(this.readonlyApplies() == true) return this.get_readOnly() == false;
		return true;
	}
	,readonlyApplies: function() {
		var _g = this.get_type();
		switch(_g) {
		case "text":case "password":
			return true;
		default:
			return false;
		}
	}
	,isFocusableType: function() {
		var _g = this.get_type();
		switch(_g) {
		case "hidden":
			return false;
		default:
			return true;
		}
	}
	,updateCheckedness: function(value) {
		this._checkedness = value;
		this.invalidateStyleDeclaration(false);
		if(this._checkedness == true && this.get_type() == "radio") this.updateRadioButtonGroup();
	}
	,updateRadioButtonGroup: function() {
		if(this.get_name() == "") return;
		var inputElements = this._ownerHTMLDocument.getElementsByTagName("INPUT");
		var inputLength = inputElements.length;
		var _g = 0;
		while(_g < inputLength) {
			var i = _g++;
			var input = inputElements[i];
			if(input.get_type() == "radio" && input != this) {
				if(input.form == this.form) {
					if(input.get_name() == this.get_name()) input.set_checked(false);
				}
			}
		}
	}
	,getElementRendererValue: function() {
		var _g = this.get_type();
		switch(_g) {
		case "reset":case "submit":
			var valueAttribute = this.getAttribute("value");
			if(valueAttribute == null) {
				if(this.get_type() == "reset") return "Reset"; else return "Submit";
			}
			break;
		}
		return this.get_value();
	}
	,onUserActivation: function() {
		this.triggerActivationBehaviour();
	}
	,onUserInput: function() {
		this._valueIsDirty = true;
		var inputRenderer = this.elementRenderer;
		this._value = inputRenderer.get_value();
		this.fireEvent("input",true,false);
	}
	,get_intrinsicWidth: function() {
		if(this.elementRenderer != null) {
			var inputRenderer = this.elementRenderer;
			return inputRenderer.get_intrinsicWidth();
		}
		return 0;
	}
	,get_intrinsicHeight: function() {
		if(this.elementRenderer != null) {
			var inputRenderer = this.elementRenderer;
			return inputRenderer.get_intrinsicHeight();
		}
		return 0;
	}
	,get_value: function() {
		var _g = this._valueMode;
		switch(_g[1]) {
		case 0:
			return this._value;
		case 1:
			return this.getAttributeAsDOMString("value");
		case 2:
			var value = this.getAttributeAsDOMString("value");
			if(value == "") return "on"; else return value;
			break;
		case 3:
			return "";
		}
	}
	,get_maxLength: function() {
		return this.getAttributeAsPositiveSignedInteger("maxlength",null);
	}
	,get_checked: function() {
		return this._checkedness;
	}
	,set_checked: function(value) {
		this._checkednessIsDirty = true;
		this.updateCheckedness(value);
		return value;
	}
	,get_readOnly: function() {
		return this.getAttributeAsBool("readonly");
	}
	,get_disabled: function() {
		return this.getAttributeAsBool("disabled");
	}
	,get_type: function() {
		return this.getEnumeratedAttributeAsDOMString("type",["hidden","text","password","checkbox","radio","submit","reset","button","file","image"],"text",null);
	}
	,get_name: function() {
		return this.getAttributeAsDOMString("name");
	}
	,__class__: cocktail_core_html_HTMLInputElement
	,__properties__: $extend(cocktail_core_html_FormAssociatedElement.prototype.__properties__,{get_name:"get_name",get_type:"get_type",get_disabled:"get_disabled",get_readOnly:"get_readOnly",set_checked:"set_checked",get_checked:"get_checked",get_maxLength:"get_maxLength",get_value:"get_value"})
});
var cocktail_core_html_HTMLLinkElement = function() {
	cocktail_core_html_HTMLElement.call(this,"LINK");
	this._hasLoadedResource = false;
};
$hxClasses["cocktail.core.html.HTMLLinkElement"] = cocktail_core_html_HTMLLinkElement;
cocktail_core_html_HTMLLinkElement.__name__ = true;
cocktail_core_html_HTMLLinkElement.__super__ = cocktail_core_html_HTMLElement;
cocktail_core_html_HTMLLinkElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype,{
	addedToDOM: function() {
		if(this._hasLoadedResource == false) this.loadLinkedResource();
		cocktail_core_html_HTMLElement.prototype.addedToDOM.call(this);
	}
	,removedFromDOM: function() {
		cocktail_core_html_HTMLElement.prototype.removedFromDOM.call(this);
		if(this._hasLoadedResource == true) this.unloadLinkedResource();
	}
	,createElementRenderer: function() {
	}
	,loadLinkedResource: function() {
		if(this.get_href() != null && this.get_rel() == "stylesheet") {
			this._hasLoadedResource = true;
			this._ownerHTMLDocument.delayLoadEvent();
			var nativeHttp = new cocktail_port_platform_flash_$player_NativeHttp(this._ownerHTMLDocument.timer);
			nativeHttp.addEventListener("load",$bind(this,this.onCSSLoaded));
			nativeHttp.addEventListener("error",$bind(this,this.onCSSLoadError));
			var absoluteHref = this._ownerHTMLDocument.getAbsoluteURL(this.get_href());
			nativeHttp.load(absoluteHref,"GET",null,null,cocktail_core_http_DataFormatValue.TEXT);
		}
	}
	,unloadLinkedResource: function() {
		if(this.sheet != null) {
			var htmlDocument = this.ownerDocument;
			htmlDocument.removeStyleSheet(this.sheet);
			this.sheet = null;
			this._hasLoadedResource = false;
		}
	}
	,onCSSLoaded: function(event) {
		var nativeHttp = event.target;
		this.createStyleSheet(nativeHttp.response);
		var loadEvent = new cocktail_core_event_UIEvent();
		loadEvent.initUIEvent("load",false,false,null,0.0);
		this.dispatchEvent(loadEvent);
		this._ownerHTMLDocument.undelayLoadEvent();
	}
	,onCSSLoadError: function(event) {
		this.fireEvent("error",false,false);
		this._ownerHTMLDocument.undelayLoadEvent();
	}
	,createStyleSheet: function(css) {
		this.sheet = new cocktail_core_css_CSSStyleSheet(css,cocktail_core_css_PropertyOriginValue.AUTHOR,null,this.get_href());
		var htmlDocument = this.ownerDocument;
		htmlDocument.addStyleSheet(this.sheet);
	}
	,get_href: function() {
		return this.getAttributeAsDOMString("href");
	}
	,get_rel: function() {
		return this.getAttributeAsDOMString("rel");
	}
	,__class__: cocktail_core_html_HTMLLinkElement
	,__properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__,{get_rel:"get_rel",get_href:"get_href"})
});
var cocktail_core_html_HTMLMetaElement = function() {
	cocktail_core_html_HTMLElement.call(this,"META");
};
$hxClasses["cocktail.core.html.HTMLMetaElement"] = cocktail_core_html_HTMLMetaElement;
cocktail_core_html_HTMLMetaElement.__name__ = true;
cocktail_core_html_HTMLMetaElement.__super__ = cocktail_core_html_HTMLElement;
cocktail_core_html_HTMLMetaElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype,{
	addedToDOM: function() {
		cocktail_core_html_HTMLElement.prototype.addedToDOM.call(this);
		this.updateConfig();
	}
	,updateConfig: function() {
		if(this.isAttachedToDOM() == true && this.get_name() != null && this.get_content() != null) cocktail_core_config_Config.getInstance().updateConfig(this.get_name(),this.get_content());
	}
	,get_name: function() {
		return this.getAttributeAsDOMString("name");
	}
	,get_content: function() {
		return this.getAttributeAsDOMString("content");
	}
	,__class__: cocktail_core_html_HTMLMetaElement
	,__properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__,{get_content:"get_content",get_name:"get_name"})
});
var cocktail_core_html_HTMLObjectElement = function() {
	cocktail_core_html_EmbeddedElement.call(this,"OBJECT");
	this._pluginReady = false;
	this.intrinsicHeight = 150;
	this.intrinsicWidth = 300;
	this.intrinsicRatio = this.get_intrinsicWidth() / this.get_intrinsicHeight();
};
$hxClasses["cocktail.core.html.HTMLObjectElement"] = cocktail_core_html_HTMLObjectElement;
cocktail_core_html_HTMLObjectElement.__name__ = true;
cocktail_core_html_HTMLObjectElement.__super__ = cocktail_core_html_EmbeddedElement;
cocktail_core_html_HTMLObjectElement.prototype = $extend(cocktail_core_html_EmbeddedElement.prototype,{
	setAttribute: function(name,value) {
		if(name == "data") this.set_data(value); else if(name == "type") this.set_type(value); else cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this,name,value);
	}
	,attach: function(recursive) {
		cocktail_core_html_EmbeddedElement.prototype.attach.call(this,recursive);
		if(this.isRendered() == true) this.createPlugin();
	}
	,addedToDOM: function() {
		cocktail_core_html_EmbeddedElement.prototype.addedToDOM.call(this);
		if(this.get_data() != null) {
			if(this.get_data().indexOf(".swf") != -1) this._ownerHTMLDocument.resourceManager.getBinaryResource(this.get_data());
		}
	}
	,removedFromDOM: function() {
		cocktail_core_html_EmbeddedElement.prototype.removedFromDOM.call(this);
		this.deletePlugin();
	}
	,createPlugin: function() {
		if(this.plugin != null) return;
		if(this.attachedToDOM == false) return;
		if(this.get_data() != null) {
			if(this.get_data().indexOf(".swf") != -1 || this.getAttribute("type") == "application/x-shockwave-flash") {
				var resource = this._ownerHTMLDocument.resourceManager.getBinaryResource(this.get_data());
				if(resource.error == true) return;
				if(resource.complete == false) {
					resource.addEventListener("load",$bind(this,this.onPluginResourceLoaded));
					return;
				}
				var params = new haxe_ds_StringMap();
				var length = this.childNodes.length;
				var _g = 0;
				while(_g < length) {
					var i = _g++;
					var child = this.childNodes[i];
					if(child.tagName == "PARAM") {
						var name = child.getAttribute("name");
						var value = child.getAttribute("value");
						if(name != null && value != null) {
							if(__map_reserved[name] != null) params.setReserved(name,value); else params.h[name] = value;
						}
					}
				}
				var elementAttributes = new haxe_ds_StringMap();
				var _g1 = 0;
				var _g2 = this.attributes.get_length();
				while(_g1 < _g2) {
					var i1 = _g1++;
					var attr = this.attributes.item(i1);
					var value1 = attr.get_value();
					elementAttributes.set(attr.name,value1);
				}
				this.plugin = new cocktail_plugin_swf_SWFPlugin(this,elementAttributes,params,$bind(this,this.onLoadComplete),$bind(this,this.onLoadError));
			}
		}
	}
	,deletePlugin: function() {
		if(this.plugin != null) {
			this._pluginReady = false;
			this.plugin.dispose();
			this.plugin = null;
		}
	}
	,onPluginResourceLoaded: function(e) {
		e.target.removeEventListener("load",$bind(this,this.onPluginResourceLoaded));
		this.createPlugin();
	}
	,createElementRenderer: function() {
		if(this._pluginReady == true) this.elementRenderer = new cocktail_core_renderer_ObjectRenderer(this,this.coreStyle);
	}
	,onLoadComplete: function() {
		this._pluginReady = true;
		this.invalidateElementRenderer();
		var loadEvent = new cocktail_core_event_UIEvent();
		loadEvent.initUIEvent("load",false,false,null,0.0);
		this.dispatchEvent(loadEvent);
	}
	,onLoadError: function() {
		this._pluginReady = false;
		var errorEvent = new cocktail_core_event_UIEvent();
		errorEvent.initUIEvent("error",false,false,null,0.0);
		this.dispatchEvent(errorEvent);
	}
	,set_data: function(value) {
		cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this,"data",value);
		this.deletePlugin();
		this.createPlugin();
		return value;
	}
	,get_data: function() {
		return this.getAttributeAsDOMString("data");
	}
	,set_type: function(value) {
		cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this,"type",value);
		return value;
	}
	,__class__: cocktail_core_html_HTMLObjectElement
	,__properties__: $extend(cocktail_core_html_EmbeddedElement.prototype.__properties__,{set_type:"set_type",set_data:"set_data",get_data:"get_data"})
});
var cocktail_core_html_HTMLParamElement = function() {
	cocktail_core_html_HTMLElement.call(this,"PARAM");
};
$hxClasses["cocktail.core.html.HTMLParamElement"] = cocktail_core_html_HTMLParamElement;
cocktail_core_html_HTMLParamElement.__name__ = true;
cocktail_core_html_HTMLParamElement.__super__ = cocktail_core_html_HTMLElement;
cocktail_core_html_HTMLParamElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype,{
	createElementRenderer: function() {
	}
	,__class__: cocktail_core_html_HTMLParamElement
});
var cocktail_core_html_HTMLSourceElement = function() {
	cocktail_core_html_HTMLElement.call(this,"SOURCE");
};
$hxClasses["cocktail.core.html.HTMLSourceElement"] = cocktail_core_html_HTMLSourceElement;
cocktail_core_html_HTMLSourceElement.__name__ = true;
cocktail_core_html_HTMLSourceElement.__super__ = cocktail_core_html_HTMLElement;
cocktail_core_html_HTMLSourceElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype,{
	createElementRenderer: function() {
	}
	,get_src: function() {
		return this.getAttributeAsDOMString("src");
	}
	,get_type: function() {
		return this.getAttributeAsDOMString("type");
	}
	,__class__: cocktail_core_html_HTMLSourceElement
	,__properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__,{get_type:"get_type",get_src:"get_src"})
});
var cocktail_core_html_HTMLStyleElement = function() {
	cocktail_core_html_HTMLElement.call(this,"STYLE");
};
$hxClasses["cocktail.core.html.HTMLStyleElement"] = cocktail_core_html_HTMLStyleElement;
cocktail_core_html_HTMLStyleElement.__name__ = true;
cocktail_core_html_HTMLStyleElement.__super__ = cocktail_core_html_HTMLElement;
cocktail_core_html_HTMLStyleElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype,{
	appendChild: function(newChild) {
		cocktail_core_html_HTMLElement.prototype.appendChild.call(this,newChild);
		if(newChild.get_nodeType() == 3) this.updateStyleSheet();
		return newChild;
	}
	,removeChild: function(oldChild) {
		cocktail_core_html_HTMLElement.prototype.removeChild.call(this,oldChild);
		if(oldChild.get_nodeType() == 3) this.updateStyleSheet();
		return oldChild;
	}
	,addedToDOM: function() {
		cocktail_core_html_HTMLElement.prototype.addedToDOM.call(this);
		this.updateStyleSheet();
	}
	,removedFromDOM: function() {
		cocktail_core_html_HTMLElement.prototype.removedFromDOM.call(this);
		this.updateStyleSheet();
	}
	,updateStyleSheet: function() {
		if(this.sheet != null) this.removeStyleSheet();
		if(this.attachedToDOM == true) {
			var css = this.concatenateChildTextNode();
			if(css != "") {
				this.sheet = new cocktail_core_css_CSSStyleSheet(css,cocktail_core_css_PropertyOriginValue.AUTHOR,this);
				var htmlDocument = this.ownerDocument;
				htmlDocument.addStyleSheet(this.sheet);
			}
		}
	}
	,removeStyleSheet: function() {
		if(this.sheet != null) {
			var htmlDocument = this.ownerDocument;
			htmlDocument.removeStyleSheet(this.sheet);
			this.sheet = null;
		}
	}
	,concatenateChildTextNode: function() {
		var content = "";
		var length = this.childNodes.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			if(this.childNodes[i].get_nodeType() == 3) content += this.childNodes[i].get_nodeValue();
		}
		return content;
	}
	,createElementRenderer: function() {
	}
	,__class__: cocktail_core_html_HTMLStyleElement
});
var cocktail_core_html_HTMLTextAreaElement = function() {
	cocktail_core_html_FormAssociatedElement.call(this,"TEXTAREA");
	this._valueIsDirty = false;
	this._rawValue = "";
};
$hxClasses["cocktail.core.html.HTMLTextAreaElement"] = cocktail_core_html_HTMLTextAreaElement;
cocktail_core_html_HTMLTextAreaElement.__name__ = true;
cocktail_core_html_HTMLTextAreaElement.__super__ = cocktail_core_html_FormAssociatedElement;
cocktail_core_html_HTMLTextAreaElement.prototype = $extend(cocktail_core_html_FormAssociatedElement.prototype,{
	dispatchEvent: function(evt) {
		var defaultPrevented = cocktail_core_html_FormAssociatedElement.prototype.dispatchEvent.call(this,evt);
		if(this.elementRenderer != null) {
			if(evt.type == "focus") {
				var inputRenderer = this.elementRenderer;
				inputRenderer.focus();
			} else if(evt.type == "blur") {
				var inputRenderer1 = this.elementRenderer;
				inputRenderer1.blur();
			}
		}
		return defaultPrevented;
	}
	,createElementRenderer: function() {
		this.elementRenderer = new cocktail_core_renderer_TextAreaRenderer(this,this.coreStyle);
		if(this._valueIsDirty == false) this._rawValue = this.get_textContent();
		if(this.elementRenderer != null) {
			var inputRenderer = this.elementRenderer;
			inputRenderer.onInput = $bind(this,this.onUserInput);
			this.updateInputRendererState();
		}
	}
	,reset: function() {
		this._rawValue = this.get_textContent();
		this.updateInputRendererState();
	}
	,isDefaultFocusable: function() {
		if(this.get_disabled() == true) return false;
		return true;
	}
	,onUserInput: function() {
		this._valueIsDirty = true;
		var inputRenderer = this.elementRenderer;
		this._rawValue = inputRenderer.get_value();
		this.fireEvent("input",true,false);
	}
	,updateInputRendererState: function() {
		if(this.elementRenderer != null) {
			var inputRenderer = this.elementRenderer;
			inputRenderer.set_readonly(this.get_readOnly());
			inputRenderer.set_disabled(this.get_disabled());
			inputRenderer.set_maxLength(this.get_maxLength());
			inputRenderer.set_value(this.get_value());
		}
	}
	,get_value: function() {
		return this._rawValue;
	}
	,get_maxLength: function() {
		return this.getAttributeAsPositiveSignedInteger("maxlength",null);
	}
	,get_readOnly: function() {
		return this.getAttributeAsBool("readonly");
	}
	,get_disabled: function() {
		return this.getAttributeAsBool("disabled");
	}
	,__class__: cocktail_core_html_HTMLTextAreaElement
	,__properties__: $extend(cocktail_core_html_FormAssociatedElement.prototype.__properties__,{get_disabled:"get_disabled",get_readOnly:"get_readOnly",get_maxLength:"get_maxLength",get_value:"get_value"})
});
var cocktail_core_html_HTMLTitleElement = function() {
	cocktail_core_html_HTMLElement.call(this,"TITLE");
};
$hxClasses["cocktail.core.html.HTMLTitleElement"] = cocktail_core_html_HTMLTitleElement;
cocktail_core_html_HTMLTitleElement.__name__ = true;
cocktail_core_html_HTMLTitleElement.__super__ = cocktail_core_html_HTMLElement;
cocktail_core_html_HTMLTitleElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype,{
	__class__: cocktail_core_html_HTMLTitleElement
});
var cocktail_core_html_HTMLVideoElement = function() {
	cocktail_core_html_HTMLMediaElement.call(this,"VIDEO");
	this.initPosterFrame();
};
$hxClasses["cocktail.core.html.HTMLVideoElement"] = cocktail_core_html_HTMLVideoElement;
cocktail_core_html_HTMLVideoElement.__name__ = true;
cocktail_core_html_HTMLVideoElement.__super__ = cocktail_core_html_HTMLMediaElement;
cocktail_core_html_HTMLVideoElement.prototype = $extend(cocktail_core_html_HTMLMediaElement.prototype,{
	initNativeMedia: function() {
		this.nativeMedia = new cocktail_port_base_NativeMedia();
	}
	,initPosterFrame: function() {
		this._posterImage = new cocktail_core_html_HTMLImageElement();
	}
	,setAttribute: function(name,value) {
		if(name == "poster") this.set_poster(value); else cocktail_core_html_HTMLMediaElement.prototype.setAttribute.call(this,name,value);
	}
	,createElementRenderer: function() {
		this.elementRenderer = new cocktail_core_renderer_VideoRenderer(this,this.coreStyle);
	}
	,shouldRenderPosterFrame: function() {
		if(this.get_poster() == "") return false;
		var _g = this.readyState;
		switch(_g) {
		case 0:case 1:
			return true;
		}
		if(this.paused == true && this._currentPlaybackPosition == 0.0) return true;
		return false;
	}
	,onPosterLoadComplete: function(e) {
		this.removeListeners();
		this.invalidate();
	}
	,onPosterLoadError: function(e) {
		this.removeListeners();
	}
	,removeListeners: function() {
		this._posterImage.removeEventListener("load",this._onPosterLoadComplete);
		this._posterImage.removeEventListener("error",this._onPosterLoadError);
	}
	,set_poster: function(value) {
		cocktail_core_html_HTMLMediaElement.prototype.setAttribute.call(this,"poster",value);
		this._onPosterLoadComplete = $bind(this,this.onPosterLoadComplete);
		this._onPosterLoadError = $bind(this,this.onPosterLoadError);
		this._posterImage.addEventListener("load",this._onPosterLoadComplete);
		this._posterImage.addEventListener("error",this._onPosterLoadError);
		this._posterImage.set_src(value);
		return value;
	}
	,get_poster: function() {
		return this.getAttributeAsDOMString("poster");
	}
	,get_videoWidth: function() {
		if(this.nativeMedia.get_width() != null) return Math.round(this.nativeMedia.get_width()); else return 300;
	}
	,get_videoHeight: function() {
		if(this.nativeMedia.get_height() != null) return Math.round(this.nativeMedia.get_height()); else return 150;
	}
	,__class__: cocktail_core_html_HTMLVideoElement
	,__properties__: $extend(cocktail_core_html_HTMLMediaElement.prototype.__properties__,{get_videoHeight:"get_videoHeight",get_videoWidth:"get_videoWidth",set_poster:"set_poster",get_poster:"get_poster"})
});
var cocktail_core_html_TimeRanges = function() { };
$hxClasses["cocktail.core.html.TimeRanges"] = cocktail_core_html_TimeRanges;
cocktail_core_html_TimeRanges.__name__ = true;
cocktail_core_html_TimeRanges.prototype = {
	__class__: cocktail_core_html_TimeRanges
};
var cocktail_core_http_DataFormatValue = $hxClasses["cocktail.core.http.DataFormatValue"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT"] };
cocktail_core_http_DataFormatValue.BINARY = ["BINARY",0];
cocktail_core_http_DataFormatValue.BINARY.toString = $estr;
cocktail_core_http_DataFormatValue.BINARY.__enum__ = cocktail_core_http_DataFormatValue;
cocktail_core_http_DataFormatValue.TEXT = ["TEXT",1];
cocktail_core_http_DataFormatValue.TEXT.toString = $estr;
cocktail_core_http_DataFormatValue.TEXT.__enum__ = cocktail_core_http_DataFormatValue;
var cocktail_core_invalidation_InvalidationManager = function(htmlDocument) {
	this._htmlDocument = htmlDocument;
	this._invalidationScheduled = false;
	this._documentNeedsLayout = true;
	this._documentNeedsRendering = true;
	this._documentNeedsCascading = true;
	this._graphicsContextTreeNeedsUpdate = true;
	this._forceGraphicsContextUpdate = false;
	this._renderingTreeNeedsUpdate = true;
	this._layerTreeNeedsUpdate = true;
	this._nativeLayerTreeNeedsUpdate = true;
	this._stackingContextsNeedUpdate = true;
	this._pendingTransitionsNeedUpdate = true;
	this._forceLayout = false;
	this._viewportResized = false;
	this._bitmapSizeNeedsUpdate = true;
	this._scrollOffsetNeedsUpdate = false;
	this._initialMatrix = new cocktail_core_geom_Matrix();
	this._dirtyRect = new cocktail_core_geom_RectangleVO();
	this._firstDirtyRect = true;
	this._repaintWholeViewport = true;
};
$hxClasses["cocktail.core.invalidation.InvalidationManager"] = cocktail_core_invalidation_InvalidationManager;
cocktail_core_invalidation_InvalidationManager.__name__ = true;
cocktail_core_invalidation_InvalidationManager.prototype = {
	dispose: function() {
		this._htmlDocument = null;
		this._initialMatrix = null;
		this._dirtyRect = null;
	}
	,update: function() {
		this._invalidationScheduled = false;
		this.updateDocument();
	}
	,invalidateViewportSize: function() {
		this.invalidateLayout(true);
		this.invalidateRendering();
		this._viewportResized = true;
		this._bitmapSizeNeedsUpdate = true;
	}
	,invalidateBitmapSizes: function() {
		this._bitmapSizeNeedsUpdate = true;
		this.invalidate();
	}
	,invalidateLayout: function(force) {
		if(this._forceLayout == true) this._forceLayout = force;
		this._documentNeedsLayout = true;
		this.invalidate();
	}
	,invalidateRendering: function(dirtyRect) {
		this._documentNeedsRendering = true;
		this.invalidate();
		if(this._repaintWholeViewport == true) return;
		if(dirtyRect == null) this._repaintWholeViewport = true; else if(this._firstDirtyRect == true) {
			this._dirtyRect.x = dirtyRect.x;
			this._dirtyRect.y = dirtyRect.y;
			this._dirtyRect.width = dirtyRect.width;
			this._dirtyRect.height = dirtyRect.height;
			this._firstDirtyRect = false;
		} else cocktail_core_geom_GeomUtils.addBounds(dirtyRect,this._dirtyRect,null,null);
	}
	,invalidateRenderingTree: function() {
		this._renderingTreeNeedsUpdate = true;
		this.invalidate();
	}
	,invalidateLayerTree: function() {
		this._layerTreeNeedsUpdate = true;
		this.invalidate();
	}
	,invalidateStackingContexts: function() {
		this._stackingContextsNeedUpdate = true;
		this.invalidate();
	}
	,invalidateNativeLayerTree: function() {
		this._nativeLayerTreeNeedsUpdate = true;
		this.invalidate();
	}
	,invalidatePendingTransitions: function() {
		this._pendingTransitionsNeedUpdate = true;
		this.invalidate();
	}
	,invalidateGraphicsContextTree: function(force) {
		this._graphicsContextTreeNeedsUpdate = true;
		if(force == true) this._forceGraphicsContextUpdate = true;
		this.invalidate();
	}
	,invalidateCascade: function() {
		this._documentNeedsCascading = true;
		this.invalidate();
	}
	,invalidate: function() {
		if(this._invalidationScheduled == false) this.doInvalidate();
	}
	,doInvalidate: function() {
		if(this._htmlDocument.onDocumentInvalidated != null) {
			this._invalidationScheduled = true;
			this._htmlDocument.onDocumentInvalidated();
		}
	}
	,updateDocument: function() {
		if(this._documentNeedsCascading == true) {
			this.updateCascade(true);
			this._documentNeedsCascading = false;
		}
		if(this._renderingTreeNeedsUpdate == true) {
			this.updateRenderingTree();
			this._renderingTreeNeedsUpdate = false;
		}
		if(this._layerTreeNeedsUpdate == true) {
			this._htmlDocument.documentElement.elementRenderer.updateLayerRenderer();
			this._layerTreeNeedsUpdate = false;
		}
		if(this._stackingContextsNeedUpdate == true) {
			this._htmlDocument.documentElement.elementRenderer.layerRenderer.updateStackingContext();
			this._stackingContextsNeedUpdate = false;
		}
		if(this._documentNeedsLayout == true) {
			this._htmlDocument.documentElement.elementRenderer.updateText();
			this.updateLayout(this._forceLayout);
			this._forceLayout = false;
			this._documentNeedsLayout = false;
		}
		if(this._pendingTransitionsNeedUpdate == true) {
			var atLeastOneTransitionStarted = this._htmlDocument.documentElement.startPendingTransitions();
			if(atLeastOneTransitionStarted == true) this.updateLayout(false);
		}
		if(this._graphicsContextTreeNeedsUpdate == true) {
			this._htmlDocument.documentElement.elementRenderer.layerRenderer.updateGraphicsContext(this._forceGraphicsContextUpdate);
			this._graphicsContextTreeNeedsUpdate = false;
			this._forceGraphicsContextUpdate = false;
		}
		if(this._nativeLayerTreeNeedsUpdate == true) {
			this._htmlDocument.documentElement.elementRenderer.layerRenderer.graphicsContext.updateNativeLayer();
			this._nativeLayerTreeNeedsUpdate = false;
		}
		if(this._bitmapSizeNeedsUpdate == true) {
			this._htmlDocument.documentElement.elementRenderer.layerRenderer.graphicsContext.updateGraphicsSize(Math.floor(this._htmlDocument.getViewportWidth()),Math.floor(this._htmlDocument.getViewportHeight()));
			this._bitmapSizeNeedsUpdate = false;
		}
		if(this._documentNeedsRendering == true || this._scrollOffsetNeedsUpdate == true) {
			var initialLayerRenderer = this._htmlDocument.documentElement.elementRenderer.layerRenderer;
			if(this._documentNeedsRendering == true) {
				initialLayerRenderer.updateLayerMatrix(this._initialMatrix);
				initialLayerRenderer.updateBounds();
				initialLayerRenderer.updateClippedBounds();
				initialLayerRenderer.updateScrollableBounds();
				initialLayerRenderer.resetScrollOffset();
				initialLayerRenderer.updateScrollOffset();
				initialLayerRenderer.resetClipRect(0,0,this._htmlDocument.getViewportWidth(),this._htmlDocument.getViewportHeight());
				initialLayerRenderer.updateClipRect();
				this._htmlDocument.documentElement.elementRenderer.updateHitTestingBounds();
				initialLayerRenderer.updateLayerAlpha(1.0);
				this._htmlDocument.documentElement.elementRenderer.updateTextDecorations(false,false,false,false);
				if(this._repaintWholeViewport == true) {
					this._dirtyRect.x = 0;
					this._dirtyRect.y = 0;
					this._dirtyRect.width = this._htmlDocument.getViewportWidth();
					this._dirtyRect.height = this._htmlDocument.getViewportHeight();
				}
				initialLayerRenderer.clear(this._dirtyRect.x,this._dirtyRect.y,this._dirtyRect.width,this._dirtyRect.height);
				initialLayerRenderer.stackingContext.render(this._dirtyRect);
			} else {
				initialLayerRenderer.resetScrollOffset();
				initialLayerRenderer.updateScrollOffset();
				initialLayerRenderer.resetClipRect(0,0,this._htmlDocument.getViewportWidth(),this._htmlDocument.getViewportHeight());
				initialLayerRenderer.updateClipRect();
				this._htmlDocument.documentElement.elementRenderer.updateHitTestingBounds();
				this._dirtyRect.x = 0;
				this._dirtyRect.y = 0;
				this._dirtyRect.width = 0;
				this._dirtyRect.height = 0;
				initialLayerRenderer.updateScrollRegion(this._dirtyRect);
				initialLayerRenderer.clear(this._dirtyRect.x,this._dirtyRect.y,this._dirtyRect.width,this._dirtyRect.height);
				initialLayerRenderer.stackingContext.render(this._dirtyRect);
			}
			this._documentNeedsRendering = false;
			this._repaintWholeViewport = false;
			this._firstDirtyRect = true;
			this._dirtyRect.x = 0;
			this._dirtyRect.y = 0;
			this._dirtyRect.width = 0;
			this._dirtyRect.height = 0;
			this._scrollOffsetNeedsUpdate = false;
		}
		if(this._pendingTransitionsNeedUpdate == true) {
			this._htmlDocument.documentElement.endPendingTransitions();
			this._pendingTransitionsNeedUpdate = false;
		}
		if(this._viewportResized == true) {
			this._viewportResized = false;
			var resizeEvent = new cocktail_core_event_UIEvent();
			resizeEvent.initUIEvent("resize",false,false,null,0);
			this._htmlDocument.dispatchEvent(resizeEvent);
		}
		this._htmlDocument.onUpdated();
	}
	,updateCascade: function(programmaticChange) {
		this._htmlDocument.cascadeManager.reset();
		var parentRelativeLengthReference = this._htmlDocument.cascadeManager.parentRelativeLengthReference;
		var relativeLengthReference = this._htmlDocument.cascadeManager.relativeLengthReference;
		parentRelativeLengthReference.viewportHeight = this._htmlDocument.getViewportHeight();
		parentRelativeLengthReference.viewportWidth = this._htmlDocument.getViewportWidth();
		relativeLengthReference.viewportHeight = this._htmlDocument.getViewportHeight();
		relativeLengthReference.viewportWidth = this._htmlDocument.getViewportWidth();
		this._htmlDocument.documentElement.cascade(this._htmlDocument.cascadeManager,programmaticChange);
	}
	,updateLayout: function(forceLayout) {
		this._htmlDocument.documentElement.elementRenderer.layout(forceLayout,cocktail_core_layout_LayoutStateValue.NORMAL);
		this._htmlDocument.documentElement.elementRenderer.setGlobalOrigins(0,0,0,0);
	}
	,updateRenderingTree: function() {
		this._htmlDocument.documentElement.updateElementRenderer();
		this._htmlDocument.documentElement.elementRenderer.updateAnonymousBlock();
		this._htmlDocument.documentElement.elementRenderer.updateInlineBoxes();
	}
	,__class__: cocktail_core_invalidation_InvalidationManager
};
var cocktail_core_layer_IScrollableView = function() { };
$hxClasses["cocktail.core.layer.IScrollableView"] = cocktail_core_layer_IScrollableView;
cocktail_core_layer_IScrollableView.__name__ = true;
cocktail_core_layer_IScrollableView.prototype = {
	__class__: cocktail_core_layer_IScrollableView
};
var cocktail_core_layer_ScrollableView = function(rootElementRenderer) {
	cocktail_core_ds_FastNode.call(this);
	this.rootElementRenderer = rootElementRenderer;
	this.set_scrollLeft(0);
	this.set_scrollTop(0);
	this._previousScrollOffsetX = 0;
	this._previousScrollOffsetY = 0;
	this._ancestorsScrollOffset = new cocktail_core_geom_PointVO(0,0);
	this.scrollOffset = new cocktail_core_geom_PointVO(0,0);
	this.bounds = new cocktail_core_geom_RectangleVO();
	this._clippedBounds = new cocktail_core_geom_RectangleVO();
	this.scrollableBounds = new cocktail_core_geom_RectangleVO();
	this.clipRect = new cocktail_core_geom_RectangleVO();
};
$hxClasses["cocktail.core.layer.ScrollableView"] = cocktail_core_layer_ScrollableView;
cocktail_core_layer_ScrollableView.__name__ = true;
cocktail_core_layer_ScrollableView.__interfaces__ = [cocktail_core_layer_IScrollableView];
cocktail_core_layer_ScrollableView.__super__ = cocktail_core_ds_FastNode;
cocktail_core_layer_ScrollableView.prototype = $extend(cocktail_core_ds_FastNode.prototype,{
	resetClipRect: function(x,y,width,height) {
		this.clipRect.x = x;
		this.clipRect.y = y;
		this.clipRect.width = width;
		this.clipRect.height = height;
		var child = this.firstChild;
		while(child != null) {
			child.resetClipRect(x,y,width,height);
			child = child.nextSibling;
		}
	}
	,updateClipRect: function() {
		var clipped = false;
		if(this.isXAxisClipped() == true) clipped = true; else if(this.isYAxisClipped() == true) clipped = true;
		if(clipped == true) {
			this._clippedBounds.x -= this._ancestorsScrollOffset.x;
			this._clippedBounds.y -= this._ancestorsScrollOffset.y;
			cocktail_core_geom_GeomUtils.intersectBounds(this.clipRect,this._clippedBounds,this.clipRect);
			this._clippedBounds.x += this._ancestorsScrollOffset.x;
			this._clippedBounds.y += this._ancestorsScrollOffset.y;
			this.clipChildren(this,this.clipRect,this);
		}
		var child = this.firstChild;
		while(child != null) {
			child.updateClipRect();
			child = child.nextSibling;
		}
	}
	,clipChildren: function(rootLayerRenderer,clipRect,referenceLayer) {
		var child = rootLayerRenderer.firstChild;
		while(child != null) {
			var childWasClipped = child.clipIfNeeded(clipRect,referenceLayer);
			if(childWasClipped == true) {
				if(child.firstChild != null) this.clipChildren(child,clipRect,referenceLayer);
			}
			child = child.nextSibling;
		}
	}
	,clipIfNeeded: function(parentClipRect,layer) {
		if(this.rootElementRenderer.coreStyle.isFixedPositioned == true) return false;
		if(this.isContainingBlockChildren(layer) == true) return false;
		cocktail_core_geom_GeomUtils.intersectBounds(this.clipRect,parentClipRect,this.clipRect);
		return true;
	}
	,resetScrollOffset: function() {
		this._ancestorsScrollOffset.x = 0;
		this._ancestorsScrollOffset.y = 0;
		this._previousScrollOffsetX = this.scrollOffset.x;
		this._previousScrollOffsetY = this.scrollOffset.y;
		this.scrollOffset.x = 0;
		this.scrollOffset.y = 0;
		var child = this.firstChild;
		while(child != null) {
			child.resetScrollOffset();
			child = child.nextSibling;
		}
	}
	,updateScrollOffset: function() {
		if(this.isXAxisClipped() == true) this.addScrollOffsetToChildren(this,this.scrollLeft,this.scrollTop,this); else if(this.isYAxisClipped() == true) this.addScrollOffsetToChildren(this,this.scrollLeft,this.scrollTop,this);
		var child = this.firstChild;
		while(child != null) {
			child.updateScrollOffset();
			child = child.nextSibling;
		}
		this.scrollOffset.x = this._ancestorsScrollOffset.x + this.scrollLeft;
		this.scrollOffset.y = this._ancestorsScrollOffset.y + this.scrollTop;
	}
	,addScrollOffsetIfNeeded: function(layer,scrollLeft,scrollTop) {
		if(this.rootElementRenderer.coreStyle.isFixedPositioned == true) return;
		if(this.isContainingBlockChildren(layer) == true) return;
		this._ancestorsScrollOffset.x += scrollLeft;
		this._ancestorsScrollOffset.y += scrollTop;
	}
	,addScrollOffsetToChildren: function(rootLayerRenderer,scrollLeft,scrollTop,referenceLayer) {
		var child = rootLayerRenderer.firstChild;
		while(child != null) {
			child.addScrollOffsetIfNeeded(referenceLayer,scrollLeft,scrollTop);
			if(child.firstChild != null) this.addScrollOffsetToChildren(child,scrollLeft,scrollTop,referenceLayer);
			child = child.nextSibling;
		}
	}
	,updateBounds: function() {
		var child = this.firstChild;
		this.getElementRenderersBounds(this.rootElementRenderer,this.bounds);
		while(child != null) {
			child.updateBounds();
			child = child.nextSibling;
		}
	}
	,updateClippedBounds: function() {
		var child = this.firstChild;
		var x = this.bounds.x;
		var y = this.bounds.y;
		var width = this.bounds.width;
		var height = this.bounds.height;
		if(this.isXAxisClipped() == true) {
			x = this.rootElementRenderer.globalBounds.x;
			width = this.rootElementRenderer.globalBounds.width;
		}
		if(this.isYAxisClipped() == true) {
			y = this.rootElementRenderer.globalBounds.y;
			height = this.rootElementRenderer.globalBounds.height;
		}
		this._clippedBounds.x = x;
		this._clippedBounds.y = y;
		this._clippedBounds.width = width;
		this._clippedBounds.height = height;
		while(child != null) {
			child.updateClippedBounds();
			child = child.nextSibling;
		}
	}
	,getElementRenderersBounds: function(rootElementRenderer,bounds) {
		bounds.x = 50000;
		bounds.y = 50000;
		bounds.width = 0;
		bounds.height = 0;
		cocktail_core_geom_GeomUtils.addBounds(rootElementRenderer.globalBounds,bounds,null,null);
		this.doGetElementRenderersBounds(rootElementRenderer,bounds);
	}
	,doGetElementRenderersBounds: function(rootElementRenderer,bounds) {
		var thisAsLayer = this;
		var child = rootElementRenderer.firstChild;
		while(child != null) {
			if(child.isText == false) {
				if(child.layerRenderer == thisAsLayer) {
					cocktail_core_geom_GeomUtils.addBounds(child.globalBounds,bounds,null,null);
					if(child.firstChild != null) this.doGetElementRenderersBounds(child,bounds);
				}
			}
			child = child.nextSibling;
		}
	}
	,updateScrollableBounds: function() {
		var child = this.firstChild;
		this.getScrollableBounds(this,this.scrollableBounds);
		while(child != null) {
			child.updateScrollableBounds();
			child = child.nextSibling;
		}
	}
	,getScrollableBoundsIfNeeded: function(layer) {
		if(this.rootElementRenderer.coreStyle.isFixedPositioned == true) return null;
		if(this.isContainingBlockChildren(layer) == true) return null;
		if(this.isXAxisClipped() == false) {
			if(this.isYAxisClipped() == false) return this.bounds;
		}
		return this._clippedBounds;
	}
	,getScrollableBounds: function(rootLayerRenderer,scrollableBounds) {
		scrollableBounds.x = 50000;
		scrollableBounds.y = 50000;
		scrollableBounds.width = 0;
		scrollableBounds.height = 0;
		cocktail_core_geom_GeomUtils.addBounds(this.bounds,scrollableBounds,null,null);
		this.doGetScrollableBounds(rootLayerRenderer,scrollableBounds,this,true,true);
	}
	,doGetScrollableBounds: function(rootLayerRenderer,scrollableBounds,referenceLayer,getHorizontalBounds,getVerticalBounds) {
		var child = rootLayerRenderer.firstChild;
		while(child != null) {
			var childBounds = child.getScrollableBoundsIfNeeded(referenceLayer);
			if(childBounds != null) {
				if(getHorizontalBounds == true) {
					if(childBounds.x < scrollableBounds.x) scrollableBounds.x = childBounds.x;
					if(childBounds.x + childBounds.width > scrollableBounds.x + scrollableBounds.width) scrollableBounds.width = childBounds.x + childBounds.width - scrollableBounds.x;
				}
				if(getVerticalBounds == true) {
					if(childBounds.y < scrollableBounds.y) scrollableBounds.y = childBounds.y;
					if(childBounds.y + childBounds.height > scrollableBounds.y + scrollableBounds.height) scrollableBounds.height = childBounds.y + childBounds.height - scrollableBounds.y;
				}
				if(child.firstChild != null) {
					if(child.isXAxisClipped() == true) getHorizontalBounds = false;
					if(child.isYAxisClipped() == true) getVerticalBounds = false;
					if(getHorizontalBounds == true || getVerticalBounds == true) this.doGetScrollableBounds(child,scrollableBounds,referenceLayer,getHorizontalBounds,getVerticalBounds);
				}
			}
			child = child.nextSibling;
		}
	}
	,set_scrollLeft: function(value) {
		if(this.isXAxisClipped() == false) return this.scrollLeft = 0;
		if(value <= 0) {
			if(this.scrollLeft > 0) this.scrollChanged();
			this.scrollLeft = 0;
		} else {
			var maxWidthScroll = this.scrollableBounds.width - this._clippedBounds.width;
			if(maxWidthScroll <= 0) {
				if(this.scrollLeft != 0) this.scrollChanged();
				this.scrollLeft = 0;
			} else if(value > maxWidthScroll) {
				if(this.scrollLeft != maxWidthScroll) this.scrollChanged();
				this.scrollLeft = maxWidthScroll;
			} else {
				if(this.scrollLeft != value) this.scrollChanged();
				this.scrollLeft = value;
			}
		}
		return value;
	}
	,set_scrollTop: function(value) {
		if(this.isYAxisClipped() == false) return this.scrollTop = 0;
		if(value <= 0) {
			if(this.scrollTop > 0) this.scrollChanged();
			this.scrollTop = 0;
		} else {
			var maxHeightScroll = this.scrollableBounds.height - this._clippedBounds.height;
			if(maxHeightScroll <= 0) {
				if(this.scrollTop != 0) this.scrollChanged();
				this.scrollTop = 0;
			} else if(value > maxHeightScroll) {
				if(this.scrollTop != maxHeightScroll) this.scrollChanged();
				this.scrollTop = maxHeightScroll;
			} else {
				if(this.scrollTop != value) this.scrollChanged();
				this.scrollTop = value;
			}
		}
		return value;
	}
	,scrollChanged: function() {
	}
	,isContainingBlockChildren: function(layer) {
		var containingBlock = this.rootElementRenderer.containingBlock;
		var layerContainingBlock = layer.rootElementRenderer.containingBlock;
		if(containingBlock == layerContainingBlock) return false;
		var parent = layerContainingBlock;
		while(parent != null) {
			if(parent == containingBlock) return true;
			parent = parent.parentNode;
		}
		return false;
	}
	,isXAxisClipped: function() {
		if(this.rootElementRenderer.isBlockContainer == false) return false;
		if(this.rootElementRenderer.coreStyle.canAlwaysOverflow == true) return false;
		if(this.rootElementRenderer.coreStyle.hasHiddenOrScrollOverflowX == true) return true;
		var _g = this.rootElementRenderer.coreStyle.getKeyword(this.rootElementRenderer.coreStyle.getComputedOrInitialProperty(51));
		switch(_g[1]) {
		case 37:case 38:
			return true;
		case 27:
			return false;
		case 36:
			if(this.treatVisibleOverflowAsAuto() == true) return false;
			return false;
		default:
			return false;
		}
	}
	,isYAxisClipped: function() {
		if(this.rootElementRenderer.isBlockContainer == false) return false;
		if(this.rootElementRenderer.coreStyle.canAlwaysOverflow == true) return false;
		if(this.rootElementRenderer.coreStyle.hasHiddenOrScrollOverflowY == true) return true;
		var _g = this.rootElementRenderer.coreStyle.getKeyword(this.rootElementRenderer.coreStyle.getComputedOrInitialProperty(52));
		switch(_g[1]) {
		case 37:case 38:
			return true;
		case 27:
			return false;
		case 36:
			if(this.treatVisibleOverflowAsAuto() == true) return false;
			return false;
		default:
			return false;
		}
	}
	,treatVisibleOverflowAsAuto: function() {
		return false;
	}
	,__class__: cocktail_core_layer_ScrollableView
	,__properties__: {set_scrollTop:"set_scrollTop",set_scrollLeft:"set_scrollLeft"}
});
var cocktail_core_layer_LayerRenderer = function(rootElementRenderer) {
	cocktail_core_layer_ScrollableView.call(this,rootElementRenderer);
	this.hasOwnGraphicsContext = false;
	this.hasOwnStackingContext = false;
	this._needsGraphicsContextUpdate = true;
	this._needsStackingContextUpdate = true;
	this._canUpdateScrollRegion = false;
	this.matrix = new cocktail_core_geom_Matrix();
	this._currentMatrix = new cocktail_core_geom_Matrix();
	this._relativeOffset = new cocktail_core_geom_PointVO(0,0);
	this._layerDirtyRect = new cocktail_core_geom_RectangleVO();
	this.alpha = 1.0;
};
$hxClasses["cocktail.core.layer.LayerRenderer"] = cocktail_core_layer_LayerRenderer;
cocktail_core_layer_LayerRenderer.__name__ = true;
cocktail_core_layer_LayerRenderer.__super__ = cocktail_core_layer_ScrollableView;
cocktail_core_layer_LayerRenderer.prototype = $extend(cocktail_core_layer_ScrollableView.prototype,{
	dispose: function() {
		this.rootElementRenderer = null;
		this.graphicsContext = null;
	}
	,updateGraphicsContext: function(force) {
		if(this._needsGraphicsContextUpdate == true || force == true) {
			this._needsGraphicsContextUpdate = false;
			if(this.graphicsContext == null) {
				this.attachGraphicsContext();
				return;
			} else if(this.hasOwnGraphicsContext != this.establishesNewGraphicsContext()) {
				this.detachGraphicsContext();
				this.attachGraphicsContext();
				return;
			}
		}
		var child = this.firstChild;
		while(child != null) {
			child.updateGraphicsContext(force);
			child = child.nextSibling;
		}
	}
	,updateLayerMatrix: function(parentMatrix) {
		this.matrix.identity();
		if(this.rootElementRenderer.coreStyle.isTransformed == true) {
			if(this.rootElementRenderer.coreStyle.hasCSSTransform == true) cocktail_core_layout_computer_VisualEffectStylesComputer.compute(this.rootElementRenderer.coreStyle);
			this.matrix = this.getTransformationMatrix();
		}
		this.matrix.concatenate(parentMatrix);
		var child = this.firstChild;
		while(child != null) {
			child.updateLayerMatrix(this.matrix);
			child = child.nextSibling;
		}
	}
	,updateLayerAlpha: function(parentAlpha) {
		var layerAlpha = 1.0;
		if(this.rootElementRenderer.coreStyle.isTransparent == true) {
			var coreStyle = this.rootElementRenderer.coreStyle;
			{
				var _g = coreStyle.getTransitionablePropertyValue(53);
				switch(_g[1]) {
				case 1:
					var value = _g[2];
					layerAlpha = value;
					break;
				case 18:
					var value1 = _g[2];
					layerAlpha = value1;
					break;
				default:
				}
			}
		}
		this.alpha = layerAlpha * parentAlpha;
		var child = this.firstChild;
		while(child != null) {
			child.updateLayerAlpha(this.alpha);
			child = child.nextSibling;
		}
	}
	,updateStackingContext: function() {
		if(this._needsStackingContextUpdate == true) {
			this._needsStackingContextUpdate = false;
			if(this.stackingContext == null) {
				this.attachStackingContext();
				return;
			} else if(this.establishesNewStackingContext() != this.hasOwnStackingContext) {
				this.detachStackingContext();
				this.attachStackingContext();
				return;
			}
		}
		var child = this.firstChild;
		while(child != null) {
			child.updateStackingContext();
			child = child.nextSibling;
		}
	}
	,invalidateGraphicsContext: function(force) {
		this._needsGraphicsContextUpdate = true;
		var htmlDocument = this.rootElementRenderer.domNode.ownerDocument;
		htmlDocument.invalidationManager.invalidateGraphicsContextTree(force);
	}
	,invalidateRendering: function() {
		var htmlDocument = this.rootElementRenderer.domNode.ownerDocument;
		htmlDocument.invalidationManager.invalidateRendering();
	}
	,invalidateStackingContext: function() {
		var htmlDocument = this.rootElementRenderer.domNode.ownerDocument;
		htmlDocument.invalidationManager.invalidateStackingContexts();
		this._needsStackingContextUpdate = true;
		this.detachStackingContext();
	}
	,appendChild: function(newChild) {
		cocktail_core_layer_ScrollableView.prototype.appendChild.call(this,newChild);
		newChild.addedToLayerTree();
	}
	,insertBefore: function(newChild,refChild) {
		cocktail_core_layer_ScrollableView.prototype.insertBefore.call(this,newChild,refChild);
		if(refChild == null) return;
		newChild.addedToLayerTree();
	}
	,removeChild: function(oldChild) {
		oldChild.removedFromLayerTree();
		cocktail_core_layer_ScrollableView.prototype.removeChild.call(this,oldChild);
	}
	,addedToLayerTree: function() {
		this.invalidateStackingContext();
		this.invalidateRendering();
		this.invalidateGraphicsContext(this.isCompositingLayer());
	}
	,removedFromLayerTree: function() {
		this.invalidateGraphicsContext(this.isCompositingLayer());
		this.invalidateStackingContext();
		this.invalidateRendering();
		this.detachGraphicsContext();
	}
	,attachGraphicsContext: function() {
		this.doAttachGraphicsContext();
		var child = this.firstChild;
		while(child != null) {
			child.attachGraphicsContext();
			child = child.nextSibling;
		}
	}
	,detachGraphicsContext: function() {
		var child = this.firstChild;
		while(child != null) {
			child.detachGraphicsContext();
			child = child.nextSibling;
		}
		this.doDetachGraphicsContext();
	}
	,attachStackingContext: function() {
		this.doAttachStackingContext();
		var child = this.firstChild;
		while(child != null) {
			child.attachStackingContext();
			child = child.nextSibling;
		}
	}
	,detachStackingContext: function() {
		var child = this.firstChild;
		while(child != null) {
			child.detachStackingContext();
			child = child.nextSibling;
		}
		this.doDetachStackingContext();
	}
	,doAttachGraphicsContext: function() {
		if(this.parentNode != null) this.createGraphicsContext(this.parentNode.graphicsContext);
	}
	,doDetachGraphicsContext: function() {
		if(this.hasOwnGraphicsContext == true) {
			this.graphicsContext.parentNode.removeChild(this.graphicsContext);
			this.graphicsContext.dispose();
			this.hasOwnGraphicsContext = false;
		}
		this.graphicsContext = null;
	}
	,doAttachStackingContext: function() {
		if(this.parentNode != null) this.createStackingContext(this.parentNode.stackingContext);
	}
	,doDetachStackingContext: function() {
		if(this.hasOwnStackingContext == true) {
			this.parentNode.stackingContext.removeChild(this.stackingContext);
			this.hasOwnStackingContext = false;
		}
		this.stackingContext = null;
	}
	,createGraphicsContext: function(parentGraphicsContext) {
		if(this.establishesNewGraphicsContext() == true) {
			this.graphicsContext = new cocktail_core_graphics_GraphicsContext(this);
			this.hasOwnGraphicsContext = true;
			var parentStackingContext = this.parentNode.stackingContext;
			var foundSelf = false;
			var child = parentStackingContext.firstChild;
			var hasCheckedAutoAndZeroLayers = false;
			while(child != null) {
				if(hasCheckedAutoAndZeroLayers == false) {
					if(child.layerRenderer.getZIndex(child.layerRenderer) >= 0) {
						var nextSiblingWithGraphicsContext = this.getNextSiblingWithGraphicsContext(parentStackingContext.layerRenderer,this,foundSelf);
						if(nextSiblingWithGraphicsContext != null) {
							if(nextSiblingWithGraphicsContext == this) foundSelf = true; else {
								nextSiblingWithGraphicsContext.graphicsContext.parentNode.insertBefore(this.graphicsContext,nextSiblingWithGraphicsContext.graphicsContext);
								return;
							}
						}
						hasCheckedAutoAndZeroLayers = true;
					}
				}
				if(foundSelf == true && child.layerRenderer != this) {
					if(child.layerRenderer.graphicsContext != null) {
						if(child.layerRenderer.hasOwnGraphicsContext == true) {
							child.layerRenderer.graphicsContext.parentNode.insertBefore(this.graphicsContext,child.layerRenderer.graphicsContext);
							return;
						}
					}
				}
				if(this.hasOwnStackingContext == true) {
					if(child.layerRenderer == this) foundSelf = true;
				}
				child = child.nextSibling;
			}
			if(hasCheckedAutoAndZeroLayers == false) {
				var nextSiblingWithGraphicsContext1 = this.getNextSiblingWithGraphicsContext(parentStackingContext.layerRenderer,this,foundSelf);
				if(nextSiblingWithGraphicsContext1 != null) {
					if(nextSiblingWithGraphicsContext1 == this) foundSelf = true; else {
						nextSiblingWithGraphicsContext1.graphicsContext.parentNode.insertBefore(this.graphicsContext,nextSiblingWithGraphicsContext1.graphicsContext);
						return;
					}
				}
			}
			parentGraphicsContext.appendChild(this.graphicsContext);
		} else this.graphicsContext = parentGraphicsContext;
	}
	,getNextSiblingWithGraphicsContext: function(rootLayer,referenceLayer,hasFoundSelf) {
		var nextSiblingWithGraphicsContext = null;
		var child = rootLayer.firstChild;
		while(child != null) {
			if(child.hasOwnStackingContext == false) {
				if(child == referenceLayer) hasFoundSelf = true; else if(hasFoundSelf == true) {
					if(child.hasOwnGraphicsContext == true) return child;
				}
				var childNextSiblingWithGraphicsContext = this.getNextSiblingWithGraphicsContext(child,referenceLayer,hasFoundSelf);
				if(childNextSiblingWithGraphicsContext != null) {
					if(childNextSiblingWithGraphicsContext == referenceLayer) hasFoundSelf = true; else return childNextSiblingWithGraphicsContext;
				}
			} else {
				var _g = child.rootElementRenderer.coreStyle.getComputedOrInitialProperty(4);
				switch(_g[1]) {
				case 0:
					var value = _g[2];
					if(value == 0) {
						if(child == referenceLayer) hasFoundSelf = true; else if(hasFoundSelf == true) {
							if(child.hasOwnGraphicsContext == true) return child;
						}
					}
					break;
				default:
				}
			}
			child = child.nextSibling;
		}
		if(hasFoundSelf == true) return referenceLayer; else return null;
	}
	,establishesNewGraphicsContext: function() {
		if(cocktail_core_config_Config.getInstance().enableCompositing == true) {
			if(this.hasCompositingLayerDescendant(this) == true) return true; else if(this.hasCompositingLayerSibling() == true) return true;
		}
		return false;
	}
	,createStackingContext: function(parentStackingContext) {
		if(this.establishesNewStackingContext() == true) {
			this.stackingContext = new cocktail_core_stacking_StackingContext(this);
			this.hasOwnStackingContext = true;
			var zIndex = this.getZIndex(this);
			var child = parentStackingContext.firstChild;
			while(child != null) {
				var childZIndex = this.getZIndex(child.layerRenderer);
				if(childZIndex > zIndex) {
					parentStackingContext.insertBefore(this.stackingContext,child);
					return;
				}
				child = child.nextSibling;
			}
			parentStackingContext.appendChild(this.stackingContext);
		} else this.stackingContext = parentStackingContext;
	}
	,getZIndex: function(layerRenderer) {
		var zIndex = 0;
		{
			var _g = layerRenderer.rootElementRenderer.coreStyle.getComputedOrInitialProperty(4);
			switch(_g[1]) {
			case 0:
				var value = _g[2];
				zIndex = value;
				break;
			default:
			}
		}
		return zIndex;
	}
	,hasCompositingLayerDescendant: function(rootLayerRenderer) {
		var child = rootLayerRenderer.firstChild;
		while(child != null) {
			if(child.isCompositingLayer() == true || child.hasOwnGraphicsContext == true) return true; else if(child.firstChild != null) {
				var hasCompositingLayer = this.hasCompositingLayerDescendant(child);
				if(hasCompositingLayer == true) return true;
			}
			child = child.nextSibling;
		}
		return false;
	}
	,hasCompositingLayerSibling: function() {
		var parentStackingContext = this.parentNode.stackingContext;
		if(parentStackingContext == null) return false;
		var hasCheckedAutoAndZeroLayers = false;
		var child = parentStackingContext.firstChild;
		while(child != null) {
			if(hasCheckedAutoAndZeroLayers == false) {
				if(child.layerRenderer.getZIndex(child.layerRenderer) >= 0) {
					var ret = this.hasZeroOrAutoCompositingLayerSibling(parentStackingContext.layerRenderer,this);
					if(ret == true) return true;
					hasCheckedAutoAndZeroLayers = true;
				}
			}
			if(child.layerRenderer == this) return false; else if(child.layerRenderer.isCompositingLayer() == true || child.layerRenderer.hasOwnGraphicsContext == true) return true;
			child = child.nextSibling;
		}
		if(hasCheckedAutoAndZeroLayers == false) return this.hasZeroOrAutoCompositingLayerSibling(parentStackingContext.layerRenderer,this);
		return false;
	}
	,hasZeroOrAutoCompositingLayerSibling: function(rootLayer,referenceLayer) {
		var child = rootLayer.firstChild;
		while(child != null) {
			if(child.hasOwnStackingContext == false) {
				if(child == referenceLayer) return false;
				if(child.isCompositingLayer() == true || child.hasOwnGraphicsContext == true) return true;
				var ret = this.hasZeroOrAutoCompositingLayerSibling(child,referenceLayer);
				if(ret == true) return true;
			} else {
				var _g = child.rootElementRenderer.coreStyle.getComputedOrInitialProperty(4);
				switch(_g[1]) {
				case 0:
					var value = _g[2];
					if(value == 0) {
						if(child == referenceLayer) return false;
						if(child.isCompositingLayer() == true || child.hasOwnGraphicsContext == true) return true;
					}
					break;
				default:
				}
			}
			child = child.nextSibling;
		}
		return false;
	}
	,isCompositingLayer: function() {
		return false;
	}
	,needsBitmap: function() {
		return true;
	}
	,updateBounds: function() {
		cocktail_core_layer_ScrollableView.prototype.updateBounds.call(this);
		this.bounds.x += this.matrix.e;
		this.bounds.y += this.matrix.f;
	}
	,scrollChanged: function() {
		var htmlDocument = this.rootElementRenderer.domNode.ownerDocument;
		htmlDocument.invalidationManager.invalidateRendering(this.clipRect);
		this._canUpdateScrollRegion = true;
		htmlDocument.timer.delay($bind(this,this.dispatchScrollEvent));
	}
	,clear: function(x,y,width,height) {
		if(this.hasOwnGraphicsContext == true) this.doClear(x,y,width,height);
		var child = this.firstChild;
		while(child != null) {
			child.clear(x,y,width,height);
			child = child.nextSibling;
		}
	}
	,render: function(dirtyRect) {
		if(this.alpha == 0) return;
		cocktail_core_geom_GeomUtils.intersectBounds(dirtyRect,this.clipRect,this._layerDirtyRect);
		if(this._layerDirtyRect.width == 0 || this._layerDirtyRect.height == 0) return;
		if(this.alpha != 1.0) this.graphicsContext.nativeLayer.graphics.beginTransparency(this.alpha);
		this.graphicsContext.nativeLayer.graphics.beginTransformations(this.matrix);
		this.rootElementRenderer.render(this.graphicsContext,this._layerDirtyRect,this.scrollOffset);
		this.graphicsContext.nativeLayer.graphics.endTransformations();
		if(this.alpha != 1.0) this.graphicsContext.nativeLayer.graphics.endTransparency();
		this._canUpdateScrollRegion = false;
	}
	,updateScrollRegion: function(dirtyRect) {
		if(this._canUpdateScrollRegion == true) {
			var leftScrollOffset = this.scrollOffset.x - this._previousScrollOffsetX;
			var topScrollOffset = this.scrollOffset.y - this._previousScrollOffsetY;
			var copyRect = new cocktail_core_geom_RectangleVO();
			copyRect.x = this.clipRect.x;
			copyRect.y = this.clipRect.y;
			copyRect.width = this.clipRect.width;
			copyRect.height = this.clipRect.height;
			var copyDestination = new cocktail_core_geom_PointVO(this.clipRect.x,this.clipRect.y);
			if(topScrollOffset != 0) {
				copyRect.height -= Math.abs(topScrollOffset);
				if(topScrollOffset > 0) copyRect.y += topScrollOffset; else copyDestination.y -= topScrollOffset;
				var scrollTopRect = new cocktail_core_geom_RectangleVO();
				scrollTopRect.width = this.clipRect.width;
				scrollTopRect.height = Math.abs(topScrollOffset);
				scrollTopRect.x = this.clipRect.x;
				if(topScrollOffset > 0) scrollTopRect.y = this.clipRect.y + this.clipRect.height - topScrollOffset; else scrollTopRect.y = this.clipRect.y;
				if(dirtyRect.width == 0 && dirtyRect.height == 0) {
					dirtyRect.x = scrollTopRect.x;
					dirtyRect.y = scrollTopRect.y;
					dirtyRect.width = scrollTopRect.width;
					dirtyRect.height = scrollTopRect.height;
				} else cocktail_core_geom_GeomUtils.intersectBounds(dirtyRect,scrollTopRect,dirtyRect);
			}
			if(leftScrollOffset != 0) {
				copyRect.width -= Math.abs(leftScrollOffset);
				if(leftScrollOffset > 0) copyRect.x += leftScrollOffset; else copyDestination.x -= leftScrollOffset;
				var scrollLeftRect = new cocktail_core_geom_RectangleVO();
				scrollLeftRect.width = Math.abs(leftScrollOffset);
				scrollLeftRect.height = this.clipRect.height;
				scrollLeftRect.y = this.clipRect.y;
				if(leftScrollOffset > 0) scrollLeftRect.x = this.clipRect.x + this.clipRect.width - leftScrollOffset; else scrollLeftRect.x = this.clipRect.x;
				if(dirtyRect.width == 0 && dirtyRect.height == 0) {
					dirtyRect.x = scrollLeftRect.x;
					dirtyRect.y = scrollLeftRect.y;
					dirtyRect.width = scrollLeftRect.width;
					dirtyRect.height = scrollLeftRect.height;
				} else cocktail_core_geom_GeomUtils.intersectBounds(dirtyRect,scrollLeftRect,dirtyRect);
			}
			this.graphicsContext.nativeLayer.graphics.copyRect(copyRect,copyDestination.x,copyDestination.y);
			this._canUpdateScrollRegion = false;
		}
		var child = this.firstChild;
		while(child != null) {
			child.updateScrollRegion(dirtyRect);
			child = child.nextSibling;
		}
	}
	,doClear: function(x,y,width,height) {
		this.graphicsContext.nativeLayer.graphics.clear(x,y,width,height);
	}
	,getTransformationMatrix: function() {
		var relativeOffset = this.getRelativeOffset(this.rootElementRenderer);
		this._currentMatrix.identity();
		if(this.rootElementRenderer.hasCSSTransform() == true) this.getConcatenatedMatrix(this.rootElementRenderer.coreStyle.usedValues.transform,relativeOffset);
		this._currentMatrix.translate(relativeOffset.x,relativeOffset.y);
		return this._currentMatrix;
	}
	,getConcatenatedMatrix: function(matrix,relativeOffset) {
		var globalBounds = this.rootElementRenderer.globalBounds;
		this._currentMatrix.translate(globalBounds.x + relativeOffset.x,globalBounds.y + relativeOffset.y);
		this._currentMatrix.concatenate(matrix);
		this._currentMatrix.translate((globalBounds.x + relativeOffset.x) * -1,(globalBounds.y + relativeOffset.y) * -1);
	}
	,getRelativeOffset: function(elementRenderer) {
		this._relativeOffset.x = 0;
		this._relativeOffset.y = 0;
		if(elementRenderer.isRelativePositioned() == true) {
			if(elementRenderer.coreStyle.hasAutoLeft == false) this._relativeOffset.x += elementRenderer.coreStyle.usedValues.left; else if(elementRenderer.coreStyle.hasAutoRight == false) this._relativeOffset.x -= elementRenderer.coreStyle.usedValues.right;
			if(elementRenderer.coreStyle.hasAutoTop == false) this._relativeOffset.y += elementRenderer.coreStyle.usedValues.top; else if(elementRenderer.coreStyle.hasAutoBottom == false) this._relativeOffset.y -= elementRenderer.coreStyle.usedValues.bottom;
		}
		return this._relativeOffset;
	}
	,establishesNewStackingContext: function() {
		if(this.rootElementRenderer.isPositioned() == false) return false;
		{
			var _g = this.rootElementRenderer.coreStyle.getComputedOrInitialProperty(4);
			switch(_g[1]) {
			case 4:
				var value = _g[2];
				if(value == cocktail_core_css_CSSKeywordValue.AUTO) return false;
				break;
			default:
			}
		}
		return true;
	}
	,dispatchScrollEvent: function(timestamp) {
		var scrollEvent = new cocktail_core_event_UIEvent();
		scrollEvent.initEvent("scroll",false,false);
		if(this.rootElementRenderer != null) {
			if(this.rootElementRenderer.domNode != null) this.rootElementRenderer.domNode.dispatchEvent(scrollEvent);
		}
	}
	,__class__: cocktail_core_layer_LayerRenderer
});
var cocktail_core_layer_CompositingLayerRenderer = function(rootElementRenderer) {
	cocktail_core_layer_LayerRenderer.call(this,rootElementRenderer);
};
$hxClasses["cocktail.core.layer.CompositingLayerRenderer"] = cocktail_core_layer_CompositingLayerRenderer;
cocktail_core_layer_CompositingLayerRenderer.__name__ = true;
cocktail_core_layer_CompositingLayerRenderer.__super__ = cocktail_core_layer_LayerRenderer;
cocktail_core_layer_CompositingLayerRenderer.prototype = $extend(cocktail_core_layer_LayerRenderer.prototype,{
	establishesNewGraphicsContext: function() {
		if(cocktail_core_config_Config.getInstance().enableCompositing == true) {
			if(this.isCompositingLayer() == true) return true; else return cocktail_core_layer_LayerRenderer.prototype.establishesNewGraphicsContext.call(this);
		}
		return false;
	}
	,isCompositingLayer: function() {
		return true;
	}
	,__class__: cocktail_core_layer_CompositingLayerRenderer
});
var cocktail_core_layer_InitialLayerRenderer = function(rootElementRenderer) {
	cocktail_core_layer_LayerRenderer.call(this,rootElementRenderer);
};
$hxClasses["cocktail.core.layer.InitialLayerRenderer"] = cocktail_core_layer_InitialLayerRenderer;
cocktail_core_layer_InitialLayerRenderer.__name__ = true;
cocktail_core_layer_InitialLayerRenderer.__super__ = cocktail_core_layer_LayerRenderer;
cocktail_core_layer_InitialLayerRenderer.prototype = $extend(cocktail_core_layer_LayerRenderer.prototype,{
	doAttachGraphicsContext: function() {
		this.graphicsContext = new cocktail_core_graphics_InitialGraphicsContext(this);
		this.hasOwnGraphicsContext = true;
	}
	,doDetachGraphicsContext: function() {
		this.graphicsContext.removedFromGraphicsContextTree();
		this.graphicsContext.dispose();
		this.hasOwnGraphicsContext = false;
		this.graphicsContext = null;
	}
	,doAttachStackingContext: function() {
		this.stackingContext = new cocktail_core_stacking_StackingContext(this);
		this.hasOwnStackingContext = true;
	}
	,doDetachStackingContext: function() {
		this.stackingContext = null;
		this.hasOwnStackingContext = false;
	}
	,establishesNewGraphicsContext: function() {
		return true;
	}
	,establishesNewStackingContext: function() {
		return true;
	}
	,hasCompositingLayerSibling: function() {
		return false;
	}
	,treatVisibleOverflowAsAuto: function() {
		return true;
	}
	,__class__: cocktail_core_layer_InitialLayerRenderer
});
var cocktail_core_layer_InputLayerRenderer = function(rootElementRenderer) {
	cocktail_core_layer_CompositingLayerRenderer.call(this,rootElementRenderer);
};
$hxClasses["cocktail.core.layer.InputLayerRenderer"] = cocktail_core_layer_InputLayerRenderer;
cocktail_core_layer_InputLayerRenderer.__name__ = true;
cocktail_core_layer_InputLayerRenderer.__super__ = cocktail_core_layer_CompositingLayerRenderer;
cocktail_core_layer_InputLayerRenderer.prototype = $extend(cocktail_core_layer_CompositingLayerRenderer.prototype,{
	attachGraphicsContext: function() {
		cocktail_core_layer_CompositingLayerRenderer.prototype.attachGraphicsContext.call(this);
		if(this.graphicsContext != null) {
			var htmlInputElement = this.rootElementRenderer.domNode;
			if(htmlInputElement.elementRenderer != null) {
				var inputRenderer = htmlInputElement.elementRenderer;
				inputRenderer.nativeInput.attach(this.graphicsContext);
			}
		}
	}
	,detachGraphicsContext: function() {
		if(this.graphicsContext != null) {
			var htmlInputElement = this.rootElementRenderer.domNode;
			if(htmlInputElement.elementRenderer != null) {
				var inputRenderer = htmlInputElement.elementRenderer;
				inputRenderer.nativeInput.detach(this.graphicsContext);
			}
		}
		cocktail_core_layer_CompositingLayerRenderer.prototype.detachGraphicsContext.call(this);
	}
	,__class__: cocktail_core_layer_InputLayerRenderer
});
var cocktail_core_layer_PluginLayerRenderer = function(rootElementRenderer) {
	cocktail_core_layer_CompositingLayerRenderer.call(this,rootElementRenderer);
};
$hxClasses["cocktail.core.layer.PluginLayerRenderer"] = cocktail_core_layer_PluginLayerRenderer;
cocktail_core_layer_PluginLayerRenderer.__name__ = true;
cocktail_core_layer_PluginLayerRenderer.__super__ = cocktail_core_layer_CompositingLayerRenderer;
cocktail_core_layer_PluginLayerRenderer.prototype = $extend(cocktail_core_layer_CompositingLayerRenderer.prototype,{
	attachGraphicsContext: function() {
		cocktail_core_layer_CompositingLayerRenderer.prototype.attachGraphicsContext.call(this);
		var htmlObjectElement = this.rootElementRenderer.domNode;
		htmlObjectElement.plugin.attach(this.graphicsContext);
	}
	,detachGraphicsContext: function() {
		if(this.graphicsContext != null) {
			var htmlObjectElement = this.rootElementRenderer.domNode;
			htmlObjectElement.plugin.detach(this.graphicsContext);
		}
		cocktail_core_layer_CompositingLayerRenderer.prototype.detachGraphicsContext.call(this);
	}
	,isCompositingLayer: function() {
		var htmlObjectElement = this.rootElementRenderer.domNode;
		return htmlObjectElement.plugin.isCompositedPlugin();
	}
	,needsBitmap: function() {
		return false;
	}
	,doClear: function(x,y,width,height) {
	}
	,__class__: cocktail_core_layer_PluginLayerRenderer
});
var cocktail_core_layer_VideoLayerRenderer = function(rootElementRenderer) {
	cocktail_core_layer_CompositingLayerRenderer.call(this,rootElementRenderer);
};
$hxClasses["cocktail.core.layer.VideoLayerRenderer"] = cocktail_core_layer_VideoLayerRenderer;
cocktail_core_layer_VideoLayerRenderer.__name__ = true;
cocktail_core_layer_VideoLayerRenderer.__super__ = cocktail_core_layer_CompositingLayerRenderer;
cocktail_core_layer_VideoLayerRenderer.prototype = $extend(cocktail_core_layer_CompositingLayerRenderer.prototype,{
	attachGraphicsContext: function() {
		cocktail_core_layer_CompositingLayerRenderer.prototype.attachGraphicsContext.call(this);
		var htmlVideoElement = this.rootElementRenderer.domNode;
		htmlVideoElement.nativeMedia.attach(this.graphicsContext);
	}
	,detachGraphicsContext: function() {
		if(this.graphicsContext != null) {
			var htmlVideoElement = this.rootElementRenderer.domNode;
			htmlVideoElement.nativeMedia.detach(this.graphicsContext);
		}
		cocktail_core_layer_CompositingLayerRenderer.prototype.detachGraphicsContext.call(this);
	}
	,needsBitmap: function() {
		return false;
	}
	,doClear: function(x,y,width,height) {
	}
	,__class__: cocktail_core_layer_VideoLayerRenderer
});
var cocktail_core_layout_ContainingBlockVO = function(width,isWidthAuto,height,isHeightAuto) {
	this.width = width;
	this.isWidthAuto = isWidthAuto;
	this.height = height;
	this.isHeightAuto = isHeightAuto;
};
$hxClasses["cocktail.core.layout.ContainingBlockVO"] = cocktail_core_layout_ContainingBlockVO;
cocktail_core_layout_ContainingBlockVO.__name__ = true;
cocktail_core_layout_ContainingBlockVO.prototype = {
	__class__: cocktail_core_layout_ContainingBlockVO
};
var cocktail_core_layout_LayoutStateValue = $hxClasses["cocktail.core.layout.LayoutStateValue"] = { __ename__ : true, __constructs__ : ["NORMAL","SHRINK_TO_FIT_PREFERED_WIDTH","SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH"] };
cocktail_core_layout_LayoutStateValue.NORMAL = ["NORMAL",0];
cocktail_core_layout_LayoutStateValue.NORMAL.toString = $estr;
cocktail_core_layout_LayoutStateValue.NORMAL.__enum__ = cocktail_core_layout_LayoutStateValue;
cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_WIDTH = ["SHRINK_TO_FIT_PREFERED_WIDTH",1];
cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_WIDTH.toString = $estr;
cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_WIDTH.__enum__ = cocktail_core_layout_LayoutStateValue;
cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH = ["SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH",2];
cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH.toString = $estr;
cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH.__enum__ = cocktail_core_layout_LayoutStateValue;
var cocktail_core_layout_ComputedBackgroundStyleVO = function() {
};
$hxClasses["cocktail.core.layout.ComputedBackgroundStyleVO"] = cocktail_core_layout_ComputedBackgroundStyleVO;
cocktail_core_layout_ComputedBackgroundStyleVO.__name__ = true;
cocktail_core_layout_ComputedBackgroundStyleVO.prototype = {
	__class__: cocktail_core_layout_ComputedBackgroundStyleVO
};
var cocktail_core_layout_InlineFormattingVO = function() {
};
$hxClasses["cocktail.core.layout.InlineFormattingVO"] = cocktail_core_layout_InlineFormattingVO;
cocktail_core_layout_InlineFormattingVO.__name__ = true;
cocktail_core_layout_InlineFormattingVO.prototype = {
	__class__: cocktail_core_layout_InlineFormattingVO
};
var cocktail_core_layout_FloatsVO = function(left,right) {
	this.left = left;
	this.right = right;
};
$hxClasses["cocktail.core.layout.FloatsVO"] = cocktail_core_layout_FloatsVO;
cocktail_core_layout_FloatsVO.__name__ = true;
cocktail_core_layout_FloatsVO.prototype = {
	__class__: cocktail_core_layout_FloatsVO
};
var cocktail_core_layout_FloatVO = function(node,bounds) {
	this.node = node;
	this.bounds = bounds;
};
$hxClasses["cocktail.core.layout.FloatVO"] = cocktail_core_layout_FloatVO;
cocktail_core_layout_FloatVO.__name__ = true;
cocktail_core_layout_FloatVO.prototype = {
	__class__: cocktail_core_layout_FloatVO
};
var cocktail_core_layout_LayoutManager = function() {
	this.embeddedBlockBoxStylesComputer = new cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer();
	this.embeddedFloatBoxStylesComputer = new cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer();
	this.embeddedInlineBlockBoxStylesComputer = new cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer();
	this.embeddedInlineBoxStylesComputer = new cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer();
	this.embeddedPositionedBoxStylesComputer = new cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer();
	this.blockBoxStyleComputer = new cocktail_core_boxmodel_BlockBoxStylesComputer();
	this.floatBoxStylesComputer = new cocktail_core_boxmodel_FloatBoxStylesComputer();
	this.inlineBoxStylesComputer = new cocktail_core_boxmodel_InLineBoxStylesComputer();
	this.inlineBlockBoxStylesComputer = new cocktail_core_boxmodel_InlineBlockBoxStylesComputer();
	this.positionedBoxStylesComputer = new cocktail_core_boxmodel_PositionedBoxStylesComputer();
};
$hxClasses["cocktail.core.layout.LayoutManager"] = cocktail_core_layout_LayoutManager;
cocktail_core_layout_LayoutManager.__name__ = true;
cocktail_core_layout_LayoutManager.prototype = {
	dispose: function() {
		this.embeddedBlockBoxStylesComputer = null;
		this.embeddedFloatBoxStylesComputer = null;
		this.embeddedInlineBlockBoxStylesComputer = null;
		this.embeddedInlineBoxStylesComputer = null;
		this.embeddedPositionedBoxStylesComputer = null;
		this.blockBoxStyleComputer = null;
		this.floatBoxStylesComputer = null;
		this.inlineBoxStylesComputer = null;
		this.inlineBlockBoxStylesComputer = null;
		this.positionedBoxStylesComputer = null;
	}
	,getBoxStylesComputer: function(elementRenderer) {
		if(elementRenderer.isFloat() == true) {
			if(elementRenderer.isReplaced == true) return this.embeddedFloatBoxStylesComputer; else return this.floatBoxStylesComputer;
		} else if(elementRenderer.isPositioned() == true && elementRenderer.isRelativePositioned() == false) {
			if(elementRenderer.isReplaced == true) return this.embeddedPositionedBoxStylesComputer; else return this.positionedBoxStylesComputer;
		} else if(elementRenderer.isAnonymousBlockBox() == true) return this.blockBoxStyleComputer; else {
			var _g = elementRenderer.coreStyle.getComputedOrInitialProperty(0);
			switch(_g[1]) {
			case 4:
				var value = _g[2];
				switch(value[1]) {
				case 28:
					if(elementRenderer.isReplaced == true) return this.embeddedBlockBoxStylesComputer; else return this.blockBoxStyleComputer;
					break;
				case 29:
					if(elementRenderer.isReplaced == true) return this.embeddedInlineBlockBoxStylesComputer; else return this.inlineBlockBoxStylesComputer;
					break;
				case 30:
					if(elementRenderer.isReplaced == true) return this.embeddedInlineBoxStylesComputer; else return this.inlineBoxStylesComputer;
					break;
				default:
					return null;
				}
				break;
			default:
				return null;
			}
		}
	}
	,__class__: cocktail_core_layout_LayoutManager
};
var cocktail_core_layout_computer_BackgroundStylesComputer = function() { };
$hxClasses["cocktail.core.layout.computer.BackgroundStylesComputer"] = cocktail_core_layout_computer_BackgroundStylesComputer;
cocktail_core_layout_computer_BackgroundStylesComputer.__name__ = true;
cocktail_core_layout_computer_BackgroundStylesComputer.computeIndividualBackground = function(style,backgroundBox,intrinsicWidth,intrinsicHeight,intrinsicRatio,backgroundPosition,backgroundSize,backgroundOrigin,backgroundClip,backgroundRepeat,backgroundImage) {
	var backgroundPositioningArea = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundPositioningArea(style,backgroundOrigin,backgroundBox);
	var computedBackgroundSize = cocktail_core_layout_computer_BackgroundStylesComputer.getComputedBackgroundSize(backgroundSize,backgroundPositioningArea,intrinsicWidth,intrinsicHeight,intrinsicRatio);
	var computedBackgroundPosition = cocktail_core_layout_computer_BackgroundStylesComputer.getComputedBackgroundPosition(backgroundPosition,backgroundPositioningArea,computedBackgroundSize);
	var computedBackgroundClip = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundPaintingArea(style,backgroundClip,backgroundBox);
	var computedBackgroundStyle = new cocktail_core_layout_ComputedBackgroundStyleVO();
	computedBackgroundStyle.backgroundOrigin = backgroundPositioningArea;
	computedBackgroundStyle.backgroundClip = computedBackgroundClip;
	computedBackgroundStyle.backgroundRepeat = backgroundRepeat;
	computedBackgroundStyle.backgroundImage = backgroundImage;
	computedBackgroundStyle.backgroundSize = computedBackgroundSize;
	computedBackgroundStyle.backgroundPosition = computedBackgroundPosition;
	return computedBackgroundStyle;
};
cocktail_core_layout_computer_BackgroundStylesComputer.getComputedBackgroundPosition = function(backgroundPosition,backgroundPositioningArea,computedBackgroundSize) {
	var backgroundPositionX = null;
	var backgroundPositionY = null;
	switch(backgroundPosition[1]) {
	case 13:
		var value = backgroundPosition[2];
		backgroundPositionX = value[0];
		backgroundPositionY = value[1];
		break;
	default:
	}
	var computedBackgroundXPosition = cocktail_core_layout_computer_BackgroundStylesComputer.doGetComputedBackgroundPosition(backgroundPositionX,backgroundPositioningArea.width,computedBackgroundSize.width);
	var computedBackgroundYPosition = cocktail_core_layout_computer_BackgroundStylesComputer.doGetComputedBackgroundPosition(backgroundPositionY,backgroundPositioningArea.height,computedBackgroundSize.height);
	var computedBackgroundPosition = new cocktail_core_geom_PointVO(computedBackgroundXPosition,computedBackgroundYPosition);
	return computedBackgroundPosition;
};
cocktail_core_layout_computer_BackgroundStylesComputer.doGetComputedBackgroundPosition = function(backgroundPosition,backgroundPositioningAreaDimension,imageDimension) {
	var computedBackgroundPosition = 0.0;
	switch(backgroundPosition[1]) {
	case 18:
		var value = backgroundPosition[2];
		computedBackgroundPosition = value;
		break;
	case 2:
		var value1 = backgroundPosition[2];
		computedBackgroundPosition = (backgroundPositioningAreaDimension - imageDimension) * (value1 * 0.01);
		break;
	case 4:
		var value2 = backgroundPosition[2];
		switch(value2[1]) {
		case 13:
			computedBackgroundPosition = (backgroundPositioningAreaDimension - imageDimension) * 0.5;
			break;
		case 11:case 22:
			computedBackgroundPosition = (backgroundPositioningAreaDimension - imageDimension) * 0.;
			break;
		case 12:case 25:
			computedBackgroundPosition = backgroundPositioningAreaDimension - imageDimension;
			break;
		default:
		}
		break;
	default:
	}
	return computedBackgroundPosition;
};
cocktail_core_layout_computer_BackgroundStylesComputer.getComputedBackgroundSize = function(backgroundSize,backgroundPositioningArea,intrinsicWidth,intrinsicHeight,intrinsicRatio) {
	var computedBackgroundSize = new cocktail_core_geom_DimensionVO(0.0,0.0);
	switch(backgroundSize[1]) {
	case 4:
		var value = backgroundSize[2];
		switch(value[1]) {
		case 42:
			if(intrinsicRatio != null) {
				var ratio = backgroundPositioningArea.width / backgroundPositioningArea.height;
				if(intrinsicRatio < ratio) {
					computedBackgroundSize.height = backgroundPositioningArea.height;
					computedBackgroundSize.width = backgroundPositioningArea.height * intrinsicRatio;
				} else {
					computedBackgroundSize.width = backgroundPositioningArea.width;
					computedBackgroundSize.height = backgroundPositioningArea.width / intrinsicRatio;
				}
			} else {
				computedBackgroundSize.width = backgroundPositioningArea.width;
				computedBackgroundSize.height = backgroundPositioningArea.height;
			}
			break;
		case 43:
			if(intrinsicRatio != null) {
				var ratio1 = backgroundPositioningArea.width / backgroundPositioningArea.height;
				if(intrinsicRatio > ratio1) {
					computedBackgroundSize.height = backgroundPositioningArea.height;
					computedBackgroundSize.width = backgroundPositioningArea.height * intrinsicRatio;
				} else {
					computedBackgroundSize.width = backgroundPositioningArea.width;
					computedBackgroundSize.height = backgroundPositioningArea.width / intrinsicRatio;
				}
			} else {
				computedBackgroundSize.width = backgroundPositioningArea.width;
				computedBackgroundSize.height = backgroundPositioningArea.height;
			}
			break;
		case 27:
			computedBackgroundSize.width = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO),cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO),backgroundPositioningArea.width,backgroundPositioningArea.height,intrinsicWidth,intrinsicHeight,intrinsicRatio);
			computedBackgroundSize.height = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO),cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO),backgroundPositioningArea.height,backgroundPositioningArea.width,intrinsicHeight,intrinsicWidth,intrinsicRatio);
			break;
		default:
		}
		break;
	case 18:
		var value1 = backgroundSize[2];
		computedBackgroundSize.width = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(backgroundSize,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO),backgroundPositioningArea.width,backgroundPositioningArea.height,intrinsicWidth,intrinsicHeight,intrinsicRatio);
		computedBackgroundSize.height = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO),backgroundSize,backgroundPositioningArea.height,backgroundPositioningArea.width,intrinsicHeight,intrinsicWidth,intrinsicRatio);
		break;
	case 2:
		var value2 = backgroundSize[2];
		computedBackgroundSize.width = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(backgroundSize,cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO),backgroundPositioningArea.width,backgroundPositioningArea.height,intrinsicWidth,intrinsicHeight,intrinsicRatio);
		computedBackgroundSize.height = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO),backgroundSize,backgroundPositioningArea.height,backgroundPositioningArea.width,intrinsicHeight,intrinsicWidth,intrinsicRatio);
		break;
	case 13:
		var value3 = backgroundSize[2];
		computedBackgroundSize.width = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(value3[0],value3[1],backgroundPositioningArea.width,backgroundPositioningArea.height,intrinsicWidth,intrinsicHeight,intrinsicRatio);
		computedBackgroundSize.height = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(value3[1],value3[0],backgroundPositioningArea.height,backgroundPositioningArea.width,intrinsicHeight,intrinsicWidth,intrinsicRatio);
		break;
	default:
	}
	return computedBackgroundSize;
};
cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO = function(backgroundSizeValue,opositeBackgroundSizeValue,backgroundPositioningAreaDimension,opositeBackgroundAreaDimension,intrinsicDimension,opositeIntrinsicDimension,intrinsicRatio) {
	var backgroundSizeStyleDimension = 0.0;
	switch(backgroundSizeValue[1]) {
	case 18:
		var value = backgroundSizeValue[2];
		backgroundSizeStyleDimension = value;
		break;
	case 2:
		var value1 = backgroundSizeValue[2];
		backgroundSizeStyleDimension = backgroundPositioningAreaDimension * (value1 * 0.01);
		break;
	case 4:
		var value2 = backgroundSizeValue[2];
		if(value2 == cocktail_core_css_CSSKeywordValue.AUTO) {
			var isOpositeAuto = false;
			switch(opositeBackgroundSizeValue[1]) {
			case 4:
				var value3 = opositeBackgroundSizeValue[2];
				if(value3 == cocktail_core_css_CSSKeywordValue.AUTO) isOpositeAuto = true;
				break;
			default:
			}
			if(intrinsicDimension != null && isOpositeAuto == true) backgroundSizeStyleDimension = intrinsicDimension; else if(opositeIntrinsicDimension != null && intrinsicRatio != null) {
				var opositeDimension = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(opositeBackgroundSizeValue,backgroundSizeValue,opositeBackgroundAreaDimension,backgroundPositioningAreaDimension,opositeIntrinsicDimension,intrinsicDimension,intrinsicRatio);
				backgroundSizeStyleDimension = opositeDimension * intrinsicRatio;
			} else backgroundSizeStyleDimension = backgroundPositioningAreaDimension;
		}
		break;
	default:
	}
	return backgroundSizeStyleDimension;
};
cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundPositioningArea = function(style,backgroundOrigin,backgroundBox) {
	var height = 0.0;
	var width = 0.0;
	var x = 0.0;
	var y = 0.0;
	switch(backgroundOrigin[1]) {
	case 4:
		var value = backgroundOrigin[2];
		switch(value[1]) {
		case 39:
			height = backgroundBox.height;
			width = backgroundBox.width;
			x = 0.0;
			y = 0.0;
			break;
		case 40:
			height = backgroundBox.height;
			width = backgroundBox.width;
			x = 0.0;
			y = 0.0;
			break;
		case 41:
			height = backgroundBox.height - style.usedValues.marginTop - style.usedValues.marginBottom - style.usedValues.paddingTop - style.usedValues.paddingBottom - style.usedValues.borderTopWidth - style.usedValues.borderBottomWidth;
			width = backgroundBox.width - style.usedValues.marginLeft - style.usedValues.marginRight - style.usedValues.paddingLeft - style.usedValues.paddingRight - style.usedValues.borderLeftWidth - style.usedValues.borderRightWidth;
			x = 0.0;
			y = 0.0;
			break;
		default:
		}
		break;
	default:
	}
	var rectangle = new cocktail_core_geom_RectangleVO();
	rectangle.x = x;
	rectangle.y = y;
	rectangle.width = width;
	rectangle.height = height;
	return rectangle;
};
cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundPaintingArea = function(style,backgroundClip,backgroundBox) {
	var height = 0.0;
	var width = 0.0;
	var x = 0.0;
	var y = 0.0;
	switch(backgroundClip[1]) {
	case 4:
		var value = backgroundClip[2];
		switch(value[1]) {
		case 39:
			height = backgroundBox.height;
			width = backgroundBox.width;
			x = 0.0;
			y = 0.0;
			break;
		case 40:
			height = backgroundBox.height;
			width = backgroundBox.width;
			x = style.usedValues.marginLeft;
			y = style.usedValues.marginTop;
			break;
		case 41:
			height = backgroundBox.height - style.usedValues.marginTop - style.usedValues.marginBottom - style.usedValues.paddingTop - style.usedValues.paddingBottom - style.usedValues.borderTopWidth - style.usedValues.borderBottomWidth;
			width = backgroundBox.width - style.usedValues.marginLeft - style.usedValues.marginRight - style.usedValues.paddingLeft - style.usedValues.paddingRight - style.usedValues.borderLeftWidth - style.usedValues.borderRightWidth;
			x = style.usedValues.marginLeft + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth;
			y = style.usedValues.marginTop + style.usedValues.paddingTop + style.usedValues.borderTopWidth;
			break;
		default:
		}
		break;
	default:
	}
	var rectangle = new cocktail_core_geom_RectangleVO();
	rectangle.x = x;
	rectangle.y = y;
	rectangle.width = width;
	rectangle.height = height;
	return rectangle;
};
var cocktail_core_layout_computer_VisualEffectStylesComputer = function() { };
$hxClasses["cocktail.core.layout.computer.VisualEffectStylesComputer"] = cocktail_core_layout_computer_VisualEffectStylesComputer;
cocktail_core_layout_computer_VisualEffectStylesComputer.__name__ = true;
cocktail_core_layout_computer_VisualEffectStylesComputer.compute = function(style) {
	style.usedValues.transformOrigin = cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTransformOrigin(style);
	style.usedValues.transform = cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTransform(style);
};
cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTransformOrigin = function(style) {
	var x = 0.0;
	var y = 0.0;
	var transformOriginX = null;
	var transformOriginY = null;
	{
		var _g = style.getComputedOrInitialProperty(60);
		switch(_g[1]) {
		case 13:
			var value = _g[2];
			transformOriginX = value[0];
			transformOriginY = value[1];
			break;
		default:
		}
	}
	switch(transformOriginX[1]) {
	case 18:
		var value1 = transformOriginX[2];
		x = value1;
		break;
	case 2:
		var value2 = transformOriginX[2];
		x = style.usedValues.width * (value2 * 0.01);
		break;
	case 4:
		var value3 = transformOriginX[2];
		switch(value3[1]) {
		case 11:
			x = style.usedValues.width * 0.;
			break;
		case 13:
			x = style.usedValues.width * 0.5;
			break;
		case 12:
			x = style.usedValues.width;
			break;
		default:
		}
		break;
	default:
	}
	switch(transformOriginY[1]) {
	case 18:
		var value4 = transformOriginY[2];
		y = value4;
		break;
	case 2:
		var value5 = transformOriginY[2];
		y = style.usedValues.width * (value5 * 0.01);
		break;
	case 4:
		var value6 = transformOriginY[2];
		switch(value6[1]) {
		case 22:
			y = style.usedValues.width * 0.;
			break;
		case 13:
			y = style.usedValues.width * 0.5;
			break;
		case 25:
			y = style.usedValues.width;
			break;
		default:
		}
		break;
	default:
	}
	var transformOriginPoint = new cocktail_core_geom_PointVO(x,y);
	return transformOriginPoint;
};
cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTransform = function(style) {
	if(style.isNone(style.getComputedOrInitialProperty(61))) return new cocktail_core_geom_Matrix();
	var matrix = new cocktail_core_geom_Matrix();
	var transformFunctions = [];
	var transformOrigin = style.usedValues.transformOrigin;
	{
		var _g = style.getComputedOrInitialProperty(61);
		switch(_g[1]) {
		case 15:
			var value = _g[2];
			var _g2 = 0;
			var _g1 = value.length;
			while(_g2 < _g1) {
				var i = _g2++;
				{
					var _g3 = value[i];
					switch(_g3[1]) {
					case 21:
						var value1 = _g3[2];
						transformFunctions.push(value1);
						break;
					default:
					}
				}
			}
			break;
		case 21:
			var value2 = _g[2];
			transformFunctions.push(value2);
			break;
		default:
		}
	}
	matrix.translate(transformOrigin.x,transformOrigin.y);
	var _g11 = 0;
	var _g4 = transformFunctions.length;
	while(_g11 < _g4) {
		var i1 = _g11++;
		var transformFunction = transformFunctions[i1];
		switch(transformFunction[1]) {
		case 0:
			var f = transformFunction[7];
			var e = transformFunction[6];
			var d = transformFunction[5];
			var c = transformFunction[4];
			var b = transformFunction[3];
			var a = transformFunction[2];
			matrix.concatenate(new cocktail_core_geom_Matrix(a,b,c,d,e,f));
			break;
		case 7:
			var value3 = transformFunction[2];
			var angle = cocktail_core_layout_computer_VisualEffectStylesComputer.getRadFromAngle(value3);
			matrix.rotate(angle);
			break;
		case 4:
			var sy = transformFunction[3];
			var sx = transformFunction[2];
			matrix.scale(sx,sy);
			break;
		case 5:
			var sx1 = transformFunction[2];
			matrix.scale(sx1,1);
			break;
		case 6:
			var sy1 = transformFunction[2];
			matrix.scale(1,sy1);
			break;
		case 10:
			var angleY = transformFunction[3];
			var angleX = transformFunction[2];
			var skewX = cocktail_core_layout_computer_VisualEffectStylesComputer.getRadFromAngle(angleX);
			var skewY = cocktail_core_layout_computer_VisualEffectStylesComputer.getRadFromAngle(angleY);
			matrix.skew(skewX,skewY);
			break;
		case 8:
			var angleX1 = transformFunction[2];
			var skewX1 = cocktail_core_layout_computer_VisualEffectStylesComputer.getRadFromAngle(angleX1);
			matrix.skew(skewX1,0);
			break;
		case 9:
			var angleY1 = transformFunction[2];
			var skewY1 = cocktail_core_layout_computer_VisualEffectStylesComputer.getRadFromAngle(angleY1);
			matrix.skew(0,skewY1);
			break;
		case 1:
			var ty = transformFunction[3];
			var tx = transformFunction[2];
			var translationX = cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTranslation(style,tx,style.usedValues.width);
			var translationY = cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTranslation(style,ty,style.usedValues.height);
			matrix.translate(translationX,translationY);
			break;
		case 2:
			var tx1 = transformFunction[2];
			var translationX1 = cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTranslation(style,tx1,style.usedValues.width);
			matrix.translate(translationX1,0.0);
			break;
		case 3:
			var ty1 = transformFunction[2];
			var translationY1 = cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTranslation(style,ty1,style.usedValues.height);
			matrix.translate(0.0,translationY1);
			break;
		}
	}
	matrix.translate(transformOrigin.x * -1,transformOrigin.y * -1);
	return matrix;
};
cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTranslation = function(style,translation,percentReference) {
	var computedTranslation = 0.0;
	switch(translation[1]) {
	case 0:
		var value = translation[2];
		computedTranslation = value;
		break;
	case 2:
		var value1 = translation[2];
		computedTranslation = percentReference * (value1 * 0.01);
		break;
	default:
	}
	return computedTranslation;
};
cocktail_core_layout_computer_VisualEffectStylesComputer.getRadFromAngle = function(value) {
	var angle;
	switch(value[1]) {
	case 0:
		var value1 = value[2];
		angle = value1 * (Math.PI / 180);
		break;
	case 2:
		var value2 = value[2];
		angle = value2;
		break;
	case 3:
		var value3 = value[2];
		angle = value3 * 360 * (Math.PI / 180);
		break;
	case 1:
		var value4 = value[2];
		angle = value4 * (Math.PI / 200);
		break;
	}
	return angle;
};
var cocktail_core_linebox_InlineBox = function(elementRenderer,leadedAscent,leadedDescent) {
	cocktail_core_ds_FastNode.call(this);
	this.isSpace = false;
	this.isText = false;
	this.isEmbedded = false;
	this.isLineFeed = false;
	this.bounds = new cocktail_core_geom_RectangleVO();
	this.offsetFromParentInlineBox = new cocktail_core_geom_PointVO(0,0);
	this.elementRenderer = elementRenderer;
	this.marginLeft = 0;
	this.marginRight = 0;
	this.paddingLeft = 0;
	this.paddingRight = 0;
	this.borderLeft = 0;
	this.borderRight = 0;
	this.leadedAscent = leadedAscent;
	this.leadedDescent = leadedDescent;
};
$hxClasses["cocktail.core.linebox.InlineBox"] = cocktail_core_linebox_InlineBox;
cocktail_core_linebox_InlineBox.__name__ = true;
cocktail_core_linebox_InlineBox.__super__ = cocktail_core_ds_FastNode;
cocktail_core_linebox_InlineBox.prototype = $extend(cocktail_core_ds_FastNode.prototype,{
	__class__: cocktail_core_linebox_InlineBox
});
var cocktail_core_linebox_EmbeddedInlineBox = function(elementRenderer,leadedAscent,leadedDescent) {
	cocktail_core_linebox_InlineBox.call(this,elementRenderer,leadedAscent,leadedDescent);
	this.isEmbedded = true;
};
$hxClasses["cocktail.core.linebox.EmbeddedInlineBox"] = cocktail_core_linebox_EmbeddedInlineBox;
cocktail_core_linebox_EmbeddedInlineBox.__name__ = true;
cocktail_core_linebox_EmbeddedInlineBox.__super__ = cocktail_core_linebox_InlineBox;
cocktail_core_linebox_EmbeddedInlineBox.prototype = $extend(cocktail_core_linebox_InlineBox.prototype,{
	__class__: cocktail_core_linebox_EmbeddedInlineBox
});
var cocktail_core_linebox_LineBox = function(elementRenderer,isFirstLine,layoutState) {
	this._isFirstLine = isFirstLine;
	this._elementRenderer = elementRenderer;
	this._spacesNumber = 0;
	this.unbreakableWidth = 0;
	this._addedWidth = 0;
	this._firstInlineBoxInserted = false;
	this._unbreakableInlineBoxes = [];
	this._layoutState = layoutState;
	this._trailingSpaceWidth = 0;
	this.rootInlineBox = new cocktail_core_linebox_InlineBox(elementRenderer,elementRenderer.getLeadedAscent(),elementRenderer.getLeadedDescent());
	this.bounds = new cocktail_core_geom_RectangleVO();
};
$hxClasses["cocktail.core.linebox.LineBox"] = cocktail_core_linebox_LineBox;
cocktail_core_linebox_LineBox.__name__ = true;
cocktail_core_linebox_LineBox.prototype = {
	addUnbreakableWidth: function(width) {
		this.unbreakableWidth += Math.floor(width);
	}
	,widthCanFit: function(width) {
		this._trailingSpaceWidth = 0;
		this.getTrailingSpacesWidth(this.rootInlineBox);
		if(this._addedWidth + width - this._trailingSpaceWidth <= this.bounds.width) return true; else return false;
	}
	,insert: function(inlineBox,parentInlineBox,force) {
		if(this._firstInlineBoxInserted == false) {
			if(inlineBox.isSpace == true) {
				var inlineBoxCoreStyle = inlineBox.elementRenderer.coreStyle;
				if(inlineBoxCoreStyle.hasNormalWhiteSpace == true || inlineBoxCoreStyle.hasPreWrapWhiteSpace == true || inlineBoxCoreStyle.hasNoWrapWhiteSpace) return false;
			}
			this._firstInlineBoxInserted = true;
		}
		if(inlineBox.isSpace == true) this._spacesNumber++;
		this._unbreakableInlineBoxes.push(inlineBox);
		var inlineBoxWidth = inlineBox.bounds.width + inlineBox.marginLeft + inlineBox.marginRight;
		this.unbreakableWidth += Math.floor(inlineBoxWidth);
		var remainingLineWidth = Math.floor(this.bounds.width - this._addedWidth);
		if(inlineBox.isLineFeed == true) return true; else if(remainingLineWidth - this.unbreakableWidth < 0) {
			if(this.introduceBreakOpportunity(inlineBox) == true && force == false) return true; else {
				this._addedWidth += this.unbreakableWidth;
				this.addUnbreakableInlineBoxesToLineBox(parentInlineBox);
			}
		} else if(this.introduceBreakOpportunity(inlineBox) == true || force == true) {
			this._addedWidth += this.unbreakableWidth;
			this.addUnbreakableInlineBoxesToLineBox(parentInlineBox);
		}
		if(this._layoutState == cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH) return true;
		return false;
	}
	,addUnbreakableInlineBoxesToLineBox: function(parentInlineBox) {
		var unbreakableLength = this._unbreakableInlineBoxes.length;
		var _g = 0;
		while(_g < unbreakableLength) {
			var i = _g++;
			this._unbreakableInlineBoxes[i].lineBox = this;
			parentInlineBox.appendChild(this._unbreakableInlineBoxes[i]);
		}
		this._unbreakableInlineBoxes = [];
		this.unbreakableWidth = 0;
	}
	,introduceBreakOpportunity: function(inlineBox) {
		if(this._layoutState == cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_WIDTH) return false;
		var inlineBoxCoreStyle = inlineBox.elementRenderer.coreStyle;
		if(inlineBoxCoreStyle.hasPreWhiteSpace == true || inlineBoxCoreStyle.hasNoWrapWhiteSpace == true) return false;
		return true;
	}
	,layout: function(isLastLine,parentInlineBox) {
		if(isLastLine == true) {
			this._addedWidth += this.unbreakableWidth;
			var unbreakableLength = this._unbreakableInlineBoxes.length;
			var _g = 0;
			while(_g < unbreakableLength) {
				var i = _g++;
				this._unbreakableInlineBoxes[i].lineBox = this;
				parentInlineBox.appendChild(this._unbreakableInlineBoxes[i]);
			}
		}
		this.removeTrailingSpaces(this.rootInlineBox);
		this.bounds.width = this.alignInlineBoxesHorizontally(this.rootInlineBox,isLastLine,this._addedWidth);
		this.updateInlineBoxesBounds(this.rootInlineBox);
		this.bounds.height = this.alignInlineBoxesVertically();
		if(this.isEmptyLineBox(this.rootInlineBox) == true) this.bounds.height = 0;
	}
	,removeTrailingSpaces: function(inlineBox) {
		var child = inlineBox.lastChild;
		while(child != null) {
			if(child.isEmbedded == false) {
				if(child.firstChild != null) {
					var canRemoveSpacesFurther = this.removeTrailingSpaces(child);
					if(canRemoveSpacesFurther == false) return false;
				}
			}
			var previousSibling = child.previousSibling;
			if(child.isSpace == true) {
				var inlineBoxCoreStyle = child.elementRenderer.coreStyle;
				if(inlineBoxCoreStyle.hasNormalWhiteSpace == true || inlineBoxCoreStyle.hasNoWrapWhiteSpace == true || inlineBoxCoreStyle.hasPreLineWhiteSpace == true) {
					child.parentNode.removeChild(child);
					this._addedWidth -= child.bounds.width;
					this._spacesNumber--;
				} else return false;
			} else return false;
			child = previousSibling;
		}
		return true;
	}
	,getTrailingSpacesWidth: function(inlineBox) {
		var child = inlineBox.lastChild;
		while(child != null) {
			if(child.isEmbedded == false) {
				if(child.firstChild != null) {
					var canAddSpacesWidthFurther = this.getTrailingSpacesWidth(child);
					if(canAddSpacesWidthFurther == false) return false;
				}
			}
			if(child.isSpace == true) {
				var inlineBoxCoreStyle = child.elementRenderer.coreStyle;
				if(inlineBoxCoreStyle.hasNormalWhiteSpace == true || inlineBoxCoreStyle.hasNoWrapWhiteSpace == true || inlineBoxCoreStyle.hasPreLineWhiteSpace == true) this._trailingSpaceWidth += child.bounds.width; else return false;
			} else return false;
			child = child.previousSibling;
		}
		return true;
	}
	,isEmptyLineBox: function(rootInlineBox) {
		var child = rootInlineBox.firstChild;
		while(child != null) {
			if(child.isText == true && child.isSpace == false) return false; else if(child.isEmbedded == true) return false; else if(child.marginLeft != 0 || child.marginRight != 0 || child.paddingLeft != 0 || child.paddingLeft != 0 || child.borderLeft != 0 || child.borderRight != 0) return false; else {
				var isEmpty = this.isEmptyLineBox(child);
				if(isEmpty == false) return false;
			}
			child = child.nextSibling;
		}
		return true;
	}
	,alignInlineBoxesHorizontally: function(rootInlineBox,isLastLine,concatenatedLength) {
		var remainingSpace = this.bounds.width - concatenatedLength;
		var x = 0;
		if(this._isFirstLine == true) {
			x += this._elementRenderer.coreStyle.usedValues.textIndent;
			remainingSpace -= this._elementRenderer.coreStyle.usedValues.textIndent;
		}
		if(this._elementRenderer.coreStyle.isLeftAligned == true) this.alignLeft(x,rootInlineBox); else {
			var _g = this._elementRenderer.coreStyle.getKeyword(this._elementRenderer.coreStyle.getComputedOrInitialProperty(46));
			switch(_g[1]) {
			case 12:
				x = this.bounds.width - x;
				this.alignRight(x,rootInlineBox);
				break;
			case 13:
				this.alignCenter(x,remainingSpace,rootInlineBox);
				break;
			case 14:
				if(isLastLine == true) this.alignLeft(x,rootInlineBox); else {
					var _g1 = this._elementRenderer.coreStyle.getKeyword(this._elementRenderer.coreStyle.getComputedOrInitialProperty(45));
					switch(_g1[1]) {
					case 7:case 9:
						this.alignLeft(x,rootInlineBox);
						break;
					default:
						concatenatedLength = this.bounds.width;
						var concatedWidthWithoutSpaces = this.getConcatenatedWidthWithoutSpaces(rootInlineBox);
						var spaceWidth = (concatenatedLength - concatedWidthWithoutSpaces) / this._spacesNumber;
						this.alignJustify(x,rootInlineBox,spaceWidth);
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Illegal value for text-align style");
			}
		}
		return concatenatedLength;
	}
	,alignLeft: function(x,inlineBox) {
		x += inlineBox.paddingLeft + inlineBox.borderLeft + inlineBox.marginLeft;
		var child = inlineBox.firstChild;
		while(child != null) {
			if(child.firstChild != null) x = this.alignLeft(x,child); else {
				child.bounds.x = x + child.marginLeft;
				x += child.bounds.width + child.marginLeft + child.marginRight;
			}
			child = child.nextSibling;
		}
		x += inlineBox.paddingRight + inlineBox.borderRight + inlineBox.marginRight;
		return x;
	}
	,alignCenter: function(x,remainingSpace,inlineBox) {
		x += inlineBox.marginLeft + inlineBox.borderLeft + inlineBox.paddingLeft;
		var child = inlineBox.firstChild;
		while(child != null) {
			if(child.firstChild != null) x = this.alignCenter(x,remainingSpace,child);
			child.bounds.x = remainingSpace / 2 + x;
			x += child.bounds.width;
			child = child.nextSibling;
		}
		x += inlineBox.marginRight + inlineBox.borderRight + inlineBox.paddingRight;
		return x;
	}
	,alignRight: function(x,inlineBox) {
		x -= inlineBox.paddingRight + inlineBox.borderRight + inlineBox.marginRight;
		var child = inlineBox.lastChild;
		while(child != null) {
			if(child.lastChild != null) x = this.alignRight(x,child); else {
				child.bounds.x = x - child.bounds.width + child.marginLeft;
				x -= child.bounds.width + child.marginLeft + child.marginRight;
			}
			child = child.previousSibling;
		}
		x -= inlineBox.paddingLeft + inlineBox.borderLeft + inlineBox.marginLeft;
		return x;
	}
	,alignJustify: function(x,inlineBox,spacesWidth) {
		x += inlineBox.paddingLeft + inlineBox.borderLeft + inlineBox.marginLeft;
		var child = inlineBox.firstChild;
		while(child != null) {
			if(child.firstChild != null) x = this.alignJustify(x,child,spacesWidth); else if(child.isSpace == true) {
				child.bounds.x = x;
				x += spacesWidth;
			} else {
				child.bounds.x = x + child.marginLeft;
				x += child.bounds.width + child.marginLeft + child.marginRight;
			}
			child = child.nextSibling;
		}
		x += inlineBox.marginRight + inlineBox.borderRight + inlineBox.paddingRight;
		return x;
	}
	,getConcatenatedWidthWithoutSpaces: function(inlineBox) {
		var width = 0;
		var child = inlineBox.firstChild;
		while(child != null) {
			if(child.firstChild != null) width += this.getConcatenatedWidthWithoutSpaces(child); else if(child.isSpace == false) width += child.bounds.width;
			child = child.nextSibling;
		}
		return width;
	}
	,alignInlineBoxesVertically: function() {
		this.updateOffsetFromParentInlineBox(this.rootInlineBox);
		cocktail_core_linebox_LineBox._inlineBoxesBounds.x = 0;
		cocktail_core_linebox_LineBox._inlineBoxesBounds.y = 0;
		cocktail_core_linebox_LineBox._inlineBoxesBounds.width = 0;
		cocktail_core_linebox_LineBox._inlineBoxesBounds.height = 0;
		cocktail_core_linebox_LineBox._inlineBoxesBounds.height = this._elementRenderer.coreStyle.usedValues.lineHeight;
		this.updateOffsetFromLineBox(this.rootInlineBox,0,0);
		var minimumTop = this.getMinimumTop(this.rootInlineBox,0);
		this.applyMinimumTop(this.rootInlineBox,minimumTop);
		this.getLineBoxHeight(this.rootInlineBox,cocktail_core_linebox_LineBox._inlineBoxesBounds,0);
		var lineBoxHeight = cocktail_core_linebox_LineBox._inlineBoxesBounds.height;
		return lineBoxHeight;
	}
	,updateInlineBoxesBounds: function(inlineBox) {
		var child = inlineBox.firstChild;
		while(child != null) {
			if(child.isText == false && child.isEmbedded == false) {
				this.updateInlineBoxesBounds(child);
				this.updateInlineBoxBounds(child);
			}
			child = child.nextSibling;
		}
	}
	,updateInlineBoxBounds: function(inlineBox) {
		inlineBox.bounds.x = 50000;
		inlineBox.bounds.y = 50000;
		inlineBox.bounds.width = 0;
		inlineBox.bounds.height = 0;
		var child = inlineBox.firstChild;
		if(child == null) {
			inlineBox.bounds.x = 0;
			inlineBox.bounds.y = 0;
		}
		while(child != null) {
			cocktail_core_linebox_LineBox._childBounds.x = child.bounds.x - child.marginLeft;
			cocktail_core_linebox_LineBox._childBounds.y = child.bounds.y;
			cocktail_core_linebox_LineBox._childBounds.width = child.bounds.width + child.marginRight + child.marginLeft;
			cocktail_core_linebox_LineBox._childBounds.height = child.bounds.height;
			cocktail_core_geom_GeomUtils.addBounds(cocktail_core_linebox_LineBox._childBounds,inlineBox.bounds,null,null);
			child = child.nextSibling;
		}
		inlineBox.bounds.width += inlineBox.paddingLeft + inlineBox.paddingRight + inlineBox.borderLeft + inlineBox.borderRight;
		inlineBox.bounds.x -= inlineBox.paddingLeft + inlineBox.borderLeft;
	}
	,updateOffsetFromParentInlineBox: function(inlineBox) {
		var child = inlineBox.firstChild;
		while(child != null) {
			var childCoreStyle = child.elementRenderer.coreStyle;
			if(childCoreStyle.isBaselineAligned == true) {
				var childLeadedAscent = child.leadedAscent;
				if(child.isEmbedded == true) {
					childLeadedAscent = child.bounds.height + child.elementRenderer.coreStyle.usedValues.marginTop + child.elementRenderer.coreStyle.usedValues.marginBottom;
					if(child.elementRenderer.isBlockContainer == true && child.elementRenderer.coreStyle.isInlineBlock == true) {
						if(child.elementRenderer.childrenInline() == true) {
							var blockBox = child.elementRenderer;
							childLeadedAscent = blockBox.lineBoxes[blockBox.lineBoxes.length - 1].bounds.y + child.leadedAscent;
						}
					}
				}
				var yOffset = childLeadedAscent - inlineBox.leadedAscent;
				child.offsetFromParentInlineBox.y = -yOffset;
			} else {
				var _g = childCoreStyle.getComputedOrInitialProperty(48);
				switch(_g[1]) {
				case 4:
					var value = _g[2];
					switch(value[1]) {
					case 24:
						var yOffset1 = childCoreStyle.fontMetrics.ascent + child.bounds.height / 2 - (inlineBox.leadedAscent + inlineBox.elementRenderer.coreStyle.fontMetrics.xHeight / 2);
						child.offsetFromParentInlineBox.y = -yOffset1;
						break;
					case 26:
						break;
					case 23:
						break;
					case 20:
						break;
					case 21:
						break;
					case 22:case 25:
						child.offsetFromParentInlineBox.y = 0;
						break;
					default:
					}
					break;
				case 18:
					var value1 = _g[2];
					var offsetFromBaseline = childCoreStyle.fontMetrics.ascent - inlineBox.elementRenderer.coreStyle.fontMetrics.ascent;
					child.offsetFromParentInlineBox.y = -value1;
					break;
				case 2:
					var value2 = _g[2];
					break;
				default:
				}
			}
			if(child.isEmbedded == false) {
				if(child.firstChild != null) this.updateOffsetFromParentInlineBox(child);
			}
			child = child.nextSibling;
		}
	}
	,updateOffsetFromLineBox: function(inlineBox,lineBoxHeight,addedY) {
		var child = inlineBox.firstChild;
		while(child != null) {
			if(child.elementRenderer.coreStyle.isTopAligned) child.bounds.y = 0; else if(child.elementRenderer.coreStyle.isBottomAligned) child.bounds.y = lineBoxHeight - this.getAlignedSubTreeHeight(child,child.bounds.height,0,false); else child.bounds.y = addedY + child.offsetFromParentInlineBox.y;
			if(child.isEmbedded == false && child.isText == false) {
				child.bounds.y += addedY;
				if(child.firstChild != null) this.updateOffsetFromLineBox(child,lineBoxHeight,child.bounds.y);
			}
			child = child.nextSibling;
		}
	}
	,getMinimumTop: function(inlineBox,minimumTop) {
		var child = inlineBox.firstChild;
		while(child != null) {
			if((child.elementRenderer.coreStyle.isBottomAligned == true || child.elementRenderer.coreStyle.isTopAligned) == false) {
				if(child.bounds.y < minimumTop) minimumTop = child.bounds.y;
				if(child.isEmbedded == false) {
					if(child.firstChild != null) minimumTop = this.getMinimumTop(child,minimumTop);
				}
			}
			child = child.nextSibling;
		}
		return minimumTop;
	}
	,applyMinimumTop: function(inlineBox,minimumTop) {
		var child = inlineBox.firstChild;
		while(child != null) {
			if((child.elementRenderer.coreStyle.isBottomAligned == true || child.elementRenderer.coreStyle.isTopAligned) == false) {
				child.bounds.y -= minimumTop;
				if(child.isEmbedded == false) {
					if(child.firstChild != null) this.applyMinimumTop(child,minimumTop);
				}
			}
			child = child.nextSibling;
		}
	}
	,getLineBoxHeight: function(inlineBox,lineBoxBounds,addedY) {
		var child = inlineBox.firstChild;
		while(child != null) {
			if((child.elementRenderer.coreStyle.isBottomAligned == true || child.elementRenderer.coreStyle.isTopAligned) == true) {
				var alignedSubTreeHeight = this.getAlignedSubTreeHeight(child,child.bounds.height,0,true);
			} else {
				if(child.isEmbedded == true || child.isText == true) {
					cocktail_core_linebox_LineBox._childBounds.x = 0;
					cocktail_core_linebox_LineBox._childBounds.y = 0;
					cocktail_core_linebox_LineBox._childBounds.width = 0;
					cocktail_core_linebox_LineBox._childBounds.height = 0;
					cocktail_core_linebox_LineBox._childBounds.y = child.bounds.y + addedY;
					cocktail_core_linebox_LineBox._childBounds.height = child.bounds.height;
					cocktail_core_geom_GeomUtils.addBounds(cocktail_core_linebox_LineBox._childBounds,lineBoxBounds,null,null);
				}
				if(child.isEmbedded == false) {
					if(child.firstChild != null) this.getLineBoxHeight(child,lineBoxBounds,addedY + child.offsetFromParentInlineBox.y);
				}
			}
			child = child.nextSibling;
		}
	}
	,getAlignedSubTreeHeight: function(inlineBox,alignedSubTreeHeight,addedY,includeChildTopAndBottomInlineBoxes) {
		return alignedSubTreeHeight;
	}
	,__class__: cocktail_core_linebox_LineBox
};
var cocktail_core_linebox_SpaceInlineBox = function(elementRenderer,leadedAscent,leadedDescent,spaceWidth) {
	cocktail_core_linebox_InlineBox.call(this,elementRenderer,leadedAscent,leadedDescent);
	this.bounds.width = spaceWidth;
	this.bounds.height = leadedAscent + leadedDescent;
	this.isSpace = true;
	this.isText = true;
};
$hxClasses["cocktail.core.linebox.SpaceInlineBox"] = cocktail_core_linebox_SpaceInlineBox;
cocktail_core_linebox_SpaceInlineBox.__name__ = true;
cocktail_core_linebox_SpaceInlineBox.__super__ = cocktail_core_linebox_InlineBox;
cocktail_core_linebox_SpaceInlineBox.prototype = $extend(cocktail_core_linebox_InlineBox.prototype,{
	__class__: cocktail_core_linebox_SpaceInlineBox
});
var cocktail_core_linebox_TextInlineBox = function(elementRenderer,leadedAscent,leadedDescent,text,fontMetrics,fontManager,fontFamily) {
	cocktail_core_linebox_InlineBox.call(this,elementRenderer,leadedAscent,leadedDescent);
	this.isText = true;
	this._text = text;
	this.initNativeTextElement(text,fontManager,elementRenderer.coreStyle,fontFamily);
	this.bounds.width = this._nativeText.get_width();
	this.bounds.height = leadedAscent + leadedDescent;
};
$hxClasses["cocktail.core.linebox.TextInlineBox"] = cocktail_core_linebox_TextInlineBox;
cocktail_core_linebox_TextInlineBox.__name__ = true;
cocktail_core_linebox_TextInlineBox.__super__ = cocktail_core_linebox_InlineBox;
cocktail_core_linebox_TextInlineBox.prototype = $extend(cocktail_core_linebox_InlineBox.prototype,{
	initNativeTextElement: function(text,fontManager,style,fontFamily) {
		var nativeTextElement = fontManager.createNativeTextElement(text,style,fontFamily);
		this._nativeText = new cocktail_port_platform_flash_$player_NativeText(nativeTextElement);
	}
	,initTextBitmap: function() {
		cocktail_core_linebox_TextInlineBox._bitmapBounds.y = this.leadedAscent;
		cocktail_core_linebox_TextInlineBox._bitmapBounds.width = this.bounds.width;
		cocktail_core_linebox_TextInlineBox._bitmapBounds.height = this.bounds.height;
		if(cocktail_core_linebox_TextInlineBox._bitmapBounds.width != 0 && cocktail_core_linebox_TextInlineBox._bitmapBounds.height != 0) this.nativeTextBitmap = this._nativeText.getBitmap(cocktail_core_linebox_TextInlineBox._bitmapBounds);
	}
	,get_nativeTextBitmap: function() {
		if(this.nativeTextBitmap == null) this.initTextBitmap();
		return this.nativeTextBitmap;
	}
	,__class__: cocktail_core_linebox_TextInlineBox
	,__properties__: {get_nativeTextBitmap:"get_nativeTextBitmap"}
});
var cocktail_core_location_Location = function(document) {
	this._document = document;
};
$hxClasses["cocktail.core.location.Location"] = cocktail_core_location_Location;
cocktail_core_location_Location.__name__ = true;
cocktail_core_location_Location.prototype = {
	dispose: function() {
		this._document = null;
		this._url = null;
	}
	,set_href: function(value) {
		this.href = value;
		this._url = cocktail_core_url_URL.fromString(this.href);
		if(this.onLocationChanged != null) this.onLocationChanged();
		return value;
	}
	,__class__: cocktail_core_location_Location
	,__properties__: {set_href:"set_href"}
};
var cocktail_core_multitouch_MultiTouchManager = function() {
	this._touches = [];
};
$hxClasses["cocktail.core.multitouch.MultiTouchManager"] = cocktail_core_multitouch_MultiTouchManager;
cocktail_core_multitouch_MultiTouchManager.__name__ = true;
cocktail_core_multitouch_MultiTouchManager.prototype = {
	dispose: function() {
		this._touches = null;
	}
	,setUpTouchEvent: function(touchEvent,target) {
		var touch = touchEvent.touches.item(0);
		var _g = touchEvent.type;
		switch(_g) {
		case "touchstart":
			this.registerTouch(touch,touchEvent,target);
			break;
		case "touchend":
			this.unregisterTouch(touch,touchEvent);
			break;
		case "touchmove":
			this.updateTouch(touch,touchEvent);
			break;
		}
	}
	,registerTouch: function(touch,touchEvent,target) {
		touch.target = target;
		this.updatePagePosition(touch);
		this._touches.push(touch);
		this.initTouchEvent(touchEvent,this.getTouchesByTarget(target),new cocktail_core_event_TouchList([touch]));
	}
	,unregisterTouch: function(touch,touchEvent) {
		var storedTouch = this.getTouchByIdentifier(touch.identifier);
		this.updateStoredTouch(storedTouch,touch);
		this.initTouchEvent(touchEvent,this.getTouchesByTarget(touch.target),new cocktail_core_event_TouchList([touch]));
		HxOverrides.remove(this._touches,storedTouch);
	}
	,updateTouch: function(touch,touchEvent) {
		var storedTouch = this.getTouchByIdentifier(touch.identifier);
		this.updateStoredTouch(storedTouch,touch);
		this.initTouchEvent(touchEvent,this.getTouchesByTarget(touch.target),new cocktail_core_event_TouchList([touch]));
	}
	,updateStoredTouch: function(storedTouch,touch) {
		storedTouch.clientX = touch.clientX;
		storedTouch.clientY = touch.clientY;
		storedTouch.screenX = touch.screenX;
		storedTouch.screenY = touch.screenY;
		this.updatePagePosition(storedTouch);
	}
	,updatePagePosition: function(touch) {
	}
	,initTouchEvent: function(touchEvent,targetTouches,changedTouches) {
		touchEvent.initTouchEvent(touchEvent.type,true,true,null,0.0,new cocktail_core_event_TouchList(this._touches),targetTouches,changedTouches,false,false,false,false);
	}
	,getTouchesByTarget: function(target) {
		var targetTouches = [];
		var length = this._touches.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var touch = this._touches[i];
			if(touch.target == target) targetTouches.push(touch);
		}
		return new cocktail_core_event_TouchList(targetTouches);
	}
	,getTouchByIdentifier: function(identifier) {
		var length = this._touches.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var touch = this._touches[i];
			if(touch.identifier == identifier) return touch;
		}
		return null;
	}
	,__class__: cocktail_core_multitouch_MultiTouchManager
};
var cocktail_core_parser_DOMParser = function() { };
$hxClasses["cocktail.core.parser.DOMParser"] = cocktail_core_parser_DOMParser;
cocktail_core_parser_DOMParser.__name__ = true;
cocktail_core_parser_DOMParser.parse = function(html,ownerDocument) {
	return cocktail_core_parser_DOMParser.doSetInnerHTML(haxe_xml_Parser.parse(html).firstElement(),ownerDocument);
};
cocktail_core_parser_DOMParser.doSetInnerHTML = function(xml,ownerDocument) {
	var _g = xml.nodeType;
	switch(_g) {
	case 1:
		return ownerDocument.createTextNode((function($this) {
			var $r;
			if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
			$r = xml.nodeValue;
			return $r;
		}(this)));
	case 3:
		return ownerDocument.createComment((function($this) {
			var $r;
			if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
			$r = xml.nodeValue;
			return $r;
		}(this)));
	case 0:
		var htmlElement = ownerDocument.createElement((function($this) {
			var $r;
			if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
			$r = xml.nodeName;
			return $r;
		}(this)));
		var $it0 = (function($this) {
			var $r;
			if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + xml.nodeType);
			$r = HxOverrides.iter(xml.children);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var child = $it0.next();
			var _g1 = child.nodeType;
			switch(_g1) {
			case 1:
				if((function($this) {
					var $r;
					if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + child.nodeType);
					$r = child.nodeValue;
					return $r;
				}(this)) == "") continue;
				break;
			default:
			}
			var childNode = cocktail_core_parser_DOMParser.doSetInnerHTML(child,ownerDocument);
			htmlElement.appendChild(childNode);
		}
		var attributes = xml.attributes();
		while( attributes.hasNext() ) {
			var attribute = attributes.next();
			var value = xml.get(attribute);
			htmlElement.setAttribute(attribute,value);
		}
		return htmlElement;
	default:
	}
	return null;
};
var cocktail_core_parser_TextToken = $hxClasses["cocktail.core.parser.TextToken"] = { __ename__ : true, __constructs__ : ["word","space","tab","lineFeed"] };
cocktail_core_parser_TextToken.word = function(value) { var $x = ["word",0,value]; $x.__enum__ = cocktail_core_parser_TextToken; $x.toString = $estr; return $x; };
cocktail_core_parser_TextToken.space = ["space",1];
cocktail_core_parser_TextToken.space.toString = $estr;
cocktail_core_parser_TextToken.space.__enum__ = cocktail_core_parser_TextToken;
cocktail_core_parser_TextToken.tab = ["tab",2];
cocktail_core_parser_TextToken.tab.toString = $estr;
cocktail_core_parser_TextToken.tab.__enum__ = cocktail_core_parser_TextToken;
cocktail_core_parser_TextToken.lineFeed = ["lineFeed",3];
cocktail_core_parser_TextToken.lineFeed.toString = $estr;
cocktail_core_parser_TextToken.lineFeed.__enum__ = cocktail_core_parser_TextToken;
var cocktail_core_parser_PlainTextParser = function() { };
$hxClasses["cocktail.core.parser.PlainTextParser"] = cocktail_core_parser_PlainTextParser;
cocktail_core_parser_PlainTextParser.__name__ = true;
cocktail_core_parser_PlainTextParser.parse = function(text) {
	var textTokens = [];
	var textToken = null;
	var lastCharacterIsSpace = false;
	var i = 0;
	while(i < text.length) {
		if(text.charAt(i) == "\\") {
			if(i < text.length - 1) {
				if(text.charAt(i + 1) == "n") {
					if(textToken != null) {
						textTokens.push(cocktail_core_parser_TextToken.word(textToken));
						textToken = null;
					}
					textTokens.push(cocktail_core_parser_TextToken.lineFeed);
					i++;
				} else if(text.charAt(i + 1) == "t") {
					if(textToken != null) {
						textTokens.push(cocktail_core_parser_TextToken.word(textToken));
						textToken = null;
					}
					textTokens.push(cocktail_core_parser_TextToken.tab);
					i++;
				}
			}
		} else if(text.charCodeAt(i) == 32) {
			if(textToken != null) {
				textTokens.push(cocktail_core_parser_TextToken.word(textToken));
				textToken = null;
			}
			textTokens.push(cocktail_core_parser_TextToken.space);
			lastCharacterIsSpace = true;
		} else {
			lastCharacterIsSpace = false;
			if(textToken == null) textToken = "";
			textToken += text.charAt(i);
		}
		i++;
	}
	if(textToken != null) textTokens.push(cocktail_core_parser_TextToken.word(textToken));
	return textTokens;
};
cocktail_core_parser_PlainTextParser.applyWhiteSpaceProcessing = function(text,whiteSpace) {
	switch(whiteSpace[1]) {
	case 0:case 8:
		var hasLineFeed = text.indexOf("\n") != -1;
		if(hasLineFeed == true) {
			text = cocktail_core_parser_PlainTextParser.removeControlCharactersSurroundingLineFeed(text);
			text = cocktail_core_parser_PlainTextParser.convertLineFeedsToSpaces(text);
		}
		var hasTab = text.indexOf("\t") != -1;
		if(hasTab == true) text = cocktail_core_parser_PlainTextParser.convertTabToSpaces(text);
		var hasSpace = text.indexOf(" ") != -1;
		if(hasSpace == true) text = cocktail_core_parser_PlainTextParser.concatenateSpaces(text);
		break;
	case 10:
		text = cocktail_core_parser_PlainTextParser.removeControlCharactersSurroundingLineFeed(text);
		text = cocktail_core_parser_PlainTextParser.convertTabToSpaces(text);
		text = cocktail_core_parser_PlainTextParser.concatenateSpaces(text);
		break;
	case 7:case 9:
		break;
	default:
	}
	return text;
};
cocktail_core_parser_PlainTextParser.removeControlCharactersSurroundingLineFeed = function(sourceText) {
	var state = 0;
	var position = 0;
	var c = sourceText.charCodeAt(position);
	var outputText = "";
	var buffer = "";
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 32:case 13:
				buffer += sourceText.charAt(position);
				state = 1;
				break;
			case 10:
				outputText += sourceText.charAt(position);
				state = 2;
				break;
			default:
				outputText += sourceText.charAt(position);
			}
			break;
		case 1:
			switch(c) {
			case 10:
				buffer = "";
				outputText += sourceText.charAt(position);
				state = 2;
				break;
			case 9:case 32:case 13:
				buffer += sourceText.charAt(position);
				break;
			default:
				outputText += buffer;
				buffer = "";
				outputText += sourceText.charAt(position);
				state = 0;
			}
			break;
		case 2:
			switch(c) {
			case 9:case 32:case 13:
				break;
			case 10:
				outputText += sourceText.charAt(position);
				break;
			default:
				outputText += sourceText.charAt(position);
				state = 0;
			}
			break;
		}
		c = StringTools.fastCodeAt(sourceText,++position);
	}
	outputText += buffer;
	return outputText;
};
cocktail_core_parser_PlainTextParser.concatenateSpaces = function(sourceText) {
	var state = 0;
	var position = 0;
	var c = sourceText.charCodeAt(position);
	var outputText = "";
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 32:
				outputText += sourceText.charAt(position);
				state = 3;
				break;
			default:
				outputText += sourceText.charAt(position);
			}
			break;
		case 3:
			switch(c) {
			case 32:
				break;
			default:
				outputText += sourceText.charAt(position);
				state = 0;
			}
			break;
		}
		c = StringTools.fastCodeAt(sourceText,++position);
	}
	return outputText;
};
cocktail_core_parser_PlainTextParser.convertLineFeedsToSpaces = function(sourceText) {
	var er = new EReg("\n","g");
	return er.replace(sourceText," ");
};
cocktail_core_parser_PlainTextParser.convertTabToSpaces = function(sourceText) {
	var er = new EReg("\t","g");
	return er.replace(sourceText," ");
};
cocktail_core_parser_PlainTextParser.applyTextTransform = function(text,textTransform) {
	switch(textTransform[1]) {
	case 16:
		text = text.toUpperCase();
		break;
	case 17:
		text = text.toLowerCase();
		break;
	case 15:
		text = cocktail_core_parser_PlainTextParser.capitalizeText(text);
		break;
	case 18:
		break;
	default:
	}
	return text;
};
cocktail_core_parser_PlainTextParser.capitalizeText = function(sourceText) {
	var state = 4;
	var position = 0;
	var c = sourceText.charCodeAt(position);
	var outputText = "";
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 32:
				outputText += sourceText.charAt(position);
				state = 4;
				break;
			default:
				outputText += sourceText.charAt(position);
			}
			break;
		case 4:
			switch(c) {
			case 32:
				outputText += sourceText.charAt(position);
				break;
			default:
				outputText += sourceText.charAt(position).toUpperCase();
				state = 0;
			}
			break;
		}
		c = StringTools.fastCodeAt(sourceText,++position);
	}
	return outputText;
};
var cocktail_core_renderer_ElementRenderer = function(domNode,coreStyle) {
	cocktail_core_ds_FastNode.call(this);
	this.domNode = domNode;
	this.coreStyle = coreStyle;
	this._hasOwnLayer = false;
	this._wasAbsolutelyPositioned = false;
	this._needsLayerRendererUpdate = true;
	this.bounds = new cocktail_core_geom_RectangleVO();
	this.globalBounds = new cocktail_core_geom_RectangleVO();
	this.staticOrigin = new cocktail_core_geom_PointVO(0.0,0.0);
	this.hitTestingBounds = new cocktail_core_geom_RectangleVO();
	this.inlineBoxes = [];
	this.isBlockContainer = false;
	this.isReplaced = false;
	this.isText = false;
	this.hasLineBoxes = false;
};
$hxClasses["cocktail.core.renderer.ElementRenderer"] = cocktail_core_renderer_ElementRenderer;
cocktail_core_renderer_ElementRenderer.__name__ = true;
cocktail_core_renderer_ElementRenderer.__super__ = cocktail_core_ds_FastNode;
cocktail_core_renderer_ElementRenderer.prototype = $extend(cocktail_core_ds_FastNode.prototype,{
	appendChild: function(newChild) {
		cocktail_core_ds_FastNode.prototype.appendChild.call(this,newChild);
		newChild.addedToRenderingTree();
		this.invalidate();
	}
	,removeChild: function(oldChild) {
		oldChild.removedFromRenderingTree();
		cocktail_core_ds_FastNode.prototype.removeChild.call(this,oldChild);
		this.invalidate();
	}
	,insertBefore: function(newChild,refChild) {
		cocktail_core_ds_FastNode.prototype.insertBefore.call(this,newChild,refChild);
		if(refChild == null) return;
		newChild.addedToRenderingTree();
		this.invalidate();
	}
	,updateHitTestingBounds: function() {
		this.hitTestingBounds.x = this.globalBounds.x;
		this.hitTestingBounds.y = this.globalBounds.y;
		this.hitTestingBounds.width = this.globalBounds.width;
		this.hitTestingBounds.height = this.globalBounds.height;
		if((this.coreStyle.isInline == true || this.isText == true) && this.isReplaced == false) {
			this.hitTestingBounds.x += this.bounds.x;
			this.hitTestingBounds.y += this.bounds.y;
		}
		var scrollOffset = this.layerRenderer.scrollOffset;
		this.hitTestingBounds.x -= scrollOffset.x;
		this.hitTestingBounds.y -= scrollOffset.y;
		var matrix = this.layerRenderer.matrix;
		this.hitTestingBounds.x += matrix.e;
		this.hitTestingBounds.y += matrix.f;
		if(this._hasOwnLayer == true) {
			this.hitTestingBounds.x += this.layerRenderer.scrollLeft;
			this.hitTestingBounds.y += this.layerRenderer.scrollTop;
		}
		cocktail_core_geom_GeomUtils.intersectBounds(this.layerRenderer.clipRect,this.hitTestingBounds,this.hitTestingBounds);
		var child = this.firstChild;
		while(child != null) {
			child.updateHitTestingBounds();
			child = child.nextSibling;
		}
	}
	,render: function(parentGraphicContext,clipRect,scrollOffset) {
	}
	,updateText: function() {
		var child = this.firstChild;
		while(child != null) {
			child.updateText();
			child = child.nextSibling;
		}
	}
	,updateTextDecorations: function(inheritUnderline,inheritOverline,inheritLineThrough,inheritBlink) {
		{
			var _g = this.coreStyle.getComputedOrInitialProperty(86);
			switch(_g[1]) {
			case 4:
				var value = _g[2];
				switch(value[1]) {
				case 84:
					inheritUnderline = true;
					break;
				case 85:
					inheritOverline = true;
					break;
				case 86:
					inheritLineThrough = true;
					break;
				case 87:
					inheritBlink = true;
					break;
				default:
				}
				break;
			case 13:
				var value1 = _g[2];
				var _g2 = 0;
				var _g1 = value1.length;
				while(_g2 < _g1) {
					var i = _g2++;
					{
						var _g3 = value1[i];
						switch(_g3[1]) {
						case 4:
							var value2 = _g3[2];
							switch(value2[1]) {
							case 84:
								inheritUnderline = true;
								break;
							case 85:
								inheritOverline = true;
								break;
							case 86:
								inheritLineThrough = true;
								break;
							case 87:
								inheritBlink = true;
								break;
							default:
							}
							break;
						default:
						}
					}
				}
				break;
			default:
			}
		}
		var child = this.firstChild;
		while(child != null) {
			if(child.coreStyle.isFloat == true || child.coreStyle.isAbsolutelyPositioned == true || child.coreStyle.isInlineBlock == true) child.updateTextDecorations(false,false,false,false); else child.updateTextDecorations(inheritUnderline,inheritOverline,inheritLineThrough,inheritBlink);
			child = child.nextSibling;
		}
	}
	,invalidateLayerRenderer: function() {
		this._needsLayerRendererUpdate = true;
		var _g = this.domNode.get_nodeType();
		switch(_g) {
		case 1:case 3:
			var htmlDocument = this.domNode.ownerDocument;
			htmlDocument.invalidationManager.invalidateLayerTree();
			break;
		}
	}
	,layout: function(forceLayout,layoutState) {
	}
	,setGlobalOrigins: function(addedX,addedY,addedPositionedX,addedPositionedY) {
		if(this.isPositioned() == true) {
			addedPositionedX = this.globalBounds.x;
			addedPositionedY = this.globalBounds.y;
		}
		if(this.isBlockContainer == true) {
			addedX = this.globalBounds.x + this.coreStyle.usedValues.paddingLeft + this.coreStyle.usedValues.borderLeftWidth;
			addedY = this.globalBounds.y + this.coreStyle.usedValues.paddingTop + this.coreStyle.usedValues.borderTopWidth;
		}
		var child = this.firstChild;
		while(child != null) {
			if(child.isAbsolutelyPositioned()) this.setAbsolutelyPositionedGlobalOrigins(child,addedX,addedY,addedPositionedX,addedPositionedY); else {
				child.globalBounds.x = addedX;
				child.globalBounds.y = addedY;
				if(child.isInlineLevel() == false || child.isReplaced == true) {
					child.globalBounds.x += child.bounds.x;
					child.globalBounds.y += child.bounds.y;
				} else if(child.isBlockContainer == true) {
					child.globalBounds.x += child.bounds.x;
					child.globalBounds.y += child.bounds.y;
				}
			}
			child.globalBounds.width = child.bounds.width;
			child.globalBounds.height = child.bounds.height;
			if(child.firstChild != null) child.setGlobalOrigins(addedX,addedY,addedPositionedX,addedPositionedY);
			child = child.nextSibling;
		}
	}
	,setAbsolutelyPositionedGlobalOrigins: function(elementRenderer,addedX,addedY,addedPositionedX,addedPositionedY) {
		var elementRendererCoreStyle = elementRenderer.coreStyle;
		if(elementRendererCoreStyle.isFixedPositioned) {
			if(elementRendererCoreStyle.hasAutoLeft == true && elementRendererCoreStyle.hasAutoRight == true) elementRenderer.globalBounds.x = addedX + elementRenderer.staticOrigin.x; else elementRenderer.globalBounds.x = elementRenderer.bounds.x;
			if(elementRendererCoreStyle.hasAutoTop == true && elementRendererCoreStyle.hasAutoBottom == true) elementRenderer.globalBounds.y = addedY + elementRenderer.staticOrigin.y; else elementRenderer.globalBounds.y = elementRenderer.bounds.y;
		} else {
			if(elementRendererCoreStyle.hasAutoLeft == true && elementRendererCoreStyle.hasAutoRight == true) elementRenderer.globalBounds.x = addedX + elementRenderer.staticOrigin.x; else elementRenderer.globalBounds.x = addedPositionedX + elementRenderer.bounds.x;
			if(elementRendererCoreStyle.hasAutoTop == true && elementRendererCoreStyle.hasAutoBottom == true) elementRenderer.globalBounds.y = addedY + elementRenderer.staticOrigin.y; else elementRenderer.globalBounds.y = addedPositionedY + elementRenderer.bounds.y;
		}
	}
	,getCollapsedTopMargin: function(onlyIfFirstAdjoiningMargin) {
		return 0.0;
	}
	,getCollapsedBottomMargin: function(onlyIfFirstAdjoiningMargin) {
		return 0.0;
	}
	,getNextAdjoiningMargins: function(adjoiningMargins,startWithTopMargin,isFirst) {
	}
	,getPreviousAdjoiningMargins: function(adjoiningMargins,startWithTopMargin,isFirst) {
	}
	,collapseBottomMarginWithLastChildBottomMargin: function() {
		return false;
	}
	,updateLayerRenderer: function() {
		if(this._needsLayerRendererUpdate == true) {
			this._needsLayerRendererUpdate = false;
			if(this.layerRenderer == null) {
				this.attach();
				return;
			} else if(this._hasOwnLayer != this.createOwnLayer()) {
				this.detach();
				this.attach();
				return;
			} else if(this.createOwnLayer() == true) this.parentNode.layerRenderer.insertBefore(this.layerRenderer,this.getNextLayerRenderer(this.parentNode.layerRenderer.rootElementRenderer,this));
		}
		var child = this.firstChild;
		while(child != null) {
			child.updateLayerRenderer();
			child = child.nextSibling;
		}
	}
	,attach: function() {
		this.attachLayer();
		var child = this.firstChild;
		while(child != null) {
			child.attach();
			child = child.nextSibling;
		}
	}
	,detach: function() {
		var child = this.firstChild;
		while(child != null) {
			child.detach();
			child = child.nextSibling;
		}
		if(this.layerRenderer != null) this.detachLayer();
	}
	,updateAnonymousBlock: function() {
	}
	,updateInlineBoxes: function() {
		var child = this.firstChild;
		while(child != null) {
			child.updateInlineBoxes();
			child = child.nextSibling;
		}
	}
	,addedToRenderingTree: function() {
		this.containingBlock = this.getContainingBlock();
		this.registerWithContaininingBlock();
		this.invalidateLayerRenderer();
	}
	,removedFromRenderingTree: function() {
		this.detach();
		this.unregisterWithContainingBlock();
		this.containingBlock = null;
	}
	,attachLayer: function() {
		if(this.parentNode != null) this.createLayer(this.parentNode.layerRenderer);
	}
	,detachLayer: function() {
		if(this._hasOwnLayer == true) {
			this.parentNode.layerRenderer.removeChild(this.layerRenderer);
			this._hasOwnLayer = false;
			this.layerRenderer.dispose();
		}
		this.layerRenderer = null;
	}
	,registerWithContaininingBlock: function() {
		if(this.isAbsolutelyPositioned() == true) {
			this.containingBlock.addAbsolutelyPositionedChildren(this);
			this._wasAbsolutelyPositioned = true;
		}
	}
	,unregisterWithContainingBlock: function() {
		if(this._wasAbsolutelyPositioned == true) {
			this.containingBlock.removeAbsolutelyPositionedChild(this);
			this._wasAbsolutelyPositioned = false;
		}
	}
	,getLeadedAscent: function() {
		var fontMetrics = this.coreStyle.fontMetrics;
		var ascent = fontMetrics.ascent;
		var descent = fontMetrics.descent;
		var lineHeight = this.coreStyle.usedValues.lineHeight;
		var leading = lineHeight - (ascent + descent);
		var leadedAscent = ascent + leading / 2;
		var leadedDescent = descent + leading / 2;
		return leadedAscent;
	}
	,getLeadedDescent: function() {
		var fontMetrics = this.coreStyle.fontMetrics;
		var ascent = fontMetrics.ascent;
		var descent = fontMetrics.descent;
		var lineHeight = this.coreStyle.usedValues.lineHeight;
		var leading = lineHeight - (ascent + descent);
		var leadedAscent = ascent + leading / 2;
		var leadedDescent = descent + leading / 2;
		return leadedDescent;
	}
	,establishesNewBlockFormattingContext: function() {
		return false;
	}
	,canHaveClearance: function() {
		return false;
	}
	,isFloat: function() {
		return false;
	}
	,isPositioned: function() {
		return false;
	}
	,isAbsolutelyPositioned: function() {
		return false;
	}
	,isInlineLevel: function() {
		return false;
	}
	,isRelativePositioned: function() {
		return false;
	}
	,childrenInline: function() {
		return false;
	}
	,isAnonymousBlockBox: function() {
		return false;
	}
	,hasCSSTransform: function() {
		return false;
	}
	,isVisible: function() {
		return true;
	}
	,createOwnLayer: function() {
		return false;
	}
	,createLayer: function(parentLayer) {
		if(this.createOwnLayer() == true) {
			this.doCreateLayer();
			parentLayer.insertBefore(this.layerRenderer,this.getNextLayerRenderer(parentLayer.rootElementRenderer,this));
			this._hasOwnLayer = true;
		} else this.layerRenderer = parentLayer;
	}
	,doCreateLayer: function() {
		this.layerRenderer = new cocktail_core_layer_LayerRenderer(this);
	}
	,getNextLayerRenderer: function(rootElementRenderer,referenceElementRenderer) {
		var nextElementRendererWithOwnLayerRenderer = this.getNextElementRendererWithOwnLayerRenderer(rootElementRenderer,referenceElementRenderer);
		if(nextElementRendererWithOwnLayerRenderer == null) return null; else if(nextElementRendererWithOwnLayerRenderer == referenceElementRenderer) return null; else return nextElementRendererWithOwnLayerRenderer.layerRenderer;
	}
	,getNextElementRendererWithOwnLayerRenderer: function(rootElementRenderer,referenceElementRenderer) {
		var foundSelf = false;
		var child = rootElementRenderer.firstChild;
		while(child != null) {
			if(child == referenceElementRenderer) foundSelf = true; else if(child.createOwnLayer() == true && child.layerRenderer != null) {
				if(foundSelf == true) return child;
			} else if(child.firstChild != null) {
				var nextElementRendererWithOwnLayerRenderer = this.getNextElementRendererWithOwnLayerRenderer(child,referenceElementRenderer);
				if(nextElementRendererWithOwnLayerRenderer != null) {
					if(nextElementRendererWithOwnLayerRenderer == referenceElementRenderer) foundSelf = true; else return nextElementRendererWithOwnLayerRenderer;
				}
			}
			child = child.nextSibling;
		}
		if(foundSelf == true) return referenceElementRenderer; else return null;
	}
	,getContainingBlock: function() {
		if(this.isAbsolutelyPositioned() == true) {
			if(this.coreStyle.isFixedPositioned == true) return this.getInitialContainingBlock(); else return this.getFirstPositionedAncestor();
		} else return this.getFirstBlockContainer();
	}
	,getFirstPositionedAncestor: function() {
		var parent = this.parentNode;
		while(parent.isPositioned() == false) {
			if(parent.parentNode == null) break;
			parent = parent.parentNode;
		}
		return parent;
	}
	,getInitialContainingBlock: function() {
		return this.domNode.ownerDocument.documentElement.elementRenderer;
	}
	,getFirstBlockContainer: function() {
		var parent = this.parentNode;
		while(parent.isBlockContainer == false) parent = parent.parentNode;
		return parent;
	}
	,invalidate: function() {
	}
	,invalidateStyle: function(styleIndex) {
	}
	,invalidateRendering: function() {
	}
	,get_previousNormalFlowSibling: function() {
		var previousElementRendererSibling = this.previousSibling;
		while(previousElementRendererSibling != null) {
			if(previousElementRendererSibling.isFloat() == false) {
				if(previousElementRendererSibling.isAbsolutelyPositioned() == false) return previousElementRendererSibling;
			}
			previousElementRendererSibling = previousElementRendererSibling.previousSibling;
		}
		return null;
	}
	,get_nextNormalFlowSibling: function() {
		var nextElementRendererSibling = this.nextSibling;
		while(nextElementRendererSibling != null) {
			if(nextElementRendererSibling.isFloat() == false) {
				if(nextElementRendererSibling.isAbsolutelyPositioned() == false) return nextElementRendererSibling;
			}
			nextElementRendererSibling = nextElementRendererSibling.nextSibling;
		}
		return null;
	}
	,get_firstNormalFlowChild: function() {
		var firstElementRendererChild = this.firstChild;
		if(firstElementRendererChild != null) {
			if(firstElementRendererChild.isFloat() == false) {
				if(firstElementRendererChild.isAbsolutelyPositioned() == false) return firstElementRendererChild;
			}
			return firstElementRendererChild.get_nextNormalFlowSibling();
		}
		return null;
	}
	,get_lastNormalFlowChild: function() {
		var lastElementRendererChild = this.lastChild;
		if(lastElementRendererChild != null) {
			if(lastElementRendererChild.isFloat() == false) {
				if(lastElementRendererChild.isAbsolutelyPositioned() == false) return lastElementRendererChild;
			}
			return lastElementRendererChild.get_previousNormalFlowSibling();
		}
		return null;
	}
	,__class__: cocktail_core_renderer_ElementRenderer
	,__properties__: {get_lastNormalFlowChild:"get_lastNormalFlowChild",get_firstNormalFlowChild:"get_firstNormalFlowChild",get_nextNormalFlowSibling:"get_nextNormalFlowSibling",get_previousNormalFlowSibling:"get_previousNormalFlowSibling"}
});
var cocktail_core_renderer_InvalidatingElementRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_ElementRenderer.call(this,domNode,coreStyle);
	this._needsLayout = true;
	this._childrenNeedLayout = true;
	this._positionedChildrenNeedLayout = true;
};
$hxClasses["cocktail.core.renderer.InvalidatingElementRenderer"] = cocktail_core_renderer_InvalidatingElementRenderer;
cocktail_core_renderer_InvalidatingElementRenderer.__name__ = true;
cocktail_core_renderer_InvalidatingElementRenderer.__super__ = cocktail_core_renderer_ElementRenderer;
cocktail_core_renderer_InvalidatingElementRenderer.prototype = $extend(cocktail_core_renderer_ElementRenderer.prototype,{
	addedToRenderingTree: function() {
		cocktail_core_renderer_ElementRenderer.prototype.addedToRenderingTree.call(this);
		this.invalidateLayout();
	}
	,invalidate: function() {
		this._childrenNeedLayout = true;
		this._positionedChildrenNeedLayout = true;
		this.invalidateLayoutAndRendering();
	}
	,invalidateRendering: function() {
		if(this.layerRenderer != null) this.layerRenderer.invalidateRendering();
	}
	,invalidateStyle: function(styleIndex) {
		switch(styleIndex) {
		case 22:case 23:case 21:case 24:
			if(this.isAbsolutelyPositioned() == true) {
				this.invalidateLayoutAndRendering();
				this.invalidateContainingBlock(styleIndex);
			} else this.invalidateRendering();
			break;
		case 40:case 37:case 34:case 38:case 36:case 35:case 43:case 42:case 45:
			this.invalidateText();
			this.invalidateLayoutAndRendering();
			this.invalidateContainingBlock(styleIndex);
			break;
		case 53:case 49:
			this.invalidateRendering();
			break;
		case 25:case 31:case 26:case 30:case 28:case 27:case 29:
			this.invalidateRendering();
			break;
		default:
			this.invalidateLayoutAndRendering();
			this.invalidateContainingBlock(styleIndex);
		}
	}
	,invalidateContainingBlock: function(styleIndex) {
		if(this.containingBlock == null) return;
		if(this.isPositioned() == true && this.isRelativePositioned() == false) this.containingBlock.invalidatedChildStyle(styleIndex); else this.containingBlock.invalidatedPositionedChildStyle(styleIndex);
	}
	,invalidatedChildStyle: function(styleIndex) {
		switch(styleIndex) {
		case 25:case 31:case 26:case 30:case 28:case 27:case 29:
			break;
		default:
			this._childrenNeedLayout = true;
		}
	}
	,invalidatedPositionedChildStyle: function(styleIndex) {
		switch(styleIndex) {
		case 25:case 31:case 26:case 30:case 28:case 27:case 29:
			break;
		default:
			this._positionedChildrenNeedLayout = true;
		}
	}
	,invalidateLayout: function() {
		this._needsLayout = true;
		var htmlDocument = this.domNode.ownerDocument;
		if(htmlDocument != null) htmlDocument.invalidationManager.invalidateLayout(false);
	}
	,invalidateLayoutAndRendering: function() {
		this._needsLayout = true;
		var htmlDocument = this.domNode.ownerDocument;
		htmlDocument.invalidationManager.invalidateLayout(false);
		if(this.layerRenderer != null) this.layerRenderer.invalidateRendering();
	}
	,invalidateText: function() {
		var child = this.firstChild;
		while(child != null) {
			if(child.isText == true) child.invalidate();
			child = child.nextSibling;
		}
	}
	,__class__: cocktail_core_renderer_InvalidatingElementRenderer
});
var cocktail_core_renderer_BoxRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_InvalidatingElementRenderer.call(this,domNode,coreStyle);
	this._containerBlockData = new cocktail_core_layout_ContainingBlockVO(0.0,false,0.0,false);
	this._viewportData = new cocktail_core_layout_ContainingBlockVO(0.0,false,0.0,false);
	this._backgroundAndBorderBounds = new cocktail_core_geom_RectangleVO();
};
$hxClasses["cocktail.core.renderer.BoxRenderer"] = cocktail_core_renderer_BoxRenderer;
cocktail_core_renderer_BoxRenderer.__name__ = true;
cocktail_core_renderer_BoxRenderer.__super__ = cocktail_core_renderer_InvalidatingElementRenderer;
cocktail_core_renderer_BoxRenderer.prototype = $extend(cocktail_core_renderer_InvalidatingElementRenderer.prototype,{
	updateInlineBoxes: function() {
		this.inlineBoxes = [];
		var inlineBox = new cocktail_core_linebox_EmbeddedInlineBox(this,this.getLeadedAscent(),this.getLeadedDescent());
		this.inlineBoxes.push(inlineBox);
		cocktail_core_renderer_InvalidatingElementRenderer.prototype.updateInlineBoxes.call(this);
	}
	,render: function(parentGraphicContext,clipRect,scrollOffset) {
		if(this.coreStyle.isVisible == true) {
			cocktail_core_renderer_BoxRenderer._intersectBounds.x = this.hitTestingBounds.x;
			cocktail_core_renderer_BoxRenderer._intersectBounds.y = this.hitTestingBounds.y;
			cocktail_core_renderer_BoxRenderer._intersectBounds.width = this.hitTestingBounds.width;
			cocktail_core_renderer_BoxRenderer._intersectBounds.height = this.hitTestingBounds.height;
			cocktail_core_geom_GeomUtils.intersectBounds(cocktail_core_renderer_BoxRenderer._intersectBounds,clipRect,cocktail_core_renderer_BoxRenderer._intersectBounds);
			if(cocktail_core_renderer_BoxRenderer._intersectBounds.width != 0 && cocktail_core_renderer_BoxRenderer._intersectBounds.height != 0) this.renderSelf(parentGraphicContext,clipRect,scrollOffset);
		}
		if(this.firstChild != null) this.renderChildren(parentGraphicContext,clipRect,scrollOffset);
	}
	,renderSelf: function(graphicContext,clipRect,scrollOffset) {
		if(this.coreStyle.hasBackgroundImage == true || this.coreStyle.hasBackgroundColor == true) this.renderBackground(graphicContext,clipRect,scrollOffset);
		this.renderBorder(graphicContext,clipRect,scrollOffset);
		this.renderOutline(graphicContext,clipRect,scrollOffset);
	}
	,renderBackground: function(graphicContext,clipRect,scrollOffset) {
		var backgroundBounds = this.getBackgroundAndBordersBounds(scrollOffset);
		cocktail_core_graphics_BackgroundDrawer.render(graphicContext,backgroundBounds,this.coreStyle,this,clipRect);
	}
	,renderBorder: function(graphicsContext,clipRect,scrollOffset) {
		var borderBounds = this.getBackgroundAndBordersBounds(scrollOffset);
		cocktail_core_graphics_BorderDrawer.draw(graphicsContext,borderBounds,this.coreStyle,clipRect);
	}
	,renderOutline: function(graphicsContext,clipRect,scrollOffset) {
		var outlineBounds = this.getOutlineBounds(scrollOffset);
		cocktail_core_graphics_BorderDrawer.drawOutline(graphicsContext,outlineBounds,this.coreStyle,clipRect);
	}
	,renderChildren: function(graphicContext,clipRect,scrollOffset) {
	}
	,layout: function(forceLayout,layoutState) {
		this.layoutSelfIfNeeded(forceLayout);
	}
	,layoutSelfIfNeeded: function(forceLayout) {
		if(this._needsLayout == false && forceLayout == false) return;
		var containingBlockData = this.containingBlock.getContainerBlockData();
		if(containingBlockData.isHeightAuto == true) {
			if(this.coreStyle.isAbsolutelyPositioned == false) {
				var _g = this.coreStyle.getTransitionablePropertyValue(16);
				switch(_g[1]) {
				case 2:
					var value = _g[2];
					containingBlockData.height = this.getHeightOfFirstParentWithNotAutoHeight();
					break;
				default:
				}
			}
		}
		if(this.coreStyle.isAbsolutelyPositioned == true) {
			if(this.containingBlock.isBlockContainer == true) {
				var containingBlockUsedValues = this.containingBlock.coreStyle.usedValues;
				containingBlockData.height += containingBlockUsedValues.paddingTop + containingBlockUsedValues.paddingBottom;
				containingBlockData.width += containingBlockUsedValues.paddingLeft + containingBlockUsedValues.paddingRight;
			}
		}
		if(this.coreStyle.isBlock == true) {
			if(this.childrenInline() == true) this.updateUsedTextIndent(containingBlockData.width);
		}
		this.computeBoxModelStyles(containingBlockData);
		var usedValues = this.coreStyle.usedValues;
		this.bounds.width = usedValues.width + usedValues.paddingLeft + usedValues.paddingRight + usedValues.borderLeftWidth + usedValues.borderRightWidth;
		this.bounds.height = usedValues.height + usedValues.paddingTop + usedValues.paddingBottom + usedValues.borderTopWidth + usedValues.borderBottomWidth;
		this._needsLayout = false;
	}
	,updateUsedTextIndent: function(containingBlockWidth) {
		{
			var _g = this.coreStyle.getTransitionablePropertyValue(47);
			switch(_g[1]) {
			case 18:
				var value = _g[2];
				this.coreStyle.usedValues.textIndent = value;
				break;
			case 2:
				var value1 = _g[2];
				this.coreStyle.usedValues.textIndent = containingBlockWidth * (value1 * 0.01);
				break;
			default:
			}
		}
	}
	,getHeightOfFirstParentWithNotAutoHeight: function() {
		var parent = this.parentNode;
		while(parent != null) {
			if(parent.getContainerBlockData().isHeightAuto == false) return parent.coreStyle.usedValues.height;
			parent = parent.parentNode;
		}
		return 0;
	}
	,computeBoxModelStyles: function(containingBlockDimensions) {
		var htmlDocument = this.domNode.ownerDocument;
		var boxComputer = htmlDocument.layoutManager.getBoxStylesComputer(this);
		boxComputer.measure(this.coreStyle,containingBlockDimensions);
	}
	,getCollapsedTopMargin: function(onlyIfFirstAdjoiningMargin) {
		return this.doGetCollapsedMargin(true,onlyIfFirstAdjoiningMargin);
	}
	,getCollapsedBottomMargin: function(onlyIfFirstAdjoiningMargin) {
		return this.doGetCollapsedMargin(false,onlyIfFirstAdjoiningMargin);
	}
	,doGetCollapsedMargin: function(isTopMargin,onlyIfFirstAdjoiningMargin) {
		this.layoutSelfIfNeeded(false);
		var previousAdjoiningMargins = [];
		this.getPreviousAdjoiningMargins(previousAdjoiningMargins,isTopMargin,true);
		var nextAdjoiningMargins = [];
		this.getNextAdjoiningMargins(nextAdjoiningMargins,isTopMargin,true);
		if(nextAdjoiningMargins.length == 0 && previousAdjoiningMargins.length == 0) {
			if(isTopMargin == true) return this.coreStyle.usedValues.marginTop; else return this.coreStyle.usedValues.marginBottom;
		} else if(onlyIfFirstAdjoiningMargin == false || previousAdjoiningMargins.length == 0) {
			var adjoiningMargins = nextAdjoiningMargins.concat(previousAdjoiningMargins);
			if(isTopMargin == true) adjoiningMargins.push(this.coreStyle.usedValues.marginTop); else adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
			return this.getCollapsedMargin(adjoiningMargins);
		} else return 0;
	}
	,getNextAdjoiningMargins: function(adjoiningMargins,startWithTopMargin,isFirst) {
		this.layoutSelfIfNeeded(false);
		if(startWithTopMargin == true) {
			if(this.collapseTopMarginWithFirstChildTopMargin() == true) {
				if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
				this.get_firstNormalFlowChild().getNextAdjoiningMargins(adjoiningMargins,true,false);
			} else if(this.collapseTopMarginWithBottomMargin() == true) {
				if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
				this.getNextAdjoiningMargins(adjoiningMargins,false,false);
			} else if(this.collapseTopMarginWithParentTopMargin() == true) {
				if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
			} else if(this.collapseTopMarginWithPreviousSiblingBottomMargin() == true) {
				if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
			}
		} else if(this.collapseBottomMarginWithNextSiblingTopMargin() == true) {
			if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
			this.get_nextNormalFlowSibling().getNextAdjoiningMargins(adjoiningMargins,true,false);
		} else if(this.collapseBottomMarginWithParentBottomMargin() == true) {
			if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
			this.parentNode.getNextAdjoiningMargins(adjoiningMargins,false,false);
		} else if(this.collapseBottomMarginWithLastChildBottomMargin() == true) {
			if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
		} else if(this.collapseTopMarginWithBottomMargin() == true) {
			if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
		}
	}
	,getPreviousAdjoiningMargins: function(adjoiningMargins,startWithTopMargin,isFirst) {
		this.layoutSelfIfNeeded(false);
		if(startWithTopMargin == true) {
			if(this.collapseTopMarginWithPreviousSiblingBottomMargin() == true) {
				if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
				this.get_previousNormalFlowSibling().getPreviousAdjoiningMargins(adjoiningMargins,false,false);
			} else if(this.collapseTopMarginWithParentTopMargin() == true) {
				if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
				this.parentNode.getPreviousAdjoiningMargins(adjoiningMargins,true,false);
			} else if(this.collapseTopMarginWithBottomMargin() == true) {
				if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
			} else if(this.collapseTopMarginWithFirstChildTopMargin() == true) {
				if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
			}
		} else if(this.collapseBottomMarginWithLastChildBottomMargin() == true) {
			if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
			this.get_lastNormalFlowChild().getPreviousAdjoiningMargins(adjoiningMargins,false,false);
		} else if(this.collapseTopMarginWithBottomMargin() == true) {
			if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
			this.getPreviousAdjoiningMargins(adjoiningMargins,true,false);
		} else if(this.collapseBottomMarginWithParentBottomMargin() == true) {
			if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
		} else if(this.collapseBottomMarginWithNextSiblingTopMargin() == true) {
			if(isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
		}
	}
	,getCollapsedMargin: function(adjoiningMargins) {
		var maximumPositiveMargin = 0.0;
		var maximumNegativeMargin = 0.0;
		var length = adjoiningMargins.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var adjoiningMargin = adjoiningMargins[i];
			if(adjoiningMargin > maximumPositiveMargin) maximumPositiveMargin = adjoiningMargin; else if(adjoiningMargin < maximumNegativeMargin) maximumNegativeMargin = adjoiningMargin;
		}
		return maximumPositiveMargin - Math.abs(maximumNegativeMargin);
	}
	,collapseTopMarginWithParentTopMargin: function() {
		if(this.parentNode == null) return false;
		if(this.get_previousNormalFlowSibling() != null) return false;
		if(this.parentNode.establishesNewBlockFormattingContext() == true) return false;
		if(this.parentNode.coreStyle.usedValues.paddingTop != 0) return false;
		if(this.parentNode.coreStyle.usedValues.borderTopWidth != 0) return false;
		return true;
	}
	,collapseBottomMarginWithParentBottomMargin: function() {
		if(this.parentNode == null) return false;
		if(this.get_nextNormalFlowSibling() != null) return false;
		if(this.parentNode.establishesNewBlockFormattingContext() == true) return false;
		if(this.parentNode.coreStyle.usedValues.paddingBottom != 0) return false;
		if(this.parentNode.coreStyle.usedValues.borderBottomWidth != 0) return false;
		return true;
	}
	,collapseTopMarginWithPreviousSiblingBottomMargin: function() {
		if(this.get_previousNormalFlowSibling() == null) return false;
		return true;
	}
	,collapseBottomMarginWithNextSiblingTopMargin: function() {
		if(this.get_nextNormalFlowSibling() == null) return false;
		return true;
	}
	,collapseTopMarginWithFirstChildTopMargin: function() {
		return false;
	}
	,collapseTopMarginWithBottomMargin: function() {
		if(this.get_firstNormalFlowChild() != null) {
			if(this.hasZeroHeightChildren() == false) return false;
		}
		if(this.coreStyle.usedValues.paddingTop != 0 || this.coreStyle.usedValues.paddingBottom != 0) return false;
		if(this.coreStyle.usedValues.borderTopWidth != 0 || this.coreStyle.usedValues.borderBottomWidth != 0) return false;
		if(this.bounds.height != 0) return false;
		if(this.establishesNewBlockFormattingContext() == true) return false;
		return true;
	}
	,hasZeroHeightChildren: function() {
		return false;
	}
	,isFloat: function() {
		return this.coreStyle.isFloat;
	}
	,canHaveClearance: function() {
		return this.coreStyle.canHaveClearance;
	}
	,isPositioned: function() {
		return this.coreStyle.isPositioned;
	}
	,isAbsolutelyPositioned: function() {
		return this.coreStyle.isAbsolutelyPositioned;
	}
	,isRelativePositioned: function() {
		return this.coreStyle.isRelativePositioned;
	}
	,isInlineLevel: function() {
		return this.coreStyle.isInlineLevel;
	}
	,createOwnLayer: function() {
		if(this.coreStyle.isPositioned == true) return true; else if(this.coreStyle.isTransparent == true) return true; else if(this.coreStyle.isTransformed == true) return true;
		return false;
	}
	,hasCSSTransform: function() {
		return this.coreStyle.hasCSSTransform;
	}
	,isVisible: function() {
		return this.coreStyle.isVisible;
	}
	,getBackgroundAndBordersBounds: function(scrollOffset) {
		this._backgroundAndBorderBounds.x = this.globalBounds.x - scrollOffset.x;
		this._backgroundAndBorderBounds.y = this.globalBounds.y - scrollOffset.y;
		this._backgroundAndBorderBounds.width = this.globalBounds.width;
		this._backgroundAndBorderBounds.height = this.globalBounds.height;
		return this._backgroundAndBorderBounds;
	}
	,getOutlineBounds: function(scrollOffset) {
		var outlineBounds = this.getBackgroundAndBordersBounds(scrollOffset);
		outlineBounds.x -= this.coreStyle.usedValues.outlineWidth;
		outlineBounds.y -= this.coreStyle.usedValues.outlineWidth;
		outlineBounds.width += this.coreStyle.usedValues.outlineWidth * 2;
		outlineBounds.height += this.coreStyle.usedValues.outlineWidth * 2;
		return outlineBounds;
	}
	,getContainerBlockData: function() {
		this._containerBlockData.width = this.coreStyle.usedValues.width;
		this._containerBlockData.isWidthAuto = this.coreStyle.hasAutoWidth;
		this._containerBlockData.height = this.coreStyle.usedValues.height;
		this._containerBlockData.isHeightAuto = this.coreStyle.hasAutoHeight;
		return this._containerBlockData;
	}
	,getViewportData: function() {
		var htmlDocument = this.domNode.ownerDocument;
		var width = htmlDocument.getViewportWidth();
		var height = htmlDocument.getViewportHeight();
		this._viewportData.width = width;
		this._viewportData.height = height;
		this._viewportData.isHeightAuto = false;
		this._viewportData.isWidthAuto = false;
		return this._viewportData;
	}
	,__class__: cocktail_core_renderer_BoxRenderer
});
var cocktail_core_renderer_FlowBoxRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_BoxRenderer.call(this,domNode,coreStyle);
	this._absolutelyPositionedChildren = [];
	this._childStaticOrigin = new cocktail_core_geom_PointVO(0,0);
};
$hxClasses["cocktail.core.renderer.FlowBoxRenderer"] = cocktail_core_renderer_FlowBoxRenderer;
cocktail_core_renderer_FlowBoxRenderer.__name__ = true;
cocktail_core_renderer_FlowBoxRenderer.__super__ = cocktail_core_renderer_BoxRenderer;
cocktail_core_renderer_FlowBoxRenderer.prototype = $extend(cocktail_core_renderer_BoxRenderer.prototype,{
	renderInlineChildren: function(rootRenderer,referenceLayer,graphicContext,clipRect,scrollOffset) {
		var child = rootRenderer.firstChild;
		while(child != null) {
			if(child.layerRenderer == referenceLayer) {
				if(child.coreStyle.isFloat == false) {
					child.render(graphicContext,clipRect,scrollOffset);
					if(child.firstChild != null && child.establishesNewBlockFormattingContext() == false) this.renderInlineChildren(child,referenceLayer,graphicContext,clipRect,scrollOffset);
				}
			}
			child = child.nextSibling;
		}
	}
	,addAbsolutelyPositionedChildren: function(element) {
		this._absolutelyPositionedChildren.push(element);
	}
	,removeAbsolutelyPositionedChild: function(element) {
		HxOverrides.remove(this._absolutelyPositionedChildren,element);
	}
	,layout: function(forceLayout,layoutState) {
		cocktail_core_renderer_BoxRenderer.prototype.layout.call(this,forceLayout,layoutState);
		if(this.firstChild != null) this.layoutChildren(layoutState);
		if(this.isPositioned() == true) {
			if(this._absolutelyPositionedChildren.length > 0) this.layoutAbsolutelyPositionedChildren(layoutState);
		}
	}
	,layoutChildren: function(layoutState) {
	}
	,layoutAbsolutelyPositionedChildren: function(layoutState) {
		var containerBlockData = this.getContainerBlockData();
		var viewportData = this.getViewportData();
		var length = this._absolutelyPositionedChildren.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			this._absolutelyPositionedChildren[i].layout(true,layoutState);
			this.layoutPositionedChild(this._absolutelyPositionedChildren[i],containerBlockData,viewportData);
		}
	}
	,layoutPositionedChild: function(elementRenderer,firstPositionedAncestorData,viewportData) {
		var coreStyle = elementRenderer.coreStyle;
		if(coreStyle.isFixedPositioned == true) this.doLayoutPositionedChild(elementRenderer,viewportData,false); else this.doLayoutPositionedChild(elementRenderer,firstPositionedAncestorData,true);
	}
	,doLayoutPositionedChild: function(elementRenderer,containingBlockData,isAbsolutelyPositioned) {
		var elementCoreStyle = elementRenderer.coreStyle;
		if(elementCoreStyle.hasAutoLeft == false) elementRenderer.bounds.x = this.getLeftOffset(elementRenderer,isAbsolutelyPositioned); else if(elementCoreStyle.hasAutoRight == false) elementRenderer.bounds.x = this.getRightOffset(elementRenderer,containingBlockData.width,isAbsolutelyPositioned); else elementRenderer.staticOrigin.x = this.getStaticPosition(elementRenderer).x;
		if(elementCoreStyle.hasAutoTop == false) elementRenderer.bounds.y = this.getTopOffset(elementRenderer,isAbsolutelyPositioned); else if(elementCoreStyle.hasAutoBottom == false) elementRenderer.bounds.y = this.getBottomOffset(elementRenderer,containingBlockData.height,isAbsolutelyPositioned); else elementRenderer.staticOrigin.y = this.getStaticPosition(elementRenderer).y;
	}
	,getLeftOffset: function(elementRenderer,isAbsolutelyPositioned) {
		var usedValues = elementRenderer.coreStyle.usedValues;
		var leftOffset = usedValues.left + usedValues.marginLeft;
		if(isAbsolutelyPositioned == true) leftOffset -= this.coreStyle.usedValues.paddingLeft - this.coreStyle.usedValues.borderLeftWidth;
		return leftOffset;
	}
	,getRightOffset: function(elementRenderer,containingHTMLElementWidth,isAbsolutelyPositioned) {
		var usedValues = elementRenderer.coreStyle.usedValues;
		var rightOffset = containingHTMLElementWidth - usedValues.width - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.right - usedValues.marginRight;
		if(isAbsolutelyPositioned == true) rightOffset += this.coreStyle.usedValues.paddingRight + this.coreStyle.usedValues.borderRightWidth;
		return rightOffset;
	}
	,getTopOffset: function(elementRenderer,isAbsolutelyPositioned) {
		var usedValues = elementRenderer.coreStyle.usedValues;
		var topOffset = usedValues.top + usedValues.marginTop;
		if(isAbsolutelyPositioned == true) topOffset -= this.coreStyle.usedValues.paddingTop - this.coreStyle.usedValues.borderTopWidth;
		return topOffset;
	}
	,getBottomOffset: function(elementRenderer,containingHTMLElementHeight,isAbsolutelyPositioned) {
		var usedValues = elementRenderer.coreStyle.usedValues;
		var bottomOffset = containingHTMLElementHeight - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.bottom - usedValues.marginBottom;
		if(isAbsolutelyPositioned == true) bottomOffset += this.coreStyle.usedValues.paddingBottom + this.coreStyle.usedValues.borderBottomWidth;
		return bottomOffset;
	}
	,getStaticPosition: function(elementRenderer) {
		var staticContainingBlock = elementRenderer.parentNode;
		while(staticContainingBlock != null) {
			if(staticContainingBlock.isBlockContainer == true) break;
			staticContainingBlock = staticContainingBlock.parentNode;
		}
		if(staticContainingBlock.childrenInline() == false) {
			var previousNormalFlowSibling = elementRenderer.get_previousNormalFlowSibling();
			if(previousNormalFlowSibling == null) {
				this._childStaticOrigin.x = elementRenderer.coreStyle.usedValues.marginLeft;
				this._childStaticOrigin.y = elementRenderer.coreStyle.usedValues.marginTop;
			} else {
				this._childStaticOrigin.x = elementRenderer.coreStyle.usedValues.marginLeft;
				this._childStaticOrigin.y = previousNormalFlowSibling.bounds.y + previousNormalFlowSibling.bounds.height + previousNormalFlowSibling.coreStyle.usedValues.marginBottom;
				this._childStaticOrigin.y += elementRenderer.coreStyle.usedValues.marginTop;
			}
		} else {
			var previousNormalFlowSibling1 = elementRenderer.get_previousNormalFlowSibling();
			if(previousNormalFlowSibling1 == null) {
				var parent = elementRenderer.parentNode;
				if(parent.isBlockContainer == true) {
					this._childStaticOrigin.x = elementRenderer.coreStyle.usedValues.marginLeft;
					this._childStaticOrigin.y = elementRenderer.coreStyle.usedValues.marginTop;
				} else {
					var lastInlineBox = parent.inlineBoxes[parent.inlineBoxes.length - 1];
					this._childStaticOrigin = this.getPositionAfterInlineBox(lastInlineBox,elementRenderer,this._childStaticOrigin);
				}
			} else {
				var lastInlineBox1 = previousNormalFlowSibling1.inlineBoxes[previousNormalFlowSibling1.inlineBoxes.length - 1];
				this._childStaticOrigin = this.getPositionAfterInlineBox(lastInlineBox1,elementRenderer,this._childStaticOrigin);
			}
		}
		return this._childStaticOrigin;
	}
	,getPositionAfterInlineBox: function(inlineBox,elementRenderer,staticOrigin) {
		if(inlineBox.lineBox == null) {
			staticOrigin.x = elementRenderer.coreStyle.usedValues.marginLeft;
			staticOrigin.y = elementRenderer.coreStyle.usedValues.marginTop;
		} else {
			staticOrigin.x = inlineBox.bounds.x + inlineBox.lineBox.bounds.x + inlineBox.bounds.width + inlineBox.marginLeft + inlineBox.marginRight;
			staticOrigin.x += elementRenderer.coreStyle.usedValues.marginLeft;
			staticOrigin.y = inlineBox.bounds.y + inlineBox.lineBox.bounds.y;
			staticOrigin.y += elementRenderer.coreStyle.usedValues.marginTop;
		}
		return staticOrigin;
	}
	,__class__: cocktail_core_renderer_FlowBoxRenderer
});
var cocktail_core_renderer_BlockBoxRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_FlowBoxRenderer.call(this,domNode,coreStyle);
	this._lineBoxPosition = new cocktail_core_geom_PointVO(0,0);
	this._childPosition = new cocktail_core_geom_PointVO(0,0);
	this.lineBoxes = [];
	this.floatsManager = new cocktail_core_floats_FloatsManager();
	this._inlineBoxContainingBlockBounds = new cocktail_core_geom_RectangleVO();
	this._blockFormattingBounds = new cocktail_core_geom_RectangleVO();
	this._floatedElementsBounds = new cocktail_core_geom_RectangleVO();
	this._childBlockFormattingBounds = new cocktail_core_geom_RectangleVO();
	this._offsetFromBlockFormattingRoot = new cocktail_core_geom_PointVO(0,0);
	this.isBlockContainer = true;
};
$hxClasses["cocktail.core.renderer.BlockBoxRenderer"] = cocktail_core_renderer_BlockBoxRenderer;
cocktail_core_renderer_BlockBoxRenderer.__name__ = true;
cocktail_core_renderer_BlockBoxRenderer.__super__ = cocktail_core_renderer_FlowBoxRenderer;
cocktail_core_renderer_BlockBoxRenderer.prototype = $extend(cocktail_core_renderer_FlowBoxRenderer.prototype,{
	updateAnonymousBlock: function() {
		var shouldMakeChildrenNonInline = false;
		if(this.get_firstNormalFlowChild() != null) {
			var childrenInline = this.childrenInline();
			var child1 = this.firstChild;
			while(child1 != null) {
				if(child1.isAbsolutelyPositioned() == false) {
					if(child1.isFloat() == false) {
						if(child1.isAnonymousBlockBox() == false) {
							if(child1.isInlineLevel() != childrenInline) {
								shouldMakeChildrenNonInline = true;
								break;
							}
						}
					}
				}
				child1 = child1.nextSibling;
			}
		}
		if(shouldMakeChildrenNonInline == true) this.makeChildrenNonInline();
		var child = this.firstChild;
		while(child != null) {
			child.updateAnonymousBlock();
			child = child.nextSibling;
		}
	}
	,makeChildrenNonInline: function() {
		var newChildNodes = [];
		var lastCreatedAnonymousBlock = null;
		var child = this.lastChild;
		while(child != null) {
			var previousSibling = child.previousSibling;
			if(child.isInlineLevel() == true) {
				if(lastCreatedAnonymousBlock != null) lastCreatedAnonymousBlock.insertBefore(child,lastCreatedAnonymousBlock.firstChild); else {
					lastCreatedAnonymousBlock = this.createAnonymousBlock(child);
					newChildNodes.push(lastCreatedAnonymousBlock);
				}
			} else {
				lastCreatedAnonymousBlock = null;
				newChildNodes.push(child);
			}
			child = previousSibling;
		}
		newChildNodes.reverse();
		var length = newChildNodes.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			this.appendChild(newChildNodes[i]);
		}
	}
	,createAnonymousBlock: function(child) {
		var anonymousBlock = new cocktail_core_renderer_AnonymousBlockBoxRenderer(this.domNode.ownerDocument);
		anonymousBlock.appendChild(child);
		var htmlElement = anonymousBlock.domNode;
		anonymousBlock.coreStyle = htmlElement.coreStyle;
		var initialStyleDeclaration = cocktail_core_css_InitialStyleDeclaration.getInstance();
		anonymousBlock.coreStyle.specifiedValues = initialStyleDeclaration;
		anonymousBlock.coreStyle.computedValues = initialStyleDeclaration.initialComputedStyleDeclaration;
		anonymousBlock.coreStyle.applyHiddenBordersWidth();
		anonymousBlock.coreStyle.applyNoneOutlineWidth();
		var htmlDocument = this.domNode.ownerDocument;
		anonymousBlock.coreStyle.updateCoreStyleAttribute(htmlDocument.cascadeManager,true);
		anonymousBlock.coreStyle.setUsedLineHeight();
		return anonymousBlock;
	}
	,renderChildren: function(graphicContext,clipRect,scrollOffset) {
		cocktail_core_renderer_FlowBoxRenderer.prototype.renderChildren.call(this,graphicContext,clipRect,scrollOffset);
		if(this.createOwnLayer() == true || this.coreStyle.isInlineBlock == true || this.coreStyle.isFloat == true) {
			if(this.lineBoxes.length == 0) {
				this.renderBlockContainerChildren(this,this.layerRenderer,graphicContext,clipRect,scrollOffset);
				this.renderBlockReplacedChildren(this,this.layerRenderer,graphicContext,clipRect,scrollOffset);
			}
			this.renderFloatedChildren(this,this.layerRenderer,graphicContext,clipRect,scrollOffset);
			this.renderLineBoxes(this,this.layerRenderer,graphicContext,clipRect,scrollOffset);
		}
	}
	,renderLineBoxes: function(rootRenderer,referenceLayer,graphicContext,clipRect,scrollOffset) {
		var canHaveLineBoxes = false;
		if(rootRenderer.isBlockContainer == true) {
			if(rootRenderer.hasLineBoxes == true) canHaveLineBoxes = true;
		}
		if(canHaveLineBoxes == true) this.renderInlineChildren(rootRenderer,referenceLayer,graphicContext,clipRect,scrollOffset); else {
			var child = rootRenderer.firstChild;
			while(child != null) {
				if(child.layerRenderer == referenceLayer) {
					if(child.isReplaced == false) {
						if(child.coreStyle.isFloat == false) this.renderLineBoxes(child,referenceLayer,graphicContext,clipRect,scrollOffset);
					}
				}
				child = child.nextSibling;
			}
		}
	}
	,renderBlockReplacedChildren: function(rootRenderer,referenceLayer,graphicContext,clipRect,scrollOffset) {
		var child = rootRenderer.firstChild;
		while(child != null) {
			if(child.layerRenderer == referenceLayer) {
				if(child.coreStyle.isFloat == false) {
					if(child.isReplaced == false && child.coreStyle.isBlock == true) this.renderBlockReplacedChildren(child,referenceLayer,graphicContext,clipRect,scrollOffset); else if(child.coreStyle.isBlock == true) child.render(graphicContext,clipRect,scrollOffset);
				}
			}
			child = child.nextSibling;
		}
	}
	,renderBlockContainerChildren: function(rootElementRenderer,referenceLayer,graphicContext,clipRect,scrollOffset) {
		var child = rootElementRenderer.firstChild;
		while(child != null) {
			if(child.layerRenderer == referenceLayer) {
				if(child.coreStyle.isInlineLevel == false) {
					if(child.isReplaced == false && child.isText == false) {
						if(child.coreStyle.isFloat == false) {
							child.render(graphicContext,clipRect,scrollOffset);
							this.renderBlockContainerChildren(child,referenceLayer,graphicContext,clipRect,scrollOffset);
						}
					}
				}
			}
			child = child.nextSibling;
		}
	}
	,renderFloatedChildren: function(rootElementRenderer,referenceLayer,graphicContext,clipRect,scrollOffset) {
		var child = rootElementRenderer.firstChild;
		while(child != null) {
			if(child.layerRenderer == referenceLayer) {
				if(child.coreStyle.isFloat == true) child.render(graphicContext,clipRect,scrollOffset); else this.renderFloatedChildren(child,referenceLayer,graphicContext,clipRect,scrollOffset);
			}
			child = child.nextSibling;
		}
	}
	,layoutChildren: function(layoutState) {
		this.updateFloatedAndClearElements();
		this.doLayoutChildren(layoutState);
		if(this.establishesNewBlockFormattingContext() == true) {
			if(this.establishesNewBlockFormattingContextOnlyBecauseOfOverflow() == false) this.applyShrinkToFitIfNeeded(layoutState);
		}
		this.applyContentHeightIfNeeded();
	}
	,doLayoutChildren: function(layoutState) {
		if(this.childrenInline() == false) this.layoutBlockChildrenAndFloats(layoutState); else {
			this.layoutInlineChildrenAndFloats(layoutState);
			this.updateInlineChildrenBounds(this);
		}
	}
	,updateFloatedAndClearElements: function() {
		if(this.establishesNewBlockFormattingContext() == true) {
			this.floatsManager.init();
			this._offsetFromBlockFormattingRoot.x = 0;
			this._offsetFromBlockFormattingRoot.y = 0;
		} else {
			var blockFormattingContextRoot = this.getNearestBlockFormattingContextRoot();
			this._offsetFromBlockFormattingRoot = this.getBlockBoxesOffset(this,blockFormattingContextRoot);
			this._offsetFromBlockFormattingRoot.x += this.coreStyle.usedValues.paddingLeft + this.coreStyle.usedValues.borderLeftWidth;
			this._offsetFromBlockFormattingRoot.y += this.coreStyle.usedValues.paddingTop + this.coreStyle.usedValues.borderTopWidth;
			this.floatsManager.floats = blockFormattingContextRoot.floatsManager.floats;
			this.floatsManager.childrenWithClearance = blockFormattingContextRoot.floatsManager.childrenWithClearance;
		}
	}
	,applyShrinkToFitIfNeeded: function(layoutState) {
		if((this.coreStyle.hasAutoWidth == true || layoutState != cocktail_core_layout_LayoutStateValue.NORMAL) && this.isAutoWidthAbsolutelyPositionedWithNotAutoLeftAndRight() == false) {
			this.doLayoutChildren(cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH);
			this.getBlockFormattingBounds();
			var preferedMinimumWidth = this._blockFormattingBounds.width;
			if(this.coreStyle.hasAutoWidth == false) {
				if(this.bounds.width > preferedMinimumWidth) preferedMinimumWidth = this.bounds.width;
			}
			this.doLayoutChildren(cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_WIDTH);
			this.getBlockFormattingBounds();
			var preferedWidth = this._blockFormattingBounds.width;
			if(this.coreStyle.hasAutoWidth == false) {
				if(this.bounds.width > preferedWidth) preferedWidth = this.bounds.width;
			}
			var availableWidth = this.containingBlock.coreStyle.usedValues.width;
			var shrinkToFitWidth = Math.min(Math.max(preferedMinimumWidth,availableWidth),preferedWidth);
			if(this.coreStyle.hasMaxWidth == true) {
				if(shrinkToFitWidth > this.coreStyle.usedValues.maxWidth) shrinkToFitWidth = this.coreStyle.usedValues.maxWidth;
			}
			if(shrinkToFitWidth < this.coreStyle.usedValues.minWidth) shrinkToFitWidth = this.coreStyle.usedValues.minWidth;
			this.coreStyle.usedValues.width = shrinkToFitWidth;
			this.bounds.width = shrinkToFitWidth + this.coreStyle.usedValues.paddingLeft + this.coreStyle.usedValues.paddingRight + this.coreStyle.usedValues.borderLeftWidth + this.coreStyle.usedValues.borderRightWidth;
			this.doLayoutChildren(cocktail_core_layout_LayoutStateValue.NORMAL);
		}
	}
	,getBlockFormattingBounds: function() {
		this._blockFormattingBounds.x = 50000;
		this._blockFormattingBounds.y = 50000;
		this._blockFormattingBounds.width = 0;
		this._blockFormattingBounds.height = 0;
		this.doGetBlockFormattingBounds(this,this._blockFormattingBounds,0,0);
	}
	,doGetBlockFormattingBounds: function(rootElementRenderer,blockFormattingBounds,xOffset,yOffset) {
		var child = rootElementRenderer.firstChild;
		while(child != null) {
			if(child.isFloat() == false) {
				if(child.isAbsolutelyPositioned() == false) {
					this._childBlockFormattingBounds.x = child.bounds.x + xOffset;
					this._childBlockFormattingBounds.y = child.bounds.y + yOffset;
					this._childBlockFormattingBounds.width = child.bounds.width;
					this._childBlockFormattingBounds.height = child.bounds.height;
					if(child.isText == false) {
						this._childBlockFormattingBounds.x -= child.coreStyle.usedValues.marginLeft;
						this._childBlockFormattingBounds.y -= child.coreStyle.usedValues.marginTop;
						this._childBlockFormattingBounds.width += child.coreStyle.usedValues.marginRight + child.coreStyle.usedValues.marginLeft;
						this._childBlockFormattingBounds.height += child.coreStyle.usedValues.marginBottom + child.coreStyle.usedValues.marginTop;
					}
					if(child.isText == false || child.parentNode.isBlockContainer == true) cocktail_core_geom_GeomUtils.addBounds(this._childBlockFormattingBounds,blockFormattingBounds,null,null);
					if(child.establishesNewBlockFormattingContext() == false && child.firstChild != null) this.doGetBlockFormattingBounds(child,blockFormattingBounds,xOffset + child.bounds.x,yOffset + child.bounds.y);
				}
			}
			child = child.nextSibling;
		}
	}
	,getFloatedElementsBounds: function() {
		this._floatedElementsBounds.x = 50000;
		this._floatedElementsBounds.y = 50000;
		this._floatedElementsBounds.width = 0;
		this._floatedElementsBounds.height = 0;
		if(this.floatsManager.floats.left.length == 0 && this.floatsManager.floats.right.length == 0) {
			this._floatedElementsBounds.x = 0;
			this._floatedElementsBounds.y = 0;
			return;
		}
		this.doGetFloatedElementsBounds(this.floatsManager.floats.left,this._floatedElementsBounds);
		this.doGetFloatedElementsBounds(this.floatsManager.floats.right,this._floatedElementsBounds);
	}
	,doGetFloatedElementsBounds: function(floats,floatedElementsBounds) {
		var _g1 = 0;
		var _g = floats.length;
		while(_g1 < _g) {
			var i = _g1++;
			cocktail_core_geom_GeomUtils.addBounds(floats[i].bounds,floatedElementsBounds,null,null);
		}
	}
	,applyContentHeightIfNeeded: function() {
		if(this.coreStyle.hasAutoHeight == true && this.isAutoHeightAbsolutelyPositionedWithNotAutoTopAndBottom() == false) {
			var childrenHeight = 0;
			if(this.childrenInline() == false) {
				childrenHeight = this._childPosition.y;
				if(this.collapseBottomMarginWithLastChildBottomMargin() == true) childrenHeight -= this.getCollapsedBottomMargin(false);
			} else childrenHeight = this._lineBoxPosition.y;
			if(this.establishesNewBlockFormattingContext() == true) {
				this.getFloatedElementsBounds();
				if(this._floatedElementsBounds.y + this._floatedElementsBounds.height > childrenHeight) childrenHeight = this._floatedElementsBounds.y + this._floatedElementsBounds.height;
			}
			if(this.coreStyle.hasMaxHeight == true) {
				if(childrenHeight > this.coreStyle.usedValues.maxHeight) childrenHeight = this.coreStyle.usedValues.maxHeight;
			}
			if(childrenHeight < this.coreStyle.usedValues.minHeight) childrenHeight = this.coreStyle.usedValues.minHeight;
			this.coreStyle.usedValues.height = childrenHeight;
			this.bounds.height = childrenHeight + this.coreStyle.usedValues.paddingTop + this.coreStyle.usedValues.paddingBottom + this.coreStyle.usedValues.borderTopWidth + this.coreStyle.usedValues.borderBottomWidth;
		}
	}
	,isAutoHeightAbsolutelyPositionedWithNotAutoTopAndBottom: function() {
		if(this.isPositioned() == true && this.isRelativePositioned() == false) return this.coreStyle.hasAutoTop == false && this.coreStyle.hasAutoBottom == false;
		return false;
	}
	,isAutoWidthAbsolutelyPositionedWithNotAutoLeftAndRight: function() {
		if(this.isPositioned() == true && this.isRelativePositioned() == false) return this.coreStyle.hasAutoLeft == false && this.coreStyle.hasAutoRight == false;
		return false;
	}
	,layoutBlockChildrenAndFloats: function(layoutState) {
		this._childPosition.x = 0;
		this._childPosition.y = 0;
		var child = this.firstChild;
		while(child != null) {
			if(child.isPositioned() == false || child.isRelativePositioned() == true) {
				var childHasClearance = false;
				if(child.canHaveClearance() == true) {
					var hypotheticalChildYPosition = this._childPosition.y + child.getCollapsedTopMargin(true);
					if(this.floatsManager.hasClearance(child,hypotheticalChildYPosition + this._offsetFromBlockFormattingRoot.y) == true) {
						this.registerClearElement(child);
						var clearance = this.floatsManager.getClearance(child,hypotheticalChildYPosition + this._offsetFromBlockFormattingRoot.y);
						this._childPosition.y += clearance;
						childHasClearance = true;
					}
				}
				if(child.isFloat() == false) {
					if(child.establishesNewBlockFormattingContext() == false && child.isBlockContainer == true) {
						if(childHasClearance == false) this._childPosition.y += child.getCollapsedTopMargin(true);
						child.bounds.x = child.coreStyle.usedValues.marginLeft;
						child.bounds.y = this._childPosition.y;
						child.layout(true,layoutState);
					} else {
						child.layout(true,layoutState);
						var childMarginWidth = child.bounds.width + child.coreStyle.usedValues.marginLeft + child.coreStyle.usedValues.marginRight;
						var childMarginHeight = child.bounds.height + child.getCollapsedTopMargin(true) + child.getCollapsedBottomMargin(true);
						var contentWidth = this.bounds.width - this.coreStyle.usedValues.paddingLeft - this.coreStyle.usedValues.paddingRight - this.coreStyle.usedValues.borderLeftWidth - this.coreStyle.usedValues.borderRightWidth;
						var firstYPosition = this._childPosition.y;
						if(this.floatsManager.get_hasFloats() == true) {
							firstYPosition = this.floatsManager.getFirstAvailableYPosition(this._childPosition.y + this._offsetFromBlockFormattingRoot.y,childMarginHeight,childMarginWidth,contentWidth,this._offsetFromBlockFormattingRoot.x);
							this._childPosition.y = firstYPosition - this._offsetFromBlockFormattingRoot.y;
						}
						if(childHasClearance == false) this._childPosition.y += child.getCollapsedTopMargin(true);
						child.bounds.y = this._childPosition.y;
						var leftFloatOffset = 0;
						if(this.floatsManager.get_hasFloats() == true) {
							var leftFloatOffset1 = this.floatsManager.getLeftFloatOffset(this._childPosition.y + this._offsetFromBlockFormattingRoot.y,childMarginHeight,this._offsetFromBlockFormattingRoot.x);
							leftFloatOffset1 -= this._offsetFromBlockFormattingRoot.x;
						}
						if(leftFloatOffset > child.coreStyle.usedValues.marginLeft) child.bounds.x = leftFloatOffset; else child.bounds.x = child.coreStyle.usedValues.marginLeft;
					}
					this._childPosition.y += child.bounds.height;
					this._childPosition.y += child.getCollapsedBottomMargin(true);
					if(child.collapseBottomMarginWithLastChildBottomMargin() == true) this._childPosition.y += child.get_lastNormalFlowChild().getCollapsedBottomMargin(true);
				} else {
					child.layout(true,layoutState);
					var childPosition = this._childPosition;
					var previousFlowSibling = child.get_previousNormalFlowSibling();
					var needToLayoutPreviousSibling = false;
					if(previousFlowSibling != null) {
						if(previousFlowSibling.isAnonymousBlockBox() == true) {
							if(previousFlowSibling.childrenInline() == true) {
								childPosition = new cocktail_core_geom_PointVO(this._childPosition.x,this._childPosition.y);
								var blockPreviousSibling = previousFlowSibling;
								var lastLineBox = blockPreviousSibling.lineBoxes[blockPreviousSibling.lineBoxes.length - 1];
								childPosition.y = lastLineBox.bounds.y + blockPreviousSibling.bounds.y;
								needToLayoutPreviousSibling = true;
							}
						}
					}
					this.registerFloatedElement(child,childPosition);
					if(needToLayoutPreviousSibling == true) previousFlowSibling.layout(true,layoutState);
				}
			}
			child = child.nextSibling;
		}
	}
	,registerClearElement: function(clearElement) {
		var blockFormattingContextRoot = this.getNearestBlockFormattingContextRoot();
		blockFormattingContextRoot.floatsManager.registerClear(clearElement);
	}
	,registerFloatedElement: function(floatedElement,childPosition) {
		var blockFormattingContextRoot = this.getNearestBlockFormattingContextRoot();
		var contentWidth = this.bounds.width - this.coreStyle.usedValues.paddingLeft - this.coreStyle.usedValues.paddingRight - this.coreStyle.usedValues.borderLeftWidth - this.coreStyle.usedValues.borderRightWidth;
		var floatBounds = blockFormattingContextRoot.floatsManager.registerFloat(floatedElement,childPosition.y + this._offsetFromBlockFormattingRoot.y,contentWidth,this._offsetFromBlockFormattingRoot.x);
		floatedElement.bounds.x = floatBounds.x + floatedElement.coreStyle.usedValues.marginLeft;
		floatedElement.bounds.y = floatBounds.y + floatedElement.coreStyle.usedValues.marginTop;
		floatedElement.bounds.x -= this._offsetFromBlockFormattingRoot.x;
		floatedElement.bounds.y -= this._offsetFromBlockFormattingRoot.y;
	}
	,layoutInlineChildrenAndFloats: function(layoutState) {
		this.lineBoxes = [];
		this.hasLineBoxes = false;
		this._lineBoxPosition.x = 0;
		this._lineBoxPosition.y = 0;
		var firstLineBox = this.createLineBox(this._lineBoxPosition,layoutState);
		var openedElementRendererStack = [];
		var inlineFormattingData = new cocktail_core_layout_InlineFormattingVO();
		inlineFormattingData.inlineBox = firstLineBox.rootInlineBox;
		inlineFormattingData.lineBox = firstLineBox;
		inlineFormattingData.openedElementRenderers = openedElementRendererStack;
		inlineFormattingData.lineBoxPosition = this._lineBoxPosition;
		var lastInlineBox = this.doLayoutInlineChildrenAndFloats(this,inlineFormattingData,layoutState);
		inlineFormattingData.lineBox.layout(true,lastInlineBox);
		this._lineBoxPosition.y += inlineFormattingData.lineBox.bounds.height;
	}
	,createLineBox: function(lineBoxPosition,layoutState) {
		var lineBox = new cocktail_core_linebox_LineBox(this,this.lineBoxes.length == 0,layoutState);
		lineBox.bounds.y = lineBoxPosition.y;
		this.setLineBoxPositionAndWidth(lineBox);
		this.lineBoxes.push(lineBox);
		this.hasLineBoxes = true;
		return lineBox;
	}
	,setLineBoxPositionAndWidth: function(lineBox) {
		var availableWidth = this.coreStyle.usedValues.width;
		if(this.floatsManager.get_hasFloats() == true) availableWidth = this.floatsManager.getRightFloatOffset(lineBox.bounds.y + this._offsetFromBlockFormattingRoot.y,this.coreStyle.usedValues.lineHeight,0,this._offsetFromBlockFormattingRoot.x,this.coreStyle.usedValues.width) - this.floatsManager.getLeftFloatOffset(lineBox.bounds.y + this._offsetFromBlockFormattingRoot.y,this.coreStyle.usedValues.lineHeight,this._offsetFromBlockFormattingRoot.x);
		lineBox.bounds.width = availableWidth;
		var leftFloatOffset = 0;
		if(this.floatsManager.get_hasFloats() == true) {
			leftFloatOffset = this.floatsManager.getLeftFloatOffset(lineBox.bounds.y + this._offsetFromBlockFormattingRoot.y,this.coreStyle.usedValues.lineHeight,this._offsetFromBlockFormattingRoot.x);
			leftFloatOffset -= this._offsetFromBlockFormattingRoot.x;
		}
		lineBox.bounds.x = leftFloatOffset;
	}
	,layoutLineBox: function(inlineFormattingData,layoutState) {
		var lineBox = inlineFormattingData.lineBox;
		var lineBoxPosition = inlineFormattingData.lineBoxPosition;
		var openedElementRenderers = inlineFormattingData.openedElementRenderers;
		lineBox.layout(false,null);
		lineBoxPosition.y += lineBox.bounds.height;
		var firstAvailableY = lineBoxPosition.y;
		if(this.floatsManager.get_hasFloats() == true) {
			firstAvailableY = this.floatsManager.getFirstAvailableYPosition(lineBoxPosition.y + this._offsetFromBlockFormattingRoot.y,this.coreStyle.usedValues.lineHeight,lineBox.unbreakableWidth,this.coreStyle.usedValues.width,this._offsetFromBlockFormattingRoot.x);
			firstAvailableY -= this._offsetFromBlockFormattingRoot.y;
		}
		lineBoxPosition.y = firstAvailableY;
		var newLineBox = this.createLineBox(lineBoxPosition,layoutState);
		var currentInlineBox = newLineBox.rootInlineBox;
		var length = openedElementRenderers.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var childInlineBox = new cocktail_core_linebox_InlineBox(openedElementRenderers[i],openedElementRenderers[i].getLeadedAscent(),openedElementRenderers[i].getLeadedDescent());
			childInlineBox.lineBox = newLineBox;
			openedElementRenderers[i].inlineBoxes.push(childInlineBox);
			currentInlineBox.appendChild(childInlineBox);
			currentInlineBox = childInlineBox;
		}
		inlineFormattingData.lineBox = newLineBox;
		inlineFormattingData.inlineBox = currentInlineBox;
	}
	,doLayoutInlineChildrenAndFloats: function(elementRenderer,inlineFormattingData,layoutState) {
		var child = elementRenderer.firstChild;
		while(child != null) {
			if(child.isPositioned() == false || child.isRelativePositioned() == true) {
				if(child.isFloat() == true) {
					child.layout(true,layoutState);
					if(child.canHaveClearance() == true) {
						var hypotheticalChildYPosition = inlineFormattingData.lineBoxPosition.y + child.coreStyle.usedValues.marginTop;
						if(this.floatsManager.hasClearance(child,hypotheticalChildYPosition + this._offsetFromBlockFormattingRoot.y) == true) {
							this.registerClearElement(child);
							var clearance = this.floatsManager.getClearance(child,hypotheticalChildYPosition + this._offsetFromBlockFormattingRoot.y);
							var clearedFloatPosition = new cocktail_core_geom_PointVO(0,0);
							clearedFloatPosition.y = inlineFormattingData.lineBoxPosition.y + clearance;
							this.registerFloatedElement(child,clearedFloatPosition);
						}
					} else {
						var floatMarginWidth = child.bounds.width + child.coreStyle.usedValues.marginLeft + child.coreStyle.usedValues.marginRight;
						if(inlineFormattingData.lineBox.widthCanFit(floatMarginWidth) == false) this.layoutLineBox(inlineFormattingData,layoutState);
						this.registerFloatedElement(child,inlineFormattingData.lineBoxPosition);
						this.setLineBoxPositionAndWidth(inlineFormattingData.lineBox);
					}
				} else if(child.isText == true) {
					var textLength = child.inlineBoxes.length;
					var _g = 0;
					while(_g < textLength) {
						var i = _g++;
						var lineIsFull = inlineFormattingData.lineBox.insert(child.inlineBoxes[i],inlineFormattingData.inlineBox,false);
						if(lineIsFull == true) {
							this.layoutLineBox(inlineFormattingData,layoutState);
							inlineFormattingData.lineBox.insert(child.inlineBoxes[i],inlineFormattingData.inlineBox,true);
						}
					}
				} else if(child.establishesNewBlockFormattingContext() == true || child.isReplaced == true) {
					child.layout(true,layoutState);
					var childInlineBox = child.inlineBoxes[0];
					childInlineBox.bounds.height = child.bounds.height;
					childInlineBox.bounds.width = child.bounds.width;
					childInlineBox.marginLeft = child.coreStyle.usedValues.marginLeft;
					childInlineBox.marginRight = child.coreStyle.usedValues.marginRight;
					var lineIsFull1 = inlineFormattingData.lineBox.insert(childInlineBox,inlineFormattingData.inlineBox,false);
					if(lineIsFull1 == true) {
						this.layoutLineBox(inlineFormattingData,layoutState);
						inlineFormattingData.lineBox.insert(childInlineBox,inlineFormattingData.inlineBox,true);
					}
				} else if(child.firstChild != null) {
					child.layout(true,cocktail_core_layout_LayoutStateValue.NORMAL);
					child.inlineBoxes = [];
					var childInlineBox1 = new cocktail_core_linebox_InlineBox(child,child.getLeadedAscent(),child.getLeadedDescent());
					childInlineBox1.lineBox = inlineFormattingData.lineBox;
					child.inlineBoxes.push(childInlineBox1);
					var childUsedValues = child.coreStyle.usedValues;
					childInlineBox1.marginLeft = childUsedValues.marginLeft;
					childInlineBox1.paddingLeft = childUsedValues.paddingLeft;
					childInlineBox1.borderLeft = childUsedValues.borderLeftWidth;
					inlineFormattingData.lineBox.addUnbreakableWidth(childUsedValues.marginLeft + childUsedValues.paddingLeft + childUsedValues.borderLeftWidth);
					inlineFormattingData.inlineBox.appendChild(childInlineBox1);
					inlineFormattingData.inlineBox = childInlineBox1;
					inlineFormattingData.openedElementRenderers.push(child);
					inlineFormattingData.inlineBox = this.doLayoutInlineChildrenAndFloats(child,inlineFormattingData,layoutState);
					inlineFormattingData.openedElementRenderers.pop();
					inlineFormattingData.inlineBox = inlineFormattingData.inlineBox.parentNode;
					var lastInLineBox = child.inlineBoxes[child.inlineBoxes.length - 1];
					lastInLineBox.marginRight = childUsedValues.marginRight;
					lastInLineBox.paddingRight = childUsedValues.paddingRight;
					inlineFormattingData.lineBox.addUnbreakableWidth(childUsedValues.marginRight + childUsedValues.paddingRight);
				}
			}
			child = child.nextSibling;
		}
		return inlineFormattingData.inlineBox;
	}
	,updateInlineChildrenBounds: function(elementRenderer) {
		var child = elementRenderer.firstChild;
		while(child != null) {
			if((child.isPositioned() == false || child.isRelativePositioned() == true) && child.isFloat() == false) {
				if(child.firstChild != null && child.establishesNewBlockFormattingContext() == false) this.updateInlineChildrenBounds(child);
				child.bounds.width = 0;
				child.bounds.height = 0;
				child.bounds.x = 50000;
				child.bounds.y = 50000;
				var inlineBoxesLength = child.inlineBoxes.length;
				if(inlineBoxesLength == 0) {
					child.bounds.x = 0;
					child.bounds.y = 0;
				}
				var _g = 0;
				while(_g < inlineBoxesLength) {
					var i = _g++;
					var inlineBox = child.inlineBoxes[i];
					this._inlineBoxContainingBlockBounds.width = inlineBox.bounds.width;
					this._inlineBoxContainingBlockBounds.height = inlineBox.bounds.height;
					if(inlineBox.lineBox != null) {
						this._inlineBoxContainingBlockBounds.x = inlineBox.bounds.x + inlineBox.lineBox.bounds.x;
						this._inlineBoxContainingBlockBounds.y = inlineBox.bounds.y + inlineBox.lineBox.bounds.y;
					}
					cocktail_core_geom_GeomUtils.addBounds(this._inlineBoxContainingBlockBounds,child.bounds,null,null);
				}
			}
			child = child.nextSibling;
		}
	}
	,collapseBottomMarginWithLastChildBottomMargin: function() {
		if(this.get_lastNormalFlowChild() == null) return false;
		if(this.get_lastNormalFlowChild().isBlockContainer == false) return false;
		if(this.establishesNewBlockFormattingContext() == true) return false;
		if(this.coreStyle.usedValues.paddingBottom != 0 || this.get_lastNormalFlowChild().coreStyle.usedValues.paddingBottom != 0) return false;
		if(this.coreStyle.usedValues.borderBottomWidth != 0 || this.get_lastNormalFlowChild().coreStyle.usedValues.borderBottomWidth != 0) return false;
		return true;
	}
	,collapseTopMarginWithFirstChildTopMargin: function() {
		if(this.get_firstNormalFlowChild() == null) return false;
		if(this.get_firstNormalFlowChild().isBlockContainer == false) return false;
		if(this.establishesNewBlockFormattingContext() == true) return false;
		if(this.coreStyle.usedValues.paddingTop != 0 || this.get_firstNormalFlowChild().coreStyle.usedValues.paddingTop != 0) return false;
		if(this.coreStyle.usedValues.borderTopWidth != 0 || this.get_firstNormalFlowChild().coreStyle.usedValues.borderTopWidth != 0) return false;
		return true;
	}
	,hasZeroHeightChildren: function() {
		if(this.childrenInline() == true) {
			var lineBoxesLength = this.lineBoxes.length;
			var _g = 0;
			while(_g < lineBoxesLength) {
				var i = _g++;
				if(this.lineBoxes[i].bounds.height > 0) return false;
			}
			if(this.hasNonZeroHeightInlineBox(this) == true) return false;
		} else return this.bounds.height == 0;
		return true;
	}
	,createOwnLayer: function() {
		var createOwnLayer = cocktail_core_renderer_FlowBoxRenderer.prototype.createOwnLayer.call(this);
		if(createOwnLayer == true) return true;
		return this.coreStyle.canAlwaysOverflow != true;
	}
	,establishesNewBlockFormattingContext: function() {
		if(this.coreStyle.isFloat == true) return true; else if(this.coreStyle.canAlwaysOverflow == false) return true; else if(this.coreStyle.isPositioned == true && this.coreStyle.isRelativePositioned == false) return true; else if(this.coreStyle.isInlineBlock == true) return true;
		return false;
	}
	,childrenInline: function() {
		var child = this.firstChild;
		while(child != null) {
			if(child.isInlineLevel() == true) {
				if(child.isFloat() == false) {
					if(child.isAbsolutelyPositioned() == false) return true;
				}
			}
			child = child.nextSibling;
		}
		return false;
	}
	,getBackgroundAndBordersBounds: function(scrollOffset) {
		var backgroundAndBordersBounds = cocktail_core_renderer_FlowBoxRenderer.prototype.getBackgroundAndBordersBounds.call(this,scrollOffset);
		if(this._hasOwnLayer == true) {
			backgroundAndBordersBounds.x += this.layerRenderer.scrollLeft;
			backgroundAndBordersBounds.y += this.layerRenderer.scrollTop;
		}
		return backgroundAndBordersBounds;
	}
	,hasNonZeroHeightInlineBox: function(rootElementRenderer) {
		var child = rootElementRenderer.firstChild;
		while(child != null) {
			var inlineBoxLength = child.inlineBoxes.length;
			var _g = 0;
			while(_g < inlineBoxLength) {
				var i = _g++;
				var inlineBox = child.inlineBoxes[i];
				if(inlineBox.isText == true && inlineBox.isSpace == false) return true; else if(inlineBox.isEmbedded == true) return true;
			}
			this.hasNonZeroHeightInlineBox(child);
			child = child.nextSibling;
		}
		return false;
	}
	,establishesNewBlockFormattingContextOnlyBecauseOfOverflow: function() {
		if(this.coreStyle.isFloat == false && this.coreStyle.isAbsolutelyPositioned == false && this.coreStyle.isInlineBlock == false && this.coreStyle.canAlwaysOverflow == false) return true; else return false;
	}
	,getBlockBoxesOffset: function(target,source) {
		var offset = new cocktail_core_geom_PointVO(0,0);
		var parent = target;
		while(parent != null) {
			if(parent == source) return offset;
			offset.x += parent.bounds.x;
			offset.y += parent.bounds.y;
			parent = parent.parentNode;
		}
		return offset;
	}
	,getNearestBlockFormattingContextRoot: function() {
		var parent = this;
		while(parent != null) {
			if(parent.establishesNewBlockFormattingContext() == true) return parent;
			parent = parent.parentNode;
		}
		return parent;
	}
	,__class__: cocktail_core_renderer_BlockBoxRenderer
});
var cocktail_core_renderer_AnonymousBlockBoxRenderer = function(document) {
	if(cocktail_core_renderer_AnonymousBlockBoxRenderer._node == null) cocktail_core_renderer_AnonymousBlockBoxRenderer._node = document.createElement("DIV");
	cocktail_core_renderer_BlockBoxRenderer.call(this,cocktail_core_renderer_AnonymousBlockBoxRenderer._node,cocktail_core_renderer_AnonymousBlockBoxRenderer._node.coreStyle);
};
$hxClasses["cocktail.core.renderer.AnonymousBlockBoxRenderer"] = cocktail_core_renderer_AnonymousBlockBoxRenderer;
cocktail_core_renderer_AnonymousBlockBoxRenderer.__name__ = true;
cocktail_core_renderer_AnonymousBlockBoxRenderer._node = null;
cocktail_core_renderer_AnonymousBlockBoxRenderer.__super__ = cocktail_core_renderer_BlockBoxRenderer;
cocktail_core_renderer_AnonymousBlockBoxRenderer.prototype = $extend(cocktail_core_renderer_BlockBoxRenderer.prototype,{
	removeChild: function(oldChild) {
		cocktail_core_renderer_BlockBoxRenderer.prototype.removeChild.call(this,oldChild);
		if(this.firstChild == null) this.parentNode.removeChild(this);
	}
	,isPositioned: function() {
		return false;
	}
	,isAnonymousBlockBox: function() {
		return true;
	}
	,createOwnLayer: function() {
		return false;
	}
	,isInlineLevel: function() {
		return false;
	}
	,__class__: cocktail_core_renderer_AnonymousBlockBoxRenderer
});
var cocktail_core_renderer_BodyBoxRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_BlockBoxRenderer.call(this,domNode,coreStyle);
};
$hxClasses["cocktail.core.renderer.BodyBoxRenderer"] = cocktail_core_renderer_BodyBoxRenderer;
cocktail_core_renderer_BodyBoxRenderer.__name__ = true;
cocktail_core_renderer_BodyBoxRenderer.__super__ = cocktail_core_renderer_BlockBoxRenderer;
cocktail_core_renderer_BodyBoxRenderer.prototype = $extend(cocktail_core_renderer_BlockBoxRenderer.prototype,{
	layoutSelfIfNeeded: function(forceLayout) {
		if(this._needsLayout == false && forceLayout == false) return;
		cocktail_core_renderer_BlockBoxRenderer.prototype.layoutSelfIfNeeded.call(this,forceLayout);
		if(this.coreStyle.hasAutoHeight == true && (this.isPositioned() == false || this.isRelativePositioned() == true)) {
			var usedValues = this.coreStyle.usedValues;
			usedValues.height = this.containingBlock.getContainerBlockData().height - usedValues.marginTop - usedValues.marginBottom - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth;
		}
	}
	,collapseTopMarginWithParentTopMargin: function() {
		return false;
	}
	,collapseBottomMarginWithParentBottomMargin: function() {
		return false;
	}
	,getContainerBlockData: function() {
		cocktail_core_renderer_BlockBoxRenderer.prototype.getContainerBlockData.call(this);
		if(this.coreStyle.hasAutoHeight == true && (this.isPositioned() == false || this.isRelativePositioned() == true)) this._containerBlockData.isHeightAuto = false;
		return this._containerBlockData;
	}
	,getBackgroundAndBordersBounds: function(scrollOffset) {
		var viewportData = this.getViewportData();
		var width = viewportData.width;
		var height = viewportData.height;
		this.bounds.width = width;
		this.bounds.height = height;
		this.bounds.x = 0.0;
		this.bounds.y = 0.0;
		return this.bounds;
	}
	,__class__: cocktail_core_renderer_BodyBoxRenderer
});
var cocktail_core_renderer_InputRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_BlockBoxRenderer.call(this,domNode,coreStyle);
	this.createNativeInput();
	this.setNativeInputCallbacks();
};
$hxClasses["cocktail.core.renderer.InputRenderer"] = cocktail_core_renderer_InputRenderer;
cocktail_core_renderer_InputRenderer.__name__ = true;
cocktail_core_renderer_InputRenderer.__super__ = cocktail_core_renderer_BlockBoxRenderer;
cocktail_core_renderer_InputRenderer.prototype = $extend(cocktail_core_renderer_BlockBoxRenderer.prototype,{
	createNativeInput: function() {
	}
	,setNativeInputCallbacks: function() {
		var _g = this;
		this.nativeInput.onActivate = function() {
			_g.onActivate();
		};
		this.nativeInput.onInput = function() {
			_g.onInput();
		};
	}
	,focus: function() {
		this.nativeInput.focus();
	}
	,blur: function() {
		this.nativeInput.blur();
	}
	,createOwnLayer: function() {
		return true;
	}
	,doCreateLayer: function() {
		this.layerRenderer = new cocktail_core_layer_InputLayerRenderer(this);
	}
	,renderSelf: function(graphicContext,clipRect,scrollOffset) {
		cocktail_core_renderer_BlockBoxRenderer.prototype.renderSelf.call(this,graphicContext,clipRect,scrollOffset);
		this.updateNativeInputViewport(scrollOffset,clipRect);
	}
	,updateNativeInputViewport: function(scrollOffset,clipRect) {
		var globalBounds = this.globalBounds;
		var x = globalBounds.x + this.coreStyle.usedValues.borderLeftWidth - scrollOffset.x;
		var y = this.getViewportY(scrollOffset);
		var layerMatrix = this.layerRenderer.matrix;
		x += layerMatrix.e;
		y += layerMatrix.f;
		var width = globalBounds.width - this.coreStyle.usedValues.borderLeftWidth - this.coreStyle.usedValues.borderRightWidth;
		var height = globalBounds.height - this.coreStyle.usedValues.borderTopWidth - this.coreStyle.usedValues.borderBottomWidth;
		var viewport = new cocktail_core_geom_RectangleVO();
		viewport.x = x;
		viewport.y = y;
		viewport.width = width;
		viewport.height = height;
		this.nativeInput.set_viewport(viewport);
		this.nativeInput.set_clipRect(this.layerRenderer.clipRect);
	}
	,getViewportY: function(scrollOffset) {
		return this.globalBounds.y + this.coreStyle.usedValues.borderTopWidth + (this.globalBounds.height - this.coreStyle.usedValues.borderTopWidth - this.coreStyle.usedValues.borderBottomWidth) / 2 - this.coreStyle.fontMetrics.fontSize + this.coreStyle.fontMetrics.ascent / 2 - scrollOffset.y;
	}
	,get_value: function() {
		return this.nativeInput.get_value();
	}
	,set_value: function(value) {
		return this.nativeInput.set_value(value);
	}
	,set_maxLength: function(value) {
		return this.nativeInput.set_maxLength(value);
	}
	,set_disabled: function(value) {
		return this.nativeInput.set_disabled(value);
	}
	,set_readonly: function(value) {
		return this.nativeInput.set_readonly(value);
	}
	,set_checked: function(value) {
		return this.nativeInput.set_checked(value);
	}
	,get_intrinsicWidth: function() {
		return this.nativeInput.get_intrinsicWidth();
	}
	,get_intrinsicHeight: function() {
		return this.nativeInput.get_intrinsicHeight();
	}
	,__class__: cocktail_core_renderer_InputRenderer
	,__properties__: $extend(cocktail_core_renderer_BlockBoxRenderer.prototype.__properties__,{get_intrinsicHeight:"get_intrinsicHeight",get_intrinsicWidth:"get_intrinsicWidth",set_readonly:"set_readonly",set_disabled:"set_disabled",set_maxLength:"set_maxLength",set_checked:"set_checked",set_value:"set_value",get_value:"get_value"})
});
var cocktail_core_renderer_CheckboxRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_InputRenderer.call(this,domNode,coreStyle);
};
$hxClasses["cocktail.core.renderer.CheckboxRenderer"] = cocktail_core_renderer_CheckboxRenderer;
cocktail_core_renderer_CheckboxRenderer.__name__ = true;
cocktail_core_renderer_CheckboxRenderer.__super__ = cocktail_core_renderer_InputRenderer;
cocktail_core_renderer_CheckboxRenderer.prototype = $extend(cocktail_core_renderer_InputRenderer.prototype,{
	createNativeInput: function() {
		this.nativeInput = new cocktail_port_base_NativeInputBase(this.domNode);
	}
	,__class__: cocktail_core_renderer_CheckboxRenderer
});
var cocktail_core_renderer_EmbeddedBoxRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_BoxRenderer.call(this,domNode,coreStyle);
	this.isReplaced = true;
};
$hxClasses["cocktail.core.renderer.EmbeddedBoxRenderer"] = cocktail_core_renderer_EmbeddedBoxRenderer;
cocktail_core_renderer_EmbeddedBoxRenderer.__name__ = true;
cocktail_core_renderer_EmbeddedBoxRenderer.__super__ = cocktail_core_renderer_BoxRenderer;
cocktail_core_renderer_EmbeddedBoxRenderer.prototype = $extend(cocktail_core_renderer_BoxRenderer.prototype,{
	renderSelf: function(graphicContext,clipRect,scrollOffset) {
		cocktail_core_renderer_BoxRenderer.prototype.renderSelf.call(this,graphicContext,clipRect,scrollOffset);
		this.renderEmbeddedAsset(graphicContext,clipRect,scrollOffset);
	}
	,renderEmbeddedAsset: function(graphicContext,clipRect,scrollOffset) {
	}
	,__class__: cocktail_core_renderer_EmbeddedBoxRenderer
});
var cocktail_core_renderer_ImageRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_EmbeddedBoxRenderer.call(this,domNode,coreStyle);
	this._paintBounds = new cocktail_core_geom_RectangleVO();
	this._destinationPoint = new cocktail_core_geom_PointVO(0.0,0.0);
};
$hxClasses["cocktail.core.renderer.ImageRenderer"] = cocktail_core_renderer_ImageRenderer;
cocktail_core_renderer_ImageRenderer.__name__ = true;
cocktail_core_renderer_ImageRenderer.__super__ = cocktail_core_renderer_EmbeddedBoxRenderer;
cocktail_core_renderer_ImageRenderer.prototype = $extend(cocktail_core_renderer_EmbeddedBoxRenderer.prototype,{
	renderEmbeddedAsset: function(graphicContext,clipRect,scrollOffset) {
		var htmlElement = this.domNode;
		var src = htmlElement.getAttribute("src");
		if(src == null) return;
		var htmlDocument = this.domNode.ownerDocument;
		var resource = htmlDocument.resourceManager.getImageResource(src);
		if(resource.loaded == false || resource.loadedWithError == true) return;
		var usedValues = this.coreStyle.usedValues;
		this._paintBounds.x = this.globalBounds.x + usedValues.paddingLeft + usedValues.borderLeftWidth - scrollOffset.x;
		this._paintBounds.y = this.globalBounds.y + usedValues.paddingTop + usedValues.borderTopWidth - scrollOffset.y;
		this._paintBounds.width = usedValues.width;
		this._paintBounds.height = usedValues.height;
		this.paintResource(graphicContext,resource.nativeResource,this._paintBounds,resource.intrinsicWidth,resource.intrinsicHeight,clipRect);
	}
	,paintResource: function(graphicContext,nativeBitmapData,bounds,intrinsicWidth,intrinsicHeight,clipRect) {
		if(intrinsicWidth != bounds.width || intrinsicHeight != bounds.height) {
			var matrix = new cocktail_core_geom_Matrix();
			matrix.translate(bounds.x,bounds.y);
			matrix.scale(bounds.width / intrinsicWidth,bounds.height / intrinsicHeight);
			graphicContext.nativeLayer.graphics.drawImage(nativeBitmapData,matrix,bounds,clipRect);
		} else {
			var width = intrinsicWidth;
			var height = intrinsicHeight;
			this._destinationPoint.x = bounds.x;
			this._destinationPoint.y = bounds.y;
			bounds.width = width;
			bounds.height = height;
			bounds.x = 0.0;
			bounds.y = 0.0;
			graphicContext.nativeLayer.graphics.copyPixels(nativeBitmapData,bounds,this._destinationPoint,clipRect);
		}
	}
	,__class__: cocktail_core_renderer_ImageRenderer
});
var cocktail_core_renderer_InitialBlockRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_BlockBoxRenderer.call(this,domNode,coreStyle);
	this.containingBlock = this;
};
$hxClasses["cocktail.core.renderer.InitialBlockRenderer"] = cocktail_core_renderer_InitialBlockRenderer;
cocktail_core_renderer_InitialBlockRenderer.__name__ = true;
cocktail_core_renderer_InitialBlockRenderer.__super__ = cocktail_core_renderer_BlockBoxRenderer;
cocktail_core_renderer_InitialBlockRenderer.prototype = $extend(cocktail_core_renderer_BlockBoxRenderer.prototype,{
	attachLayer: function() {
		this.layerRenderer = new cocktail_core_layer_InitialLayerRenderer(this);
		this._hasOwnLayer = true;
	}
	,detachLayer: function() {
		this.layerRenderer.removedFromLayerTree();
		this._hasOwnLayer = false;
		this.layerRenderer.dispose();
		this.layerRenderer = null;
	}
	,registerWithContaininingBlock: function() {
	}
	,unregisterWithContainingBlock: function() {
	}
	,invalidateContainingBlock: function(styleIndex) {
	}
	,layoutSelfIfNeeded: function(forceLayout) {
		var viewportData = this.getViewportData();
		this.coreStyle.usedValues.width = viewportData.width;
		this.coreStyle.usedValues.height = viewportData.height;
		this.bounds.x = 0;
		this.bounds.y = 0;
		this.bounds.width = viewportData.width;
		this.bounds.height = viewportData.height;
		this.globalBounds.x = 0;
		this.globalBounds.y = 0;
		this.globalBounds.width = viewportData.width;
		this.globalBounds.height = viewportData.height;
	}
	,applyShrinkToFitIfNeeded: function(layoutState) {
	}
	,isPositioned: function() {
		return true;
	}
	,establishesNewBlockFormattingContext: function() {
		return true;
	}
	,createOwnLayer: function() {
		return true;
	}
	,getContainerBlockData: function() {
		return this.getViewportData();
	}
	,getContainingBlock: function() {
		return this;
	}
	,__class__: cocktail_core_renderer_InitialBlockRenderer
});
var cocktail_core_renderer_InlineBoxRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_FlowBoxRenderer.call(this,domNode,coreStyle);
	this._renderRect = new cocktail_core_geom_RectangleVO();
};
$hxClasses["cocktail.core.renderer.InlineBoxRenderer"] = cocktail_core_renderer_InlineBoxRenderer;
cocktail_core_renderer_InlineBoxRenderer.__name__ = true;
cocktail_core_renderer_InlineBoxRenderer.__super__ = cocktail_core_renderer_FlowBoxRenderer;
cocktail_core_renderer_InlineBoxRenderer.prototype = $extend(cocktail_core_renderer_FlowBoxRenderer.prototype,{
	render: function(graphicsContext,clipRect,scrollOffset) {
		var inlineBoxesLength = this.inlineBoxes.length;
		var _g = 0;
		while(_g < inlineBoxesLength) {
			var i = _g++;
			var inlineBox = this.inlineBoxes[i];
			this._renderRect.width = inlineBox.bounds.width;
			this._renderRect.height = inlineBox.bounds.height;
			this._renderRect.x = inlineBox.bounds.x + inlineBox.lineBox.bounds.x + this.globalBounds.x - scrollOffset.x;
			this._renderRect.y = inlineBox.bounds.y + inlineBox.lineBox.bounds.y + this.globalBounds.y - scrollOffset.y;
			if(this.coreStyle.hasBackgroundImage == true || this.coreStyle.hasBackgroundColor == true) cocktail_core_graphics_BackgroundDrawer.render(graphicsContext,this._renderRect,this.coreStyle,this,clipRect);
			cocktail_core_graphics_BorderDrawer.draw(graphicsContext,this._renderRect,this.coreStyle,clipRect);
		}
		if(this.firstChild != null) this.renderChildren(graphicsContext,clipRect,scrollOffset);
	}
	,updateInlineBoxes: function() {
		this.inlineBoxes = [];
		var child = this.firstChild;
		while(child != null) {
			child.updateInlineBoxes();
			child = child.nextSibling;
		}
	}
	,renderChildren: function(graphicContext,clipRect,scrollOffset) {
		cocktail_core_renderer_FlowBoxRenderer.prototype.renderChildren.call(this,graphicContext,clipRect,scrollOffset);
		if(this.createOwnLayer() == true) this.renderInlineChildren(this,this.layerRenderer,graphicContext,clipRect,scrollOffset);
	}
	,canHaveClearance: function() {
		return false;
	}
	,__class__: cocktail_core_renderer_InlineBoxRenderer
});
var cocktail_core_renderer_InputButtonRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_InputRenderer.call(this,domNode,coreStyle);
};
$hxClasses["cocktail.core.renderer.InputButtonRenderer"] = cocktail_core_renderer_InputButtonRenderer;
cocktail_core_renderer_InputButtonRenderer.__name__ = true;
cocktail_core_renderer_InputButtonRenderer.__super__ = cocktail_core_renderer_InputRenderer;
cocktail_core_renderer_InputButtonRenderer.prototype = $extend(cocktail_core_renderer_InputRenderer.prototype,{
	createNativeInput: function() {
		this.nativeInput = new cocktail_port_platform_flash_$player_NativeButton(this.domNode);
	}
	,__class__: cocktail_core_renderer_InputButtonRenderer
});
var cocktail_core_renderer_ObjectRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_EmbeddedBoxRenderer.call(this,domNode,coreStyle);
};
$hxClasses["cocktail.core.renderer.ObjectRenderer"] = cocktail_core_renderer_ObjectRenderer;
cocktail_core_renderer_ObjectRenderer.__name__ = true;
cocktail_core_renderer_ObjectRenderer.__super__ = cocktail_core_renderer_EmbeddedBoxRenderer;
cocktail_core_renderer_ObjectRenderer.prototype = $extend(cocktail_core_renderer_EmbeddedBoxRenderer.prototype,{
	createOwnLayer: function() {
		return true;
	}
	,doCreateLayer: function() {
		this.layerRenderer = new cocktail_core_layer_PluginLayerRenderer(this);
	}
	,renderEmbeddedAsset: function(graphicContext,clipRect,scrollOffset) {
		var htmlObjectElement = this.domNode;
		htmlObjectElement.plugin.updateViewport(this.globalBounds.x + this.coreStyle.usedValues.paddingLeft + this.coreStyle.usedValues.borderLeftWidth,this.globalBounds.y + this.coreStyle.usedValues.paddingTop + this.coreStyle.usedValues.borderTopWidth,this.globalBounds.width,this.globalBounds.height);
	}
	,__class__: cocktail_core_renderer_ObjectRenderer
});
var cocktail_core_renderer_TextInputRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_InputRenderer.call(this,domNode,coreStyle);
};
$hxClasses["cocktail.core.renderer.TextInputRenderer"] = cocktail_core_renderer_TextInputRenderer;
cocktail_core_renderer_TextInputRenderer.__name__ = true;
cocktail_core_renderer_TextInputRenderer.__super__ = cocktail_core_renderer_InputRenderer;
cocktail_core_renderer_TextInputRenderer.prototype = $extend(cocktail_core_renderer_InputRenderer.prototype,{
	createNativeInput: function() {
		this.nativeTextInput = new cocktail_port_platform_flash_$player_NativeTextInput(this.domNode);
		this.nativeInput = this.nativeTextInput;
	}
	,renderSelf: function(graphicContext,clipRect,scrollOffset) {
		cocktail_core_renderer_InputRenderer.prototype.renderSelf.call(this,graphicContext,clipRect,scrollOffset);
		this.updateNativeTextInput(scrollOffset,clipRect);
	}
	,updateNativeTextInput: function(scrollOffset,clipRect) {
		this.nativeTextInput.set_fontFamily(cocktail_core_css_CSSValueConverter.getFontFamilyAsStringArray(this.coreStyle.getComputedOrInitialProperty(37))[0]);
		this.nativeTextInput.set_letterSpacing(this.coreStyle.usedValues.letterSpacing);
		this.nativeTextInput.set_fontSize(this.coreStyle.getAbsoluteLength(this.coreStyle.getTransitionablePropertyValue(34)));
		var bold = false;
		{
			var _g = this.coreStyle.getComputedOrInitialProperty(35);
			switch(_g[1]) {
			case 4:
				var value = _g[2];
				switch(value[1]) {
				case 3:case 0:
					bold = false;
					break;
				case 2:case 1:
					bold = true;
					break;
				default:
					throw new js__$Boot_HaxeError("Illegal keyword for bold style");
				}
				break;
			case 0:
				var value1 = _g[2];
				bold = value1 > 400;
				break;
			default:
				throw new js__$Boot_HaxeError("Illegal value for bold style");
			}
		}
		this.nativeTextInput.set_bold(bold);
		this.nativeTextInput.set_italic(this.coreStyle.getKeyword(this.coreStyle.getComputedOrInitialProperty(36)) == cocktail_core_css_CSSKeywordValue.ITALIC);
		this.nativeTextInput.set_letterSpacing(this.coreStyle.usedValues.letterSpacing);
		this.nativeTextInput.set_color(this.coreStyle.usedValues.color.color);
	}
	,__class__: cocktail_core_renderer_TextInputRenderer
});
var cocktail_core_renderer_PasswordInputRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_TextInputRenderer.call(this,domNode,coreStyle);
};
$hxClasses["cocktail.core.renderer.PasswordInputRenderer"] = cocktail_core_renderer_PasswordInputRenderer;
cocktail_core_renderer_PasswordInputRenderer.__name__ = true;
cocktail_core_renderer_PasswordInputRenderer.__super__ = cocktail_core_renderer_TextInputRenderer;
cocktail_core_renderer_PasswordInputRenderer.prototype = $extend(cocktail_core_renderer_TextInputRenderer.prototype,{
	createNativeInput: function() {
		this.nativeTextInput = new cocktail_port_platform_flash_$player_NativePasswordInput(this.domNode);
		this.nativeInput = this.nativeTextInput;
	}
	,__class__: cocktail_core_renderer_PasswordInputRenderer
});
var cocktail_core_renderer_RadioRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_InputRenderer.call(this,domNode,coreStyle);
};
$hxClasses["cocktail.core.renderer.RadioRenderer"] = cocktail_core_renderer_RadioRenderer;
cocktail_core_renderer_RadioRenderer.__name__ = true;
cocktail_core_renderer_RadioRenderer.__super__ = cocktail_core_renderer_InputRenderer;
cocktail_core_renderer_RadioRenderer.prototype = $extend(cocktail_core_renderer_InputRenderer.prototype,{
	createNativeInput: function() {
		this.nativeInput = new cocktail_port_base_NativeInputBase(this.domNode);
	}
	,__class__: cocktail_core_renderer_RadioRenderer
});
var cocktail_core_renderer_TextAreaRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_TextInputRenderer.call(this,domNode,coreStyle);
};
$hxClasses["cocktail.core.renderer.TextAreaRenderer"] = cocktail_core_renderer_TextAreaRenderer;
cocktail_core_renderer_TextAreaRenderer.__name__ = true;
cocktail_core_renderer_TextAreaRenderer.__super__ = cocktail_core_renderer_TextInputRenderer;
cocktail_core_renderer_TextAreaRenderer.prototype = $extend(cocktail_core_renderer_TextInputRenderer.prototype,{
	createNativeInput: function() {
		this.nativeTextInput = new cocktail_port_platform_flash_$player_NativeTextArea(this.domNode);
		this.nativeInput = this.nativeTextInput;
	}
	,getViewportY: function(scrollOffset) {
		return this.globalBounds.y + this.coreStyle.usedValues.borderTopWidth;
	}
	,renderChildren: function(graphicContext,clipRect,scrollOffset) {
	}
	,__class__: cocktail_core_renderer_TextAreaRenderer
});
var cocktail_core_renderer_TextRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_InvalidatingElementRenderer.call(this,domNode,coreStyle);
	this._text = domNode;
	this._textNeedsRendering = true;
	this._textTokensNeedParsing = true;
	this._hasUnderline = false;
	this._hasOverline = false;
	this._hasLineThrough = false;
	this._hasBlink = false;
	this.isText = true;
};
$hxClasses["cocktail.core.renderer.TextRenderer"] = cocktail_core_renderer_TextRenderer;
cocktail_core_renderer_TextRenderer.__name__ = true;
cocktail_core_renderer_TextRenderer.__super__ = cocktail_core_renderer_InvalidatingElementRenderer;
cocktail_core_renderer_TextRenderer.prototype = $extend(cocktail_core_renderer_InvalidatingElementRenderer.prototype,{
	updateText: function() {
		var child = this.firstChild;
		while(child != null) {
			child.updateText();
			child = child.nextSibling;
		}
		if(this._textNeedsRendering == true) {
			this.createTextLines();
			this._textNeedsRendering = false;
		}
	}
	,render: function(graphicContext,clipRect,scrollOffset) {
		if(this.coreStyle.isVisible == false) return;
		cocktail_core_renderer_TextRenderer._intersectBounds.x = this.hitTestingBounds.x;
		cocktail_core_renderer_TextRenderer._intersectBounds.y = this.hitTestingBounds.y;
		cocktail_core_renderer_TextRenderer._intersectBounds.width = this.hitTestingBounds.width;
		cocktail_core_renderer_TextRenderer._intersectBounds.height = this.hitTestingBounds.height;
		cocktail_core_geom_GeomUtils.intersectBounds(cocktail_core_renderer_TextRenderer._intersectBounds,clipRect,cocktail_core_renderer_TextRenderer._intersectBounds);
		if(cocktail_core_renderer_TextRenderer._intersectBounds.width == 0 || cocktail_core_renderer_TextRenderer._intersectBounds.height == 0) return;
		cocktail_core_graphics_TextDrawer.draw(graphicContext,this,this._hasUnderline,this._hasOverline,this._hasLineThrough,this._hasBlink,scrollOffset,clipRect);
	}
	,updateTextDecorations: function(inheritUnderline,inheritOverline,inheritLineThrough,inheritBlink) {
		this._hasUnderline = inheritUnderline;
		this._hasOverline = inheritOverline;
		this._hasLineThrough = inheritLineThrough;
		this._hasBlink = inheritBlink;
	}
	,invalidate: function() {
		this._textNeedsRendering = true;
	}
	,createTextLines: function() {
		if(this._textTokensNeedParsing == true) {
			var processedText = this._text.get_nodeValue();
			processedText = cocktail_core_parser_PlainTextParser.applyWhiteSpaceProcessing(processedText,this.coreStyle.getKeyword(this.coreStyle.getComputedOrInitialProperty(45)));
			processedText = cocktail_core_parser_PlainTextParser.applyTextTransform(processedText,this.coreStyle.getKeyword(this.coreStyle.getComputedOrInitialProperty(42)));
			this._textTokens = cocktail_core_parser_PlainTextParser.parse(processedText);
		}
		this.inlineBoxes = [];
		var fontMetrics = this.coreStyle.fontMetrics;
		var htmlDocument = this.domNode.ownerDocument;
		var fontManager = htmlDocument.fontManager;
		var fontFamily = fontManager.getNativeFontFamily(cocktail_core_css_CSSValueConverter.getFontFamilyAsStringArray(this.coreStyle.getComputedOrInitialProperty(37)));
		var letterSpacing = this.coreStyle.usedValues.letterSpacing;
		var wordSpacing = this.coreStyle.getAbsoluteLength(this.coreStyle.getTransitionablePropertyValue(44));
		var spaceWidth = fontMetrics.spaceWidth + letterSpacing + wordSpacing;
		var leadedAscent = this.getLeadedAscent();
		var leadedDescent = this.getLeadedDescent();
		var length = this._textTokens.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			this.inlineBoxes.push(this.createInlineBoxFromTextToken(this._textTokens[i],leadedAscent,leadedDescent,fontMetrics,fontManager,fontFamily,spaceWidth));
		}
	}
	,createInlineBoxFromTextToken: function(textToken,leadedAscent,leadedDescent,fontMetrics,fontManager,fontFamily,spaceWidth) {
		switch(textToken[1]) {
		case 0:
			var value = textToken[2];
			return new cocktail_core_linebox_TextInlineBox(this,leadedAscent,leadedDescent,value,fontMetrics,fontManager,fontFamily);
		case 1:
			return new cocktail_core_linebox_SpaceInlineBox(this,leadedAscent,leadedDescent,spaceWidth);
		case 2:
			return new cocktail_core_linebox_TextInlineBox(this,leadedAscent,leadedDescent,"",fontMetrics,fontManager,fontFamily);
		case 3:
			return new cocktail_core_linebox_TextInlineBox(this,leadedAscent,leadedDescent,"",fontMetrics,fontManager,fontFamily);
		}
	}
	,isFloat: function() {
		return false;
	}
	,isPositioned: function() {
		return false;
	}
	,isInlineLevel: function() {
		return true;
	}
	,__class__: cocktail_core_renderer_TextRenderer
});
var cocktail_core_renderer_VideoRenderer = function(domNode,coreStyle) {
	cocktail_core_renderer_ImageRenderer.call(this,domNode,coreStyle);
	this._posterBounds = new cocktail_core_geom_RectangleVO();
	this._videoBounds = new cocktail_core_geom_RectangleVO();
};
$hxClasses["cocktail.core.renderer.VideoRenderer"] = cocktail_core_renderer_VideoRenderer;
cocktail_core_renderer_VideoRenderer.__name__ = true;
cocktail_core_renderer_VideoRenderer.__super__ = cocktail_core_renderer_ImageRenderer;
cocktail_core_renderer_VideoRenderer.prototype = $extend(cocktail_core_renderer_ImageRenderer.prototype,{
	createOwnLayer: function() {
		return true;
	}
	,doCreateLayer: function() {
		this.layerRenderer = new cocktail_core_layer_VideoLayerRenderer(this);
	}
	,renderEmbeddedAsset: function(graphicContext,clipRect,scrollOffset) {
		var htmlVideoElement = this.domNode;
		if(htmlVideoElement.shouldRenderPosterFrame() == true) this.renderPosterFrame(htmlVideoElement,graphicContext,clipRect,scrollOffset); else this.renderVideo(htmlVideoElement,graphicContext,scrollOffset);
	}
	,renderVideo: function(htmlVideoElement,graphicContext,scrollOffset) {
		cocktail_core_geom_GeomUtils.getCenteredBounds(this.coreStyle.usedValues.width,this.coreStyle.usedValues.height,htmlVideoElement.get_videoWidth(),htmlVideoElement.get_videoHeight(),this._videoBounds);
		var nativeVideo = htmlVideoElement.nativeMedia;
		var videoViewport = nativeVideo.get_viewport();
		videoViewport.x = this.globalBounds.x + this.coreStyle.usedValues.paddingLeft + this.coreStyle.usedValues.borderLeftWidth + this._videoBounds.x - scrollOffset.x;
		videoViewport.y = this.globalBounds.y + this.coreStyle.usedValues.paddingTop + this.coreStyle.usedValues.borderTopWidth + this._videoBounds.y - scrollOffset.y;
		videoViewport.width = this._videoBounds.width;
		videoViewport.height = this._videoBounds.height;
		nativeVideo.set_alpha(this.layerRenderer.alpha);
		nativeVideo.set_matrix(this.layerRenderer.matrix);
		nativeVideo.set_viewport(videoViewport);
	}
	,renderPosterFrame: function(htmlVideoElement,graphicContext,clipRect,scrollOffset) {
		var htmlDocument = this.domNode.ownerDocument;
		var htmlElement = this.domNode;
		var resource = htmlDocument.resourceManager.getImageResource(htmlElement.getAttribute("poster"));
		if(resource.loaded == false || resource.loadedWithError == true) return;
		cocktail_core_geom_GeomUtils.getCenteredBounds(this.coreStyle.usedValues.width,this.coreStyle.usedValues.height,resource.intrinsicWidth,resource.intrinsicHeight,this._posterBounds);
		var x = this.globalBounds.x + this.coreStyle.usedValues.paddingLeft + this.coreStyle.usedValues.borderLeftWidth + this._posterBounds.x - scrollOffset.x;
		var y = this.globalBounds.y + this.coreStyle.usedValues.paddingTop + this.coreStyle.usedValues.borderTopWidth + this._posterBounds.y - scrollOffset.y;
		var width = this._posterBounds.width;
		var height = this._posterBounds.height;
		var paintBounds = new cocktail_core_geom_RectangleVO();
		paintBounds.x = x;
		paintBounds.y = y;
		paintBounds.width = width;
		paintBounds.height = height;
		this.paintResource(graphicContext,resource.nativeResource,paintBounds,resource.intrinsicWidth,resource.intrinsicHeight,clipRect);
	}
	,__class__: cocktail_core_renderer_VideoRenderer
});
var cocktail_core_resource_ResourceManager = function(document) {
	this._document = document;
	this._resources = new haxe_ds_StringMap();
	this._binaryResources = new haxe_ds_StringMap();
};
$hxClasses["cocktail.core.resource.ResourceManager"] = cocktail_core_resource_ResourceManager;
cocktail_core_resource_ResourceManager.__name__ = true;
cocktail_core_resource_ResourceManager.prototype = {
	dispose: function() {
		this._document = null;
		this._resources = null;
		this._binaryResources = null;
	}
	,getImageResource: function(url) {
		var resource = this._resources.get(url);
		if(resource == null) {
			resource = new cocktail_port_platform_flash_$player_ImageResource(this.cleanRelativePathes(url));
			this._resources.set(url,resource);
		}
		return resource;
	}
	,getBinaryResource: function(url) {
		var resource = this._binaryResources.get(url);
		if(resource == null) {
			resource = new cocktail_port_platform_flash_$player_NativeHttp(this._document.timer);
			resource.load(this.cleanRelativePathes(url),"GET",null,null,cocktail_core_http_DataFormatValue.BINARY);
			this._binaryResources.set(url,resource);
		}
		return resource;
	}
	,removeBinaryResource: function(url) {
		this._binaryResources.remove(url);
	}
	,cleanRelativePathes: function(url) {
		var splittedUrl = url.split("/");
		var rebuildUrl = [];
		while(splittedUrl.length > 0) {
			var d = splittedUrl.shift();
			if(d == "..") rebuildUrl.pop(); else if(d != ".") rebuildUrl.push(d);
		}
		return rebuildUrl.join("/");
	}
	,__class__: cocktail_core_resource_ResourceManager
};
var cocktail_core_stacking_StackingContext = function(layerRenderer) {
	cocktail_core_ds_FastNode.call(this);
	this.layerRenderer = layerRenderer;
};
$hxClasses["cocktail.core.stacking.StackingContext"] = cocktail_core_stacking_StackingContext;
cocktail_core_stacking_StackingContext.__name__ = true;
cocktail_core_stacking_StackingContext.__super__ = cocktail_core_ds_FastNode;
cocktail_core_stacking_StackingContext.prototype = $extend(cocktail_core_ds_FastNode.prototype,{
	render: function(dirtyRect) {
		this.layerRenderer.render(dirtyRect);
		var child = this.firstChild;
		var hasRenderedAutoAndZeroLayers = false;
		while(child != null) {
			{
				var _g = child.layerRenderer.rootElementRenderer.coreStyle.getComputedOrInitialProperty(4);
				switch(_g[1]) {
				case 0:
					var value = _g[2];
					if(value == 0) {
					} else {
						if(value > 0 && hasRenderedAutoAndZeroLayers == false) {
							this.renderChildrenInSameStackingContext(this.layerRenderer,dirtyRect);
							hasRenderedAutoAndZeroLayers = true;
						}
						child.render(dirtyRect);
					}
					break;
				default:
				}
			}
			child = child.nextSibling;
		}
		if(hasRenderedAutoAndZeroLayers == false) this.renderChildrenInSameStackingContext(this.layerRenderer,dirtyRect);
	}
	,renderChildrenInSameStackingContext: function(rootLayer,dirtyRect) {
		var child = rootLayer.firstChild;
		while(child != null) {
			if(child.hasOwnStackingContext == false) {
				child.render(dirtyRect);
				this.renderChildrenInSameStackingContext(child,dirtyRect);
			} else {
				var _g = child.rootElementRenderer.coreStyle.getComputedOrInitialProperty(4);
				switch(_g[1]) {
				case 0:
					var value = _g[2];
					if(value == 0) child.stackingContext.render(dirtyRect);
					break;
				default:
				}
			}
			child = child.nextSibling;
		}
	}
	,__class__: cocktail_core_stacking_StackingContext
});
var cocktail_core_timer_Timer = function() {
	this._pendingCallbacks = [];
	this._pendingCount = 0;
	this._platformTimer = new cocktail_port_platform_flash_$player_PlatformTimer($bind(this,this.onUpdate));
};
$hxClasses["cocktail.core.timer.Timer"] = cocktail_core_timer_Timer;
cocktail_core_timer_Timer.__name__ = true;
cocktail_core_timer_Timer.prototype = {
	dispose: function() {
		this._pendingCallbacks = null;
		this._platformTimer.dispose();
	}
	,delay: function(timerCallback,delay) {
		if(delay == null) delay = 0;
		this._pendingCount++;
		var callbackTime = this.getTimer() + delay;
		var length = this._pendingCallbacks.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var pendingCallback = this._pendingCallbacks[i];
			if(pendingCallback.called == true) {
				pendingCallback.called = false;
				pendingCallback.callbackTime = callbackTime;
				pendingCallback.timerCallback = timerCallback;
				return;
			}
		}
		var newTimerCallback = new cocktail_core_timer_TimerCallbackVO();
		newTimerCallback.called = false;
		newTimerCallback.callbackTime = callbackTime;
		newTimerCallback.timerCallback = timerCallback;
		this._pendingCallbacks.push(newTimerCallback);
	}
	,getTimer: function() {
		return this._platformTimer.getTimer();
	}
	,onUpdate: function() {
		if(this._pendingCount > 0) {
			var time = this.getTimer();
			var length = this._pendingCallbacks.length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				var pendingCallback = this._pendingCallbacks[i];
				if(pendingCallback.callbackTime < time && pendingCallback.called == false) {
					pendingCallback.timerCallback(time);
					pendingCallback.called = true;
					this._pendingCount--;
				}
			}
		}
	}
	,__class__: cocktail_core_timer_Timer
};
var cocktail_core_timer_TimerCallbackVO = function() {
	this.callbackTime = 0;
	this.called = false;
};
$hxClasses["cocktail.core.timer.TimerCallbackVO"] = cocktail_core_timer_TimerCallbackVO;
cocktail_core_timer_TimerCallbackVO.__name__ = true;
cocktail_core_timer_TimerCallbackVO.prototype = {
	__class__: cocktail_core_timer_TimerCallbackVO
};
var cocktail_core_transition_Transition = function(propertyIndex,target,transitionDuration,transitionDelay,transitionTimingFunction,startValue,endValue,onComplete,onUpdate) {
	this.transitionDelay = transitionDelay;
	this.transitionDuration = transitionDuration;
	this.transitionTimingFunction = transitionTimingFunction;
	this.startValue = startValue;
	this.endValue = endValue;
	this.target = target;
	this.propertyIndex = propertyIndex;
	this.onComplete = onComplete;
	this.onUpdate = onUpdate;
	this._elapsedTime = 0;
	this._cubicBezier = new cocktail_core_geom_CubicBezier();
};
$hxClasses["cocktail.core.transition.Transition"] = cocktail_core_transition_Transition;
cocktail_core_transition_Transition.__name__ = true;
cocktail_core_transition_Transition.prototype = {
	updateTime: function(delta) {
		this._elapsedTime += delta;
	}
	,dispose: function() {
		this.onComplete = null;
		this.onUpdate = null;
		this.transitionTimingFunction = null;
	}
	,revert: function() {
		this._elapsedTime = this.transitionDuration + this.transitionDelay - this._elapsedTime;
		var oldEndValue = this.endValue;
		this.endValue = this.startValue;
		this.startValue = oldEndValue;
	}
	,get_complete: function() {
		if(this._elapsedTime >= this.transitionDelay + this.transitionDuration) return true;
		return false;
	}
	,get_currentValue: function() {
		var transitionTime = this._elapsedTime - this.transitionDelay;
		if(transitionTime < 0) return this.startValue;
		var completePercent = transitionTime / this.transitionDuration;
		{
			var _g = this.transitionTimingFunction;
			switch(_g[1]) {
			case 4:
				var value = _g[2];
				switch(value[1]) {
				case 49:
					this._cubicBezier.init(0.25,0.1,0.25,1.0);
					return (this.endValue - this.startValue) * this._cubicBezier.bezierY(completePercent) + this.startValue;
				case 51:
					this._cubicBezier.init(0.25,0.1,0.25,1.0);
					return (this.endValue - this.startValue) * this._cubicBezier.bezierY(completePercent) + this.startValue;
				case 52:
					this._cubicBezier.init(0.25,0.1,0.25,1.0);
					return (this.endValue - this.startValue) * this._cubicBezier.bezierY(completePercent) + this.startValue;
				case 53:
					this._cubicBezier.init(0.25,0.1,0.25,1.0);
					return (this.endValue - this.startValue) * this._cubicBezier.bezierY(completePercent) + this.startValue;
				case 54:
					return this.endValue - this.startValue + this.startValue;
				case 55:
					return (this.endValue - this.startValue) * 0 + this.startValue;
				case 50:
					return (this.endValue - this.startValue) * completePercent + this.startValue;
				default:
					throw new js__$Boot_HaxeError("Illegal keyword value for transition timing function style");
				}
				break;
			case 20:
				var y2 = _g[5];
				var x2 = _g[4];
				var y1 = _g[3];
				var x1 = _g[2];
				this._cubicBezier.init(x1,y1,x2,y2);
				return (this.endValue - this.startValue) * this._cubicBezier.bezierY(completePercent) + this.startValue;
			case 19:
				var intervalChange = _g[3];
				var intervalNumbers = _g[2];
				return (this.endValue - this.startValue) * completePercent + this.startValue;
			default:
				throw new js__$Boot_HaxeError("Illegal value for transition timing function style");
			}
		}
	}
	,__class__: cocktail_core_transition_Transition
	,__properties__: {get_complete:"get_complete",get_currentValue:"get_currentValue"}
};
var cocktail_core_transition_PendingTransitionVO = function() {
};
$hxClasses["cocktail.core.transition.PendingTransitionVO"] = cocktail_core_transition_PendingTransitionVO;
cocktail_core_transition_PendingTransitionVO.__name__ = true;
cocktail_core_transition_PendingTransitionVO.prototype = {
	__class__: cocktail_core_transition_PendingTransitionVO
};
var cocktail_core_transition_TransitionManager = function(document) {
	this.initTransitions();
	this._document = document;
	this._currentTransitionsNumber = 0;
	this.hasTransitionsInProgress = false;
	this._lastTick = 0;
};
$hxClasses["cocktail.core.transition.TransitionManager"] = cocktail_core_transition_TransitionManager;
cocktail_core_transition_TransitionManager.__name__ = true;
cocktail_core_transition_TransitionManager.prototype = {
	dispose: function() {
		this._transitions = null;
		this._document = null;
	}
	,initTransitions: function() {
		this._transitions = [];
		var _g = 0;
		while(_g < 87) {
			var i = _g++;
			this._transitions[i] = [];
		}
	}
	,getTransition: function(propertyIndex,style) {
		var transitionsForProperty = this._transitions[propertyIndex];
		if(transitionsForProperty.length == 0) return null;
		var length = transitionsForProperty.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			if(transitionsForProperty[i].target == style) return transitionsForProperty[i];
		}
		return null;
	}
	,startTransition: function(target,propertyIndex,startValue,endValue,transitionDuration,transitionDelay,transitionTimingFunction,onComplete,onUpdate) {
		var transition = new cocktail_core_transition_Transition(propertyIndex,target,transitionDuration,transitionDelay,transitionTimingFunction,startValue,endValue,onComplete,onUpdate);
		var transitionsForProperty = this._transitions[propertyIndex];
		transitionsForProperty.push(transition);
		if(this._currentTransitionsNumber == 0) {
			this.startTransitionUpdate();
			this.hasTransitionsInProgress = true;
		}
		this._currentTransitionsNumber++;
	}
	,stopTransition: function(transition) {
		var propertyTransitions = this._transitions[transition.propertyIndex];
		HxOverrides.remove(propertyTransitions,transition);
		transition.dispose();
		this._currentTransitionsNumber--;
	}
	,startTransitionUpdate: function() {
		this._lastTick = this._document.timer.getTimer();
		this._document.timer.delay($bind(this,this.onTransitionTick));
	}
	,onTransitionTick: function(timeStamp) {
		var interval = timeStamp - this._lastTick;
		this._lastTick = timeStamp;
		var transitionsLength = this._transitions.length;
		var _g = 0;
		while(_g < transitionsLength) {
			var i = _g++;
			var completedTransitions = [];
			var transitionsForProperty = this._transitions[i];
			var length = transitionsForProperty.length;
			var _g1 = 0;
			while(_g1 < length) {
				var j = _g1++;
				var transition = transitionsForProperty[j];
				transition.updateTime(interval);
				if(transition.get_complete() == true) {
					transition.onComplete(transition);
					completedTransitions.push(transition);
				} else transition.onUpdate(transition);
			}
			var completedTransitionsLength = completedTransitions.length;
			var _g11 = 0;
			while(_g11 < completedTransitionsLength) {
				var i1 = _g11++;
				this.stopTransition(completedTransitions[i1]);
			}
		}
		if(this._currentTransitionsNumber > 0) this._document.timer.delay($bind(this,this.onTransitionTick)); else this.hasTransitionsInProgress = false;
	}
	,__class__: cocktail_core_transition_TransitionManager
};
var cocktail_core_transition_Transitioner = function(transitionManager) {
	this._transitionManager = transitionManager;
};
$hxClasses["cocktail.core.transition.Transitioner"] = cocktail_core_transition_Transitioner;
cocktail_core_transition_Transitioner.__name__ = true;
cocktail_core_transition_Transitioner.prototype = {
	startPendingTransitions: function(style) {
		if(this._pendingTransitions == null) return false;
		var atLeastOneTransitionStarted = false;
		var length = this._pendingTransitions.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var transitionStarted = this.startTransitionIfNeeded(this._pendingTransitions[i],style);
			if(transitionStarted == true) atLeastOneTransitionStarted = true;
		}
		this._pendingTransitions = [];
		return atLeastOneTransitionStarted;
	}
	,registerPendingTransition: function(propertyIndex,startValue) {
		var pendingTransition = new cocktail_core_transition_PendingTransitionVO();
		pendingTransition.propertyIndex = propertyIndex;
		pendingTransition.startValue = startValue;
		if(this._pendingTransitions == null) this._pendingTransitions = [];
		this._pendingTransitions.push(pendingTransition);
	}
	,revertTransitionIfNeeded: function(currentTransition,currentValue,style) {
		if(currentTransition.startValue != currentValue) return false;
		var indexInTransitionProperty = this.getIndexOfPropertyInTransitionProperty(currentTransition.propertyIndex,style.getComputedOrInitialProperty(57));
		if(indexInTransitionProperty == -1) return false;
		var transitionDelays = this.getAsFloatArray(style.getComputedOrInitialProperty(56));
		var transitionDelay = transitionDelays[this.getRepeatedIndex(indexInTransitionProperty,transitionDelays.length)];
		if(currentTransition.transitionDelay != transitionDelay) return false;
		var transitionDurations = this.getAsFloatArray(style.getComputedOrInitialProperty(55));
		var transitionDuration = transitionDurations[this.getRepeatedIndex(indexInTransitionProperty,transitionDurations.length)];
		if(currentTransition.transitionDuration != transitionDuration) return false;
		var transitionTimingFunctionAsArray = this.getTransitionTimingFunctionsAsArray(style.getComputedOrInitialProperty(58));
		var transitionTimingFunction = transitionTimingFunctionAsArray[this.getRepeatedIndex(indexInTransitionProperty,transitionTimingFunctionAsArray.length)];
		if(currentTransition.transitionTimingFunction != transitionTimingFunction) return false;
		currentTransition.revert();
		return true;
	}
	,startTransitionIfNeeded: function(pendingTransition,style) {
		var usedValues = style.usedValues;
		var indexInTransitionProperty = this.getIndexOfPropertyInTransitionProperty(pendingTransition.propertyIndex,style.getComputedOrInitialProperty(57));
		if(indexInTransitionProperty == -1) return false;
		var combinedDuration = 0.0;
		var transitionDelays = this.getAsFloatArray(style.getComputedOrInitialProperty(56));
		var transitionDurations = this.getAsFloatArray(style.getComputedOrInitialProperty(55));
		var transitionDelay = transitionDelays[this.getRepeatedIndex(indexInTransitionProperty,transitionDelays.length)];
		var transitionDuration = transitionDurations[this.getRepeatedIndex(indexInTransitionProperty,transitionDurations.length)];
		combinedDuration = transitionDuration + transitionDelay;
		if(combinedDuration <= 0) return false;
		var transitionTimingFunctionAsArray = this.getTransitionTimingFunctionsAsArray(style.getComputedOrInitialProperty(58));
		var transitionTimingFunction = transitionTimingFunctionAsArray[this.getRepeatedIndex(indexInTransitionProperty,transitionTimingFunctionAsArray.length)];
		var transition = this._transitionManager.getTransition(pendingTransition.propertyIndex,style);
		if(transition != null) return false;
		var endValue = this.getEndValue(style,pendingTransition.propertyIndex);
		this._transitionManager.startTransition(style,pendingTransition.propertyIndex,pendingTransition.startValue,endValue,transitionDuration,transitionDelay,transitionTimingFunction,$bind(this,this.onTransitionComplete),$bind(this,this.onTransitionUpdate));
		return true;
	}
	,getIndexOfPropertyInTransitionProperty: function(propertyIndex,transitionProperty) {
		switch(transitionProperty[1]) {
		case 4:
			var value = transitionProperty[2];
			switch(value[1]) {
			case 18:
				return -1;
			case 48:
				return 0;
			default:
				throw new js__$Boot_HaxeError("Illegal keyword value for transition property");
			}
			break;
		case 3:
			var value1 = transitionProperty[2];
			if(value1 != cocktail_core_css_CSSConstants.getPropertyNameFromIndex(propertyIndex)) return -1; else return 0;
			break;
		case 15:
			var value2 = transitionProperty[2];
			var foundFlag = false;
			var _g1 = 0;
			var _g = value2.length;
			while(_g1 < _g) {
				var i = _g1++;
				{
					var _g2 = value2[i];
					switch(_g2[1]) {
					case 3:
						var value3 = _g2[2];
						if(value3 == cocktail_core_css_CSSConstants.getPropertyNameFromIndex(propertyIndex)) return i;
						break;
					default:
						throw new js__$Boot_HaxeError("Illegal value for transition property");
					}
				}
			}
			return -1;
		default:
			throw new js__$Boot_HaxeError("Illegal values for transition property style");
		}
	}
	,getEndValue: function(style,propertyIndex) {
		switch(propertyIndex) {
		case 53:
			{
				var _g = style.getTransitionablePropertyValue(53);
				switch(_g[1]) {
				case 1:
					var value = _g[2];
					return value;
				case 18:
					var value1 = _g[2];
					return value1;
				default:
					return 0;
				}
			}
			break;
		default:
			return Reflect.field(style.usedValues,cocktail_core_css_CSSConstants.getPropertyNameFromIndex(propertyIndex));
		}
	}
	,getTransitionTimingFunctionsAsArray: function(transitionTimingFunction) {
		switch(transitionTimingFunction[1]) {
		case 4:
			var value = transitionTimingFunction[2];
			return [transitionTimingFunction];
		case 15:
			var value1 = transitionTimingFunction[2];
			return value1;
		default:
			return null;
		}
	}
	,getAsFloatArray: function(value) {
		var floats = [];
		switch(value[1]) {
		case 15:
			var value1 = value[2];
			var _g1 = 0;
			var _g = value1.length;
			while(_g1 < _g) {
				var i = _g1++;
				floats.push(this.getTransitionDelayOrDurationAsFloat(value1[i]));
			}
			break;
		default:
			floats.push(this.getTransitionDelayOrDurationAsFloat(value));
		}
		return floats;
	}
	,getTransitionDelayOrDurationAsFloat: function(value) {
		switch(value[1]) {
		case 0:
			var value1 = value[2];
			return value1;
		case 9:
			var value2 = value[2];
			switch(value2[1]) {
			case 1:
				var value3 = value2[2];
				return value3;
			case 0:
				var value4 = value2[2];
				return value4 * 1000;
			}
			break;
		default:
		}
		return 0.0;
	}
	,getRepeatedIndex: function(index,length) {
		if(index < length) return index; else if(length == 1) return 0;
		return length % index;
	}
	,onTransitionComplete: function(transition) {
		this.onTransitionCompleteCallback(transition);
	}
	,onTransitionUpdate: function(transition) {
		this.onTransitionUpdateCallback(transition);
	}
	,__class__: cocktail_core_transition_Transitioner
};
var cocktail_core_url_URL = function() {
};
$hxClasses["cocktail.core.url.URL"] = cocktail_core_url_URL;
cocktail_core_url_URL.__name__ = true;
cocktail_core_url_URL.fromString = function(stringUrl) {
	var r = new EReg("^(?:(?![^:@]+:[^:@/]*@)([^:/?#.]+):)?(?://)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:/?#]*)(?::(\\d*))?)(((/(?:[^?#](?![^?#/]*\\.[^?#/.]+(?:[?#]|$)))*/?)?([^?#/]*))(?:\\?([^#]*))?(?:#(.*))?)","");
	r.match(stringUrl);
	var url = new cocktail_core_url_URL();
	var _g1 = 0;
	var _g = cocktail_core_url_URL._parts.length;
	while(_g1 < _g) {
		var i = _g1++;
		Reflect.setField(url,cocktail_core_url_URL._parts[i],r.matched(i));
	}
	if(cocktail_core_url_URL.isRelative(url) == true) {
		if(url.directory == null && url.host != null) {
			url.file = url.host;
			url.host = null;
		}
	}
	return url;
};
cocktail_core_url_URL.toString = function(url) {
	var result = "";
	if(url.scheme != null) result += url.scheme + "://";
	if(url.user != null) result += url.user + ":";
	if(url.password != null) result += url.password + "@";
	if(url.host != null) result += url.host;
	if(url.port != null) result += ":" + url.port;
	if(url.directory != null) result += url.directory;
	if(url.file != null) result += url.file;
	if(url.query != null) result += "?" + url.query;
	if(url.fragment != null) result += "#" + url.fragment;
	return result;
};
cocktail_core_url_URL.appendURL = function(url,appendedURL) {
	if(cocktail_core_url_URL.isRelative(url) == true) return cocktail_core_url_URL.appendToRelativeURL(url,appendedURL); else return cocktail_core_url_URL.appendToAbsoluteURL(url,appendedURL);
};
cocktail_core_url_URL.isRelative = function(url) {
	return url.scheme == null;
};
cocktail_core_url_URL.appendToRelativeURL = function(url,appendedURL) {
	if(url.directory == null || url.host == null) return cocktail_core_url_URL.cloneURL(appendedURL);
	var resultURL = new cocktail_core_url_URL();
	resultURL.host = url.host;
	resultURL.directory = url.directory;
	if(appendedURL.host != null) resultURL.directory += appendedURL.host;
	if(appendedURL.directory != null) {
		var directory = appendedURL.directory;
		if(appendedURL.host == null) resultURL.directory += HxOverrides.substr(directory,1,null); else resultURL.directory += directory;
	}
	if(appendedURL.file != null) resultURL.file = appendedURL.file;
	resultURL.path = resultURL.directory + resultURL.file;
	if(appendedURL.query != null) resultURL.query = appendedURL.query;
	if(appendedURL.fragment != null) resultURL.fragment = appendedURL.fragment;
	return resultURL;
};
cocktail_core_url_URL.appendToAbsoluteURL = function(url,appendedURL) {
	var resultURL = new cocktail_core_url_URL();
	if(url.scheme != null) resultURL.scheme = url.scheme;
	if(url.host != null) resultURL.host = url.host;
	var directory = "";
	if(url.directory != null) directory = url.directory;
	if(appendedURL.host != null) appendedURL.directory += appendedURL.host;
	if(appendedURL.directory != null) directory += appendedURL.directory;
	resultURL.directory = directory;
	if(appendedURL.file != null) resultURL.file = appendedURL.file;
	resultURL.path = resultURL.directory + resultURL.file;
	if(appendedURL.query != null) resultURL.query = appendedURL.query;
	if(appendedURL.fragment != null) resultURL.fragment = appendedURL.fragment;
	return resultURL;
};
cocktail_core_url_URL.cloneURL = function(url) {
	var clonedURL = new cocktail_core_url_URL();
	clonedURL.url = url.url;
	clonedURL.source = url.source;
	clonedURL.scheme = url.scheme;
	clonedURL.authority = url.authority;
	clonedURL.userInfo = url.userInfo;
	clonedURL.password = url.password;
	clonedURL.host = url.host;
	clonedURL.port = url.port;
	clonedURL.relative = url.relative;
	clonedURL.path = url.path;
	clonedURL.directory = url.directory;
	clonedURL.file = url.file;
	clonedURL.query = url.query;
	clonedURL.fragment = url.fragment;
	return clonedURL;
};
cocktail_core_url_URL.prototype = {
	__class__: cocktail_core_url_URL
};
var cocktail_core_window_Window = function(htmlDocument) {
	cocktail_core_event_EventCallback.call(this);
	this.init(htmlDocument);
};
$hxClasses["cocktail.core.window.Window"] = cocktail_core_window_Window;
cocktail_core_window_Window.__name__ = true;
cocktail_core_window_Window.__super__ = cocktail_core_event_EventCallback;
cocktail_core_window_Window.prototype = $extend(cocktail_core_event_EventCallback.prototype,{
	dispose: function() {
		this.document = null;
		this.history.dispose();
		this.history = null;
	}
	,init: function(htmlDocument) {
		this.document = htmlDocument;
		this.setDocumentListener(this.document);
		this.history = new cocktail_core_history_History(htmlDocument);
	}
	,setDocumentListener: function(document) {
		var _g = this;
		document.addEventListener("load",function(e) {
			_g.dispatchEvent(e);
		});
		document.addEventListener("resize",function(e1) {
			_g.dispatchEvent(e1);
		});
	}
	,__class__: cocktail_core_window_Window
});
var cocktail_plugin_Plugin = function(node,elementAttributes,params,loadComplete,loadError) {
	this.viewport = new cocktail_core_geom_RectangleVO();
	this._node = node;
	this._loadComplete = loadComplete;
	this._loadError = loadError;
	this._elementAttributes = elementAttributes;
	this._params = params;
};
$hxClasses["cocktail.plugin.Plugin"] = cocktail_plugin_Plugin;
cocktail_plugin_Plugin.__name__ = true;
cocktail_plugin_Plugin.prototype = {
	updateViewport: function(x,y,width,height) {
	}
	,dispose: function() {
	}
	,isCompositedPlugin: function() {
		return false;
	}
	,attach: function(graphicsContext) {
	}
	,detach: function(graphicsContext) {
	}
	,__class__: cocktail_plugin_Plugin
};
var cocktail_plugin_swf_SWFPlugin = function(node,elementAttributes,params,loadComplete,loadError) {
	cocktail_plugin_Plugin.call(this,node,elementAttributes,params,loadComplete,loadError);
	this._swfBounds = new cocktail_core_geom_RectangleVO();
	this._swfAddedToStage = false;
	this._isAVM1swf = false;
	this.init();
};
$hxClasses["cocktail.plugin.swf.SWFPlugin"] = cocktail_plugin_swf_SWFPlugin;
cocktail_plugin_swf_SWFPlugin.__name__ = true;
cocktail_plugin_swf_SWFPlugin.__super__ = cocktail_plugin_Plugin;
cocktail_plugin_swf_SWFPlugin.prototype = $extend(cocktail_plugin_Plugin.prototype,{
	init: function() {
		var _g = this;
		if(this._params.exists("scale")) this._scaleMode = this._params.get("scale"); else this._scaleMode = "showall";
		this._mask = new openfl_display_Sprite();
		var htmlDocument = this._node.ownerDocument;
		var loadedSWF = htmlDocument.resourceManager.getBinaryResource(this._elementAttributes.get("data"));
		if(js_Boot.__instanceof(loadedSWF.response,openfl_display_Loader)) {
			this._loader = loadedSWF.response;
			var htmlDocument1 = this._node.ownerDocument;
			htmlDocument1.timer.delay(function(e) {
				_g.onLoaderReady(_g._loader);
			});
			return;
		}
		this._loader = new openfl_display_Loader();
		this._loader.contentLoaderInfo.addEventListener(openfl_events_Event.INIT,$bind(this,this.onSWFLoadComplete));
		this._loader.loadBytes(loadedSWF.response);
	}
	,attach: function(graphicsContext) {
		if(this._swfAddedToStage == false) {
			var containerGraphicContext = graphicsContext.nativeLayer.platformLayer;
			if(cocktail_core_config_Config.getInstance().enableCompositing == false && cocktail_core_config_Config.getInstance().objectBelowWhenNoCompositing == true) {
				if(this._isAVM1swf == false) containerGraphicContext.parent.addChildAt(this._swf,0); else containerGraphicContext.parent.addChildAt(this._loader,0);
			} else if(this._isAVM1swf == false) containerGraphicContext.addChild(this._swf); else containerGraphicContext.addChild(this._loader);
			this._swfAddedToStage = true;
		}
	}
	,detach: function(graphicsContext) {
		if(this._swfAddedToStage == true) {
			if(this._isAVM1swf == false) this._swf.parent.removeChild(this._swf); else this._loader.parent.removeChild(this._loader);
			this._swfAddedToStage = false;
		}
	}
	,dispose: function() {
		this._loader = null;
		this._swf = null;
		var htmlDocument = this._node.ownerDocument;
		var loadedSWF = htmlDocument.resourceManager.getBinaryResource(this._elementAttributes.get("data"));
		if(js_Boot.__instanceof(loadedSWF.response,openfl_display_Loader) == true) htmlDocument.resourceManager.removeBinaryResource(this._elementAttributes.get("data"));
	}
	,isCompositedPlugin: function() {
		return true;
	}
	,updateViewport: function(x,y,width,height) {
		if(x == this.viewport.x && y == this.viewport.y && width == this.viewport.width && height == this.viewport.height) return;
		this.viewport.x = x;
		this.viewport.y = y;
		this.viewport.width = width;
		this.viewport.height = height;
		this._swf.get_transform().get_matrix().identity();
		cocktail_core_geom_GeomUtils.getCenteredBounds(this.viewport.width,this.viewport.height,this._swfWidth,this._swfHeight,this._swfBounds);
		var _g = this._scaleMode;
		switch(_g) {
		case "noscale":
			this._swf.set_x(Math.round(this.viewport.x));
			this._swf.set_y(Math.round(this.viewport.y));
			break;
		case "exactfit":
			this._swf.set_x(Math.round(this.viewport.x));
			this._swf.set_y(Math.round(this.viewport.y));
			this._swf.set_scaleX(this.viewport.width / this._swfWidth);
			this._swf.set_scaleY(this.viewport.height / this._swfHeight);
			break;
		default:
			this._swf.set_x(Math.round(this.viewport.x + this._swfBounds.x));
			this._swf.set_y(Math.round(this.viewport.y + this._swfBounds.y));
			this._swf.set_scaleX(this._swfBounds.width / this._swfWidth);
			this._swf.set_scaleY(this._swfBounds.height / this._swfHeight);
		}
		this._mask.get_graphics().clear();
		this._mask.get_graphics().beginFill(16711680,0.5);
		this._mask.get_graphics().drawRect(this.viewport.x,this.viewport.y,this.viewport.width,this.viewport.height);
		this._mask.get_graphics().endFill();
	}
	,onSWFLoadComplete: function(event) {
		this.onLoaderReady(this._loader);
	}
	,onLoaderReady: function(loader) {
		this._isAVM1swf = false;
		this._swfHeight = loader.contentLoaderInfo.height;
		this._swfWidth = loader.contentLoaderInfo.width;
		this._swf = loader.content;
		this._swf.set_mask(this._mask);
		this._loadComplete();
	}
	,__class__: cocktail_plugin_swf_SWFPlugin
});
var cocktail_port_base_FontBuilderBase = function() {
};
$hxClasses["cocktail.port.base.FontBuilderBase"] = cocktail_port_base_FontBuilderBase;
cocktail_port_base_FontBuilderBase.__name__ = true;
cocktail_port_base_FontBuilderBase.prototype = {
	dispose: function() {
	}
	,__class__: cocktail_port_base_FontBuilderBase
};
var cocktail_port_base_GraphicsSurfaceBase = function() {
	this._useTransparency = false;
	this._useTransformations = false;
	this._alpha = 0.0;
};
$hxClasses["cocktail.port.base.GraphicsSurfaceBase"] = cocktail_port_base_GraphicsSurfaceBase;
cocktail_port_base_GraphicsSurfaceBase.__name__ = true;
cocktail_port_base_GraphicsSurfaceBase.prototype = {
	beginTransparency: function(alpha) {
		this._useTransparency = true;
		this._alpha = alpha;
	}
	,endTransparency: function() {
		this._useTransparency = false;
	}
	,beginTransformations: function(matrix) {
		this._useTransformations = true;
		this._matrix = matrix;
	}
	,endTransformations: function() {
		this._matrix = null;
		this._useTransformations = false;
	}
	,__class__: cocktail_port_base_GraphicsSurfaceBase
};
var cocktail_port_base_KeyboardListenerBase = function(platform) {
	this._platform = platform;
	this.setNativeListeners();
};
$hxClasses["cocktail.port.base.KeyboardListenerBase"] = cocktail_port_base_KeyboardListenerBase;
cocktail_port_base_KeyboardListenerBase.__name__ = true;
cocktail_port_base_KeyboardListenerBase.prototype = {
	dispose: function() {
		this.removeNativeListeners();
		this._platform = null;
	}
	,onNativeKeyDown: function(event) {
		if(this.onKeyDown != null) this.onKeyDown(this.getKeyData(event));
	}
	,onNativeKeyUp: function(event) {
		if(this.onKeyUp != null) this.onKeyUp(this.getKeyData(event));
	}
	,setNativeListeners: function() {
	}
	,removeNativeListeners: function() {
	}
	,getKeyData: function(event) {
		return null;
	}
	,__class__: cocktail_port_base_KeyboardListenerBase
};
var cocktail_port_base_MouseListenerBase = function(platform) {
	this._platform = platform;
	this.setNativeListeners();
};
$hxClasses["cocktail.port.base.MouseListenerBase"] = cocktail_port_base_MouseListenerBase;
cocktail_port_base_MouseListenerBase.__name__ = true;
cocktail_port_base_MouseListenerBase.prototype = {
	dispose: function() {
		this.removeNativeListeners();
		this._platform = null;
	}
	,onNativeMouseDown: function(event) {
		if(this.onMouseDown != null) this.onMouseDown(this.getMouseEvent(event));
	}
	,onNativeMouseUp: function(event) {
		if(this.onMouseUp != null) this.onMouseUp(this.getMouseEvent(event));
	}
	,onNativeMouseMove: function(event) {
		if(this.onMouseMove != null) this.onMouseMove(this.getMouseEvent(event));
	}
	,onNativeMouseWheel: function(event) {
		if(this.onMouseWheel != null) this.onMouseWheel(this.getWheelEvent(event));
	}
	,onNativeMouseLeave: function(event) {
		if(this.onMouseLeave != null) this.onMouseLeave(this.getEvent(event));
	}
	,setNativeListeners: function() {
	}
	,removeNativeListeners: function() {
	}
	,getMouseEvent: function(event) {
		return null;
	}
	,getWheelEvent: function(event) {
		return null;
	}
	,getEvent: function(event) {
		return null;
	}
	,__class__: cocktail_port_base_MouseListenerBase
};
var cocktail_port_base_NativeHttpBase = function(timer) {
	cocktail_core_event_EventTarget.call(this);
	this._timer = timer;
};
$hxClasses["cocktail.port.base.NativeHttpBase"] = cocktail_port_base_NativeHttpBase;
cocktail_port_base_NativeHttpBase.__name__ = true;
cocktail_port_base_NativeHttpBase.__super__ = cocktail_core_event_EventTarget;
cocktail_port_base_NativeHttpBase.prototype = $extend(cocktail_core_event_EventTarget.prototype,{
	load: function(url,method,data,authorRequestHeaders,dataFormat) {
		this.status = 0;
		this.total = 0;
		this.loaded = 0;
		this.responseHeaders = new haxe_ds_StringMap();
		this.responseHeadersLoaded = false;
		this.response = null;
		this.error = false;
		this.complete = false;
		this._closed = false;
		this._url = url;
		this.doLoad(url,method,data,authorRequestHeaders,dataFormat);
		this._timer.delay($bind(this,this.onLoadProgress),50);
	}
	,doLoad: function(url,method,data,authorRequestHeaders,dataFormat) {
	}
	,onLoadProgress: function(time) {
		if(this.error == true) {
			var errorEvent = new cocktail_core_event_Event();
			errorEvent.initEvent("error",false,false);
			this.dispatchEvent(errorEvent);
		} else if(this.complete == true) {
			var loadEvent = new cocktail_core_event_Event();
			loadEvent.initEvent("load",false,false);
			this.dispatchEvent(loadEvent);
		} else if(this._closed == false) {
			var progressEvent = new cocktail_core_event_ProgressEvent();
			progressEvent.initProgressEvent("progress",false,false,false,this.get_loaded(),this.get_total());
			this.dispatchEvent(progressEvent);
			this._timer.delay($bind(this,this.onLoadProgress),50);
		}
	}
	,get_total: function() {
		return -1;
	}
	,get_loaded: function() {
		return -1;
	}
	,__class__: cocktail_port_base_NativeHttpBase
	,__properties__: {get_loaded:"get_loaded",get_total:"get_total"}
});
var cocktail_port_base_NativeInputBase = function(node) {
	this._node = node;
};
$hxClasses["cocktail.port.base.NativeInputBase"] = cocktail_port_base_NativeInputBase;
cocktail_port_base_NativeInputBase.__name__ = true;
cocktail_port_base_NativeInputBase.prototype = {
	attach: function(graphicContext) {
	}
	,detach: function(graphicContext) {
	}
	,focus: function() {
	}
	,blur: function() {
	}
	,set_viewport: function(value) {
		return this.viewport = value;
	}
	,set_clipRect: function(value) {
		return this.clipRect = value;
	}
	,get_value: function() {
		return this.value;
	}
	,set_value: function(textValue) {
		return this.value = textValue;
	}
	,set_checked: function(value) {
		return this.checked = value;
	}
	,set_maxLength: function(value) {
		return this.maxLength = value;
	}
	,set_disabled: function(value) {
		return this.disabled = value;
	}
	,set_readonly: function(value) {
		return this.readonly = value;
	}
	,get_intrinsicWidth: function() {
		return 0;
	}
	,get_intrinsicHeight: function() {
		return 0;
	}
	,__class__: cocktail_port_base_NativeInputBase
	,__properties__: {get_intrinsicHeight:"get_intrinsicHeight",get_intrinsicWidth:"get_intrinsicWidth",set_clipRect:"set_clipRect",set_viewport:"set_viewport",set_readonly:"set_readonly",set_disabled:"set_disabled",set_maxLength:"set_maxLength",set_checked:"set_checked",set_value:"set_value",get_value:"get_value"}
};
var cocktail_port_base_NativeLayerBase = function() {
	this.graphics = new cocktail_port_platform_flash_$player_GraphicsSurface();
};
$hxClasses["cocktail.port.base.NativeLayerBase"] = cocktail_port_base_NativeLayerBase;
cocktail_port_base_NativeLayerBase.__name__ = true;
cocktail_port_base_NativeLayerBase.prototype = {
	dispose: function() {
		this.graphics.dispose();
		this.graphics = null;
	}
	,__class__: cocktail_port_base_NativeLayerBase
};
var cocktail_port_base_NativeMedia = function() {
	this.set_alpha(1.0);
	this.set_matrix(new cocktail_core_geom_Matrix());
	this.set_viewport(new cocktail_core_geom_RectangleVO());
};
$hxClasses["cocktail.port.base.NativeMedia"] = cocktail_port_base_NativeMedia;
cocktail_port_base_NativeMedia.__name__ = true;
cocktail_port_base_NativeMedia.prototype = {
	play: function() {
	}
	,seek: function(time) {
	}
	,canPlayType: function(type) {
		return null;
	}
	,attach: function(graphicsContext) {
	}
	,detach: function(graphicsContext) {
	}
	,onNativeLoadedMetaData: function() {
		if(this.onLoadedMetaData != null) {
			var loaddedMetadataEvent = new cocktail_core_event_Event();
			loaddedMetadataEvent.initEvent("loadedmetadata",false,false);
			this.onLoadedMetaData(loaddedMetadataEvent);
		}
	}
	,get_bytesTotal: function() {
		return 0;
	}
	,get_bytesLoaded: function() {
		return 0;
	}
	,get_currentTime: function() {
		return 0;
	}
	,get_height: function() {
		return null;
	}
	,get_width: function() {
		return null;
	}
	,get_duration: function() {
		return 0;
	}
	,set_src: function(value) {
		return value;
	}
	,set_volume: function(value) {
		return value;
	}
	,get_viewport: function() {
		return this.viewport;
	}
	,set_viewport: function(value) {
		return this.viewport = value;
	}
	,set_matrix: function(value) {
		return this.matrix = value;
	}
	,set_alpha: function(value) {
		return this.alpha = value;
	}
	,__class__: cocktail_port_base_NativeMedia
	,__properties__: {set_alpha:"set_alpha",set_matrix:"set_matrix",set_viewport:"set_viewport",get_viewport:"get_viewport",get_bytesTotal:"get_bytesTotal",get_bytesLoaded:"get_bytesLoaded",get_currentTime:"get_currentTime",get_height:"get_height",get_width:"get_width",set_src:"set_src",set_volume:"set_volume",get_duration:"get_duration"}
};
var cocktail_port_base_NativeTextBase = function(nativeTextElement) {
	this._nativeTextElement = nativeTextElement;
};
$hxClasses["cocktail.port.base.NativeTextBase"] = cocktail_port_base_NativeTextBase;
cocktail_port_base_NativeTextBase.__name__ = true;
cocktail_port_base_NativeTextBase.prototype = {
	__class__: cocktail_port_base_NativeTextBase
};
var cocktail_port_base_NativeTextInputBase = function(node) {
	cocktail_port_base_NativeInputBase.call(this,node);
};
$hxClasses["cocktail.port.base.NativeTextInputBase"] = cocktail_port_base_NativeTextInputBase;
cocktail_port_base_NativeTextInputBase.__name__ = true;
cocktail_port_base_NativeTextInputBase.__super__ = cocktail_port_base_NativeInputBase;
cocktail_port_base_NativeTextInputBase.prototype = $extend(cocktail_port_base_NativeInputBase.prototype,{
	get_intrinsicWidth: function() {
		return 150;
	}
	,get_intrinsicHeight: function() {
		return 30;
	}
	,__class__: cocktail_port_base_NativeTextInputBase
});
var cocktail_port_base_PlatformBase = function() {
	this.setNativeListeners();
	this.mouseListener = new cocktail_port_platform_flash_$player_MouseListener(this);
	this.keyboardListener = new cocktail_port_platform_flash_$player_KeyboardListener(this);
	this.touchListener = new cocktail_port_platform_flash_$player_TouchListener(this);
};
$hxClasses["cocktail.port.base.PlatformBase"] = cocktail_port_base_PlatformBase;
cocktail_port_base_PlatformBase.__name__ = true;
cocktail_port_base_PlatformBase.prototype = {
	dispose: function() {
		this.removeNativeListeners();
		this.mouseListener.dispose();
		this.mouseListener = null;
		this.keyboardListener.dispose();
		this.keyboardListener = null;
		this.touchListener.dispose();
		this.touchListener = null;
	}
	,getNativeViewportHeight: function() {
		return -1;
	}
	,getNativeViewportWidth: function() {
		return -1;
	}
	,getNativeViewportX: function() {
		return -1;
	}
	,getNativeViewportY: function() {
		return -1;
	}
	,onViewportUpdate: function() {
	}
	,onNativeResize: function(event) {
		if(this.onResize != null) this.onResize(this.getUIEvent(event));
	}
	,triggerResizeEvent: function() {
		var resizeEvent = new cocktail_core_event_UIEvent();
		resizeEvent.initUIEvent("resize",false,false,null,0.0);
		if(this.onResize != null) this.onResize(resizeEvent);
	}
	,setNativeListeners: function() {
	}
	,removeNativeListeners: function() {
	}
	,getUIEvent: function(event) {
		return null;
	}
	,set_viewport: function(value) {
		this.viewport = value;
		this.onViewportUpdate();
		this.triggerResizeEvent();
		return this.viewport = value;
	}
	,get_viewportHeight: function() {
		if(this.viewport != null) return this.viewport.height; else return this.getNativeViewportHeight();
	}
	,get_viewportWidth: function() {
		if(this.viewport != null) return this.viewport.width; else return this.getNativeViewportWidth();
	}
	,get_viewportX: function() {
		if(this.viewport != null) return this.viewport.x; else return this.getNativeViewportX();
	}
	,get_viewportY: function() {
		if(this.viewport != null) return this.viewport.y; else return this.getNativeViewportY();
	}
	,__class__: cocktail_port_base_PlatformBase
	,__properties__: {set_viewport:"set_viewport",get_viewportY:"get_viewportY",get_viewportX:"get_viewportX",get_viewportWidth:"get_viewportWidth",get_viewportHeight:"get_viewportHeight"}
};
var cocktail_port_base_PlatformTimerBase = function(updateCallback) {
};
$hxClasses["cocktail.port.base.PlatformTimerBase"] = cocktail_port_base_PlatformTimerBase;
cocktail_port_base_PlatformTimerBase.__name__ = true;
cocktail_port_base_PlatformTimerBase.prototype = {
	dispose: function() {
	}
	,__class__: cocktail_port_base_PlatformTimerBase
};
var cocktail_port_base_ResourceBase = function(url) {
	cocktail_core_event_EventTarget.call(this);
	this.loaded = false;
	this.loadedWithError = false;
	this.load(url);
};
$hxClasses["cocktail.port.base.ResourceBase"] = cocktail_port_base_ResourceBase;
cocktail_port_base_ResourceBase.__name__ = true;
cocktail_port_base_ResourceBase.__super__ = cocktail_core_event_EventTarget;
cocktail_port_base_ResourceBase.prototype = $extend(cocktail_core_event_EventTarget.prototype,{
	load: function(url) {
	}
	,onLoadComplete: function() {
		this.loaded = true;
		var loadEvent = new cocktail_core_event_UIEvent();
		loadEvent.initUIEvent("load",false,false,null,0.0);
		this.dispatchEvent(loadEvent);
	}
	,onLoadError: function() {
		this.loadedWithError = true;
		var errorEvent = new cocktail_core_event_UIEvent();
		errorEvent.initUIEvent("error",false,false,null,0.0);
		this.dispatchEvent(errorEvent);
	}
	,__class__: cocktail_port_base_ResourceBase
});
var cocktail_port_base_TouchListenerBase = function(platform) {
	this._platform = platform;
	this.setNativeListeners();
};
$hxClasses["cocktail.port.base.TouchListenerBase"] = cocktail_port_base_TouchListenerBase;
cocktail_port_base_TouchListenerBase.__name__ = true;
cocktail_port_base_TouchListenerBase.prototype = {
	dispose: function() {
		this.removeNativeListeners();
		this._platform = null;
	}
	,onNativeTouchStart: function(event) {
		if(this.onTouchStart != null) this.onTouchStart(this.getTouchEvent(event));
	}
	,onNativeTouchEnd: function(event) {
		if(this.onTouchEnd != null) this.onTouchEnd(this.getTouchEvent(event));
	}
	,onNativeTouchMove: function(event) {
		if(this.onTouchMove != null) this.onTouchMove(this.getTouchEvent(event));
	}
	,setNativeListeners: function() {
	}
	,removeNativeListeners: function() {
	}
	,getTouchEvent: function(event) {
		return null;
	}
	,__class__: cocktail_port_base_TouchListenerBase
};
var cocktail_port_platform_flash_$player_FontBuilder = function() {
	cocktail_port_base_FontBuilderBase.call(this);
};
$hxClasses["cocktail.port.platform.flash_player.FontBuilder"] = cocktail_port_platform_flash_$player_FontBuilder;
cocktail_port_platform_flash_$player_FontBuilder.__name__ = true;
cocktail_port_platform_flash_$player_FontBuilder.__super__ = cocktail_port_base_FontBuilderBase;
cocktail_port_platform_flash_$player_FontBuilder.prototype = $extend(cocktail_port_base_FontBuilderBase.prototype,{
	getFontMetrics: function(fontFamily,fontSize) {
		var textField = new openfl_text_TextField();
		textField.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
		textField.set_text("X");
		var textFormat = new openfl_text_TextFormat();
		textFormat.size = fontSize;
		textFormat.font = fontFamily;
		textField.setTextFormat(textFormat);
		var fontMetricsVO = new cocktail_core_font_FontMetricsVO(fontSize,0,0,0,0,0,0,0,0);
		this.setAscentAndDescent(textField,fontMetricsVO,textFormat);
		textField.set_text("x");
		textField.setTextFormat(textFormat);
		fontMetricsVO.xHeight = textField.get_textHeight();
		textField.set_text(" ");
		textField.setTextFormat(textFormat);
		fontMetricsVO.spaceWidth = textField.get_width();
		return fontMetricsVO;
	}
	,createNativeTextElement: function(text,style,fontFamily) {
		var textField = new openfl_text_TextField();
		textField.set_text(text);
		textField.set_selectable(false);
		textField.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
		var embeddedFont = openfl_Assets.getFont(fontFamily);
		if(embeddedFont != null) {
			fontFamily = embeddedFont.name;
			textField.embedFonts = true;
		}
		textField.setTextFormat(this.getTextFormat(style,fontFamily));
		return textField;
	}
	,getNativeFontFamily: function(value) {
		var fontFamily = "";
		var length = value.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var fontName = value[i];
			var _g1 = fontName.toUpperCase();
			switch(_g1) {
			case "SERIF":
				fontName = "_serif";
				break;
			case "SANS-SERIF":
				fontName = "_sans";
				break;
			case "MONOSPACE":
				fontName = "_typewriter";
				break;
			}
			fontFamily += fontName;
			if(i < value.length - 1) fontFamily += ",";
		}
		return fontFamily;
	}
	,setAscentAndDescent: function(textField,fontMetrics,textFormat) {
		var textLineMetrics = textField.getLineMetrics(0);
		fontMetrics.ascent = textLineMetrics.ascent;
		fontMetrics.descent = textLineMetrics.descent;
	}
	,getTextFormat: function(style,fontFamily) {
		var usedValues = style.usedValues;
		var textFormat = new openfl_text_TextFormat();
		textFormat.font = fontFamily;
		textFormat.letterSpacing = usedValues.letterSpacing;
		textFormat.size = style.getAbsoluteLength(style.getTransitionablePropertyValue(34));
		var bold = false;
		{
			var _g = style.getComputedOrInitialProperty(35);
			switch(_g[1]) {
			case 4:
				var value = _g[2];
				switch(value[1]) {
				case 1:case 2:
					bold = true;
					break;
				default:
				}
				break;
			case 0:
				var value1 = _g[2];
				if(value1 > 400) bold = true;
				break;
			default:
			}
		}
		textFormat.bold = bold;
		var fontStyle = style.getKeyword(style.getComputedOrInitialProperty(36));
		textFormat.italic = fontStyle == cocktail_core_css_CSSKeywordValue.ITALIC || fontStyle == cocktail_core_css_CSSKeywordValue.OBLIQUE;
		textFormat.color = usedValues.color.color;
		return textFormat;
	}
	,__class__: cocktail_port_platform_flash_$player_FontBuilder
});
var cocktail_port_platform_flash_$player_GraphicsSurface = function() {
	cocktail_port_base_GraphicsSurfaceBase.call(this);
	if(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle == null) {
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle = new openfl_geom_Rectangle();
		cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint = new openfl_geom_Point();
		cocktail_port_platform_flash_$player_GraphicsSurface._flashAlphaPoint = new openfl_geom_Point();
		cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix = new openfl_geom_Matrix();
		cocktail_port_platform_flash_$player_GraphicsSurface._fillRectRectangle = new cocktail_core_geom_RectangleVO();
		cocktail_port_platform_flash_$player_GraphicsSurface._fillRectPoint = new cocktail_core_geom_PointVO(0.0,0.0);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashColorTransform = new openfl_geom_ColorTransform();
		cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle = new cocktail_core_geom_RectangleVO();
	}
};
$hxClasses["cocktail.port.platform.flash_player.GraphicsSurface"] = cocktail_port_platform_flash_$player_GraphicsSurface;
cocktail_port_platform_flash_$player_GraphicsSurface.__name__ = true;
cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle = null;
cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint = null;
cocktail_port_platform_flash_$player_GraphicsSurface._flashAlphaPoint = null;
cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix = null;
cocktail_port_platform_flash_$player_GraphicsSurface._flashColorTransform = null;
cocktail_port_platform_flash_$player_GraphicsSurface._fillRectRectangle = null;
cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle = null;
cocktail_port_platform_flash_$player_GraphicsSurface._fillRectPoint = null;
cocktail_port_platform_flash_$player_GraphicsSurface.__super__ = cocktail_port_base_GraphicsSurfaceBase;
cocktail_port_platform_flash_$player_GraphicsSurface.prototype = $extend(cocktail_port_base_GraphicsSurfaceBase.prototype,{
	initBitmapData: function(width,height) {
		this.nativeBitmapData = new openfl_display_BitmapData(width,height,true,0);
	}
	,clear: function(x,y,width,height) {
		if(this.nativeBitmapData != null) {
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = x;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = y;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = width;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = height;
			this.nativeBitmapData.fillRect(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle,0);
		}
	}
	,beginTransparency: function(alpha) {
		cocktail_port_base_GraphicsSurfaceBase.prototype.beginTransparency.call(this,alpha);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashColorTransform.alphaMultiplier = alpha;
	}
	,dispose: function() {
		if(this.nativeBitmapData != null) {
			this.nativeBitmapData.dispose();
			this.nativeBitmapData = null;
		}
	}
	,drawImage: function(bitmapData,matrix,sourceRect,clipRect) {
		if(this.nativeBitmapData == null) return;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = sourceRect.x + clipRect.x - matrix.e;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = sourceRect.y + clipRect.y - matrix.f;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = clipRect.width;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = clipRect.height;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.a = matrix.a;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.b = matrix.b;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.c = matrix.c;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.d = matrix.d;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.tx = matrix.e;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.ty = matrix.f;
		if(this._useTransformations == true) {
			cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.tx += this._matrix.e;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.ty += this._matrix.f;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width += this._matrix.e;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height += this._matrix.f;
		}
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height);
		if(this._useTransparency == true) this.nativeBitmapData.draw(bitmapData,cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix,cocktail_port_platform_flash_$player_GraphicsSurface._flashColorTransform,null,cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle,true); else this.nativeBitmapData.draw(bitmapData,cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix,null,null,cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle,true);
	}
	,copyPixels: function(bitmapData,sourceRect,destPoint,clipRect) {
		if(this.nativeBitmapData == null) return;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = sourceRect.x;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = sourceRect.y;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = sourceRect.width;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = sourceRect.height;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x = destPoint.x;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y = destPoint.y;
		if(destPoint.x + sourceRect.width > clipRect.x + clipRect.width) cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width += clipRect.x + clipRect.width - (destPoint.x + sourceRect.width);
		if(destPoint.x < clipRect.x) {
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x += clipRect.x - destPoint.x;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x += clipRect.x - destPoint.x;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width -= clipRect.x - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > clipRect.y + clipRect.height) cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height += clipRect.y + clipRect.height - (destPoint.y + sourceRect.height);
		if(destPoint.y < clipRect.y) {
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y += clipRect.y - destPoint.y;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y += clipRect.y - destPoint.y;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height -= clipRect.y - destPoint.y;
		}
		if(this._useTransformations == true) {
			cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x += this._matrix.e;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y += this._matrix.f;
		}
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y);
		if(this._useTransparency == true) {
			cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.identity();
			cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.tx = Math.floor(destPoint.x);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.ty = Math.floor(destPoint.y);
			this.nativeBitmapData.draw(bitmapData,cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix,cocktail_port_platform_flash_$player_GraphicsSurface._flashColorTransform,null,null,false);
		} else this.nativeBitmapData.copyPixels(bitmapData,cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle,cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint,null,null,false);
	}
	,fillRect: function(rect,color,clipRect) {
		if(this.nativeBitmapData == null) return;
		var argbColor = color.color;
		var alpha = Math.round(255 * color.alpha);
		argbColor += alpha << 24;
		if(color.alpha != 1.0 || this._useTransparency == true) {
			cocktail_port_platform_flash_$player_GraphicsSurface._fillRectRectangle.width = rect.width;
			cocktail_port_platform_flash_$player_GraphicsSurface._fillRectRectangle.height = rect.height;
			cocktail_port_platform_flash_$player_GraphicsSurface._fillRectPoint.x = rect.x;
			cocktail_port_platform_flash_$player_GraphicsSurface._fillRectPoint.y = rect.y;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height);
			var fillRectBitmapData = new openfl_display_BitmapData(Math.round(rect.width),Math.round(rect.height),true,argbColor);
			this.copyPixels(fillRectBitmapData,cocktail_port_platform_flash_$player_GraphicsSurface._fillRectRectangle,cocktail_port_platform_flash_$player_GraphicsSurface._fillRectPoint,clipRect);
			fillRectBitmapData.dispose();
		} else {
			cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.x = rect.x;
			cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.y = rect.y;
			cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.width = rect.width;
			cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.height = rect.height;
			if(this._useTransformations == true) {
				cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.x += this._matrix.e;
				cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.y += this._matrix.f;
			}
			cocktail_core_geom_GeomUtils.intersectBounds(cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle,clipRect,cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.x;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.y;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.width;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.height;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height);
			this.nativeBitmapData.fillRect(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle,argbColor);
		}
	}
	,copyRect: function(rect,x,y) {
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = rect.x;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = rect.y;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = rect.width;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = rect.height;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x = x;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y = y;
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y);
		this.nativeBitmapData.copyPixels(this.nativeBitmapData,cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle,cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint,null,null,false);
	}
	,__class__: cocktail_port_platform_flash_$player_GraphicsSurface
});
var cocktail_port_platform_flash_$player_ImageResource = function(url) {
	this._loader = new openfl_display_Loader();
	cocktail_port_base_ResourceBase.call(this,url);
};
$hxClasses["cocktail.port.platform.flash_player.ImageResource"] = cocktail_port_platform_flash_$player_ImageResource;
cocktail_port_platform_flash_$player_ImageResource.__name__ = true;
cocktail_port_platform_flash_$player_ImageResource.__super__ = cocktail_port_base_ResourceBase;
cocktail_port_platform_flash_$player_ImageResource.prototype = $extend(cocktail_port_base_ResourceBase.prototype,{
	load: function(url) {
		if(url.indexOf("http://") == -1 && url.indexOf("https://") == -1) {
			var asset = openfl_Assets.getBitmapData(url);
			if(asset != null) {
				this.nativeResource = asset;
				this.intrinsicHeight = asset.height;
				this.intrinsicWidth = asset.width;
				this.intrinsicRatio = this.intrinsicWidth / this.intrinsicHeight;
				this.onLoadComplete();
				return;
			}
		}
		this._loader.unload();
		this._loader.contentLoaderInfo.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.onNativeLoadComplete));
		this._loader.contentLoaderInfo.addEventListener(openfl_events_IOErrorEvent.IO_ERROR,$bind(this,this.onNativeLoadIOError));
		var request = new openfl_net_URLRequest(url);
		this._loader.load(request);
	}
	,onNativeLoadComplete: function(event) {
		this.removeLoaderListeners(this._loader);
		this.setIntrinsicDimensions(this._loader);
		this.setNativeResource(this._loader);
	}
	,onNativeLoadIOError: function(event) {
		this.removeLoaderListeners(this._loader);
		this.onLoadError();
	}
	,removeLoaderListeners: function(loader) {
		loader.contentLoaderInfo.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this.onNativeLoadComplete));
		loader.contentLoaderInfo.removeEventListener(openfl_events_IOErrorEvent.IO_ERROR,$bind(this,this.onNativeLoadIOError));
	}
	,setIntrinsicDimensions: function(loader) {
		this.intrinsicHeight = Math.round(loader.get_height());
		this.intrinsicWidth = Math.round(loader.get_width());
		this.intrinsicRatio = this.intrinsicWidth / this.intrinsicHeight;
	}
	,setNativeResource: function(loader) {
		if(loader.contentLoaderInfo.childAllowsParent == true) {
			this.getBitmapDataFromLoader(loader);
			this.onLoadComplete();
		} else {
		}
	}
	,getBitmapDataFromLoader: function(loader) {
		var bitmap = loader.content;
		this.nativeResource = bitmap.bitmapData;
	}
	,__class__: cocktail_port_platform_flash_$player_ImageResource
});
var cocktail_port_platform_flash_$player_KeyboardListener = function(platform) {
	cocktail_port_base_KeyboardListenerBase.call(this,platform);
};
$hxClasses["cocktail.port.platform.flash_player.KeyboardListener"] = cocktail_port_platform_flash_$player_KeyboardListener;
cocktail_port_platform_flash_$player_KeyboardListener.__name__ = true;
cocktail_port_platform_flash_$player_KeyboardListener.__super__ = cocktail_port_base_KeyboardListenerBase;
cocktail_port_platform_flash_$player_KeyboardListener.prototype = $extend(cocktail_port_base_KeyboardListenerBase.prototype,{
	setNativeListeners: function() {
		openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.onNativeKeyDown));
		openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onNativeKeyUp));
	}
	,removeNativeListeners: function() {
		openfl_Lib.current.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.onNativeKeyDown));
		openfl_Lib.current.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onNativeKeyUp));
	}
	,getKeyData: function(event) {
		var typedEvent = event;
		var eventType;
		var _g = typedEvent.type;
		switch(_g) {
		case "keyDown":
			eventType = "keydown";
			break;
		case "keyUp":
			eventType = "keyup";
			break;
		default:
			eventType = typedEvent.type;
		}
		var keyboardEvent = new cocktail_core_event_KeyboardEvent();
		keyboardEvent.initKeyboardEvent(eventType,true,true,null,typedEvent.charCode == null?"null":"" + typedEvent.charCode,typedEvent.keyCode == null?"null":"" + typedEvent.keyCode,0,this.getModifersList(typedEvent),false,"");
		return keyboardEvent;
	}
	,getModifersList: function(keyboardEvent) {
		var modifiersList = "";
		if(keyboardEvent.shiftKey == true) modifiersList += "Shift ";
		if(keyboardEvent.ctrlKey == true) modifiersList += "Control ";
		if(keyboardEvent.altKey == true) modifiersList += "Alt";
		return modifiersList;
	}
	,__class__: cocktail_port_platform_flash_$player_KeyboardListener
});
var cocktail_port_platform_flash_$player_MouseListener = function(platform) {
	cocktail_port_base_MouseListenerBase.call(this,platform);
};
$hxClasses["cocktail.port.platform.flash_player.MouseListener"] = cocktail_port_platform_flash_$player_MouseListener;
cocktail_port_platform_flash_$player_MouseListener.__name__ = true;
cocktail_port_platform_flash_$player_MouseListener.__super__ = cocktail_port_base_MouseListenerBase;
cocktail_port_platform_flash_$player_MouseListener.prototype = $extend(cocktail_port_base_MouseListenerBase.prototype,{
	setMouseCursor: function(cursor) {
	}
	,setNativeListeners: function() {
		this._platform.hitTestingSprite.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onNativeMouseDown));
		this._platform.hitTestingSprite.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onNativeMouseUp));
		this._platform.hitTestingSprite.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onNativeMouseMove));
		this._platform.hitTestingSprite.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.onNativeMouseWheel));
		this._platform.hitTestingSprite.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onNativeMouseLeave));
		openfl_Lib.current.stage.addEventListener(openfl_events_Event.MOUSE_LEAVE,$bind(this,this.onNativeMouseLeave));
	}
	,removeNativeListeners: function() {
		this._platform.hitTestingSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onNativeMouseDown));
		this._platform.hitTestingSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onNativeMouseUp));
		this._platform.hitTestingSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onNativeMouseMove));
		this._platform.hitTestingSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.onNativeMouseWheel));
		this._platform.hitTestingSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onNativeMouseLeave));
		openfl_Lib.current.stage.removeEventListener(openfl_events_Event.MOUSE_LEAVE,$bind(this,this.onNativeMouseLeave));
	}
	,getMouseEvent: function(event) {
		var typedEvent = event;
		var eventType;
		var _g = typedEvent.type;
		switch(_g) {
		case "mouseDown":
			eventType = "mousedown";
			break;
		case "mouseUp":
			eventType = "mouseup";
			break;
		case "mouseMove":
			eventType = "mousemove";
			break;
		default:
			eventType = typedEvent.type;
		}
		var mouseEvent = new cocktail_core_event_MouseEvent();
		var localPoint = new openfl_geom_Point(typedEvent.localX,typedEvent.localY);
		mouseEvent.initMouseEvent(eventType,true,true,null,0.0,Math.round(localPoint.x),Math.round(localPoint.y),Math.round(localPoint.x),Math.round(localPoint.y),typedEvent.ctrlKey,typedEvent.altKey,typedEvent.shiftKey,false,0,null);
		return mouseEvent;
	}
	,getWheelEvent: function(event) {
		var typedEvent = event;
		var wheelEvent = new cocktail_core_event_WheelEvent();
		var offset = openfl_Lib.current.localToGlobal(new openfl_geom_Point());
		wheelEvent.initWheelEvent("wheel",true,true,null,0.0,Math.round(typedEvent.stageX - offset.x),Math.round(typedEvent.stageY - offset.y),Math.round(typedEvent.stageX - offset.x),Math.round(typedEvent.stageY - offset.y),0,null,"",0,typedEvent.delta,0,0);
		return wheelEvent;
	}
	,getEvent: function(event) {
		var typedEvent = event;
		var event1 = new cocktail_core_event_Event();
		event1.initEvent("mouseleave",true,false);
		return event1;
	}
	,__class__: cocktail_port_platform_flash_$player_MouseListener
});
var cocktail_port_platform_flash_$player_NativeAudio = function() {
	cocktail_port_base_NativeMedia.call(this);
	this._currentTime = 0.0;
	this._isPlaying = false;
};
$hxClasses["cocktail.port.platform.flash_player.NativeAudio"] = cocktail_port_platform_flash_$player_NativeAudio;
cocktail_port_platform_flash_$player_NativeAudio.__name__ = true;
cocktail_port_platform_flash_$player_NativeAudio.__super__ = cocktail_port_base_NativeMedia;
cocktail_port_platform_flash_$player_NativeAudio.prototype = $extend(cocktail_port_base_NativeMedia.prototype,{
	play: function() {
		this._isPlaying = true;
		this.seek(this._currentTime / 1000);
	}
	,seek: function(time) {
		if(this._soundChannel != null) this._soundChannel.stop();
		if(this._isPlaying == true) this._soundChannel = this._sound.play(time * 1000,0,new openfl_media_SoundTransform(this.volume,0)); else this._currentTime = time;
	}
	,canPlayType: function(type) {
		if(type.indexOf("mp3") != -1) return "probably";
		return "maybe";
	}
	,onID3DataReceived: function(event) {
		this.onNativeLoadedMetaData();
		this._sound.removeEventListener(openfl_events_Event.ID3,$bind(this,this.onID3DataReceived));
		this._sound.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this.onID3DataReceived));
	}
	,initSound: function(src) {
		var asset = openfl_Assets.getSound(src);
		if(asset != null) {
			this._sound = asset;
			this.onNativeLoadedMetaData();
			return;
		}
		this._sound = new openfl_media_Sound();
		this._sound.addEventListener(openfl_events_Event.ID3,$bind(this,this.onID3DataReceived));
		this._sound.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.onID3DataReceived));
		this._sound.addEventListener(openfl_events_IOErrorEvent.IO_ERROR,$bind(this,this.onIOError));
		this._sound.load(new openfl_net_URLRequest(src));
	}
	,onIOError: function(e) {
	}
	,set_volume: function(value) {
		this.volume = value;
		if(this._soundChannel != null) this._soundChannel.set_soundTransform(new openfl_media_SoundTransform(value,0));
		return value;
	}
	,get_bytesTotal: function() {
		return this._sound.bytesTotal;
	}
	,get_bytesLoaded: function() {
		return this._sound.bytesLoaded;
	}
	,get_duration: function() {
		return this._sound.length / 1000;
	}
	,get_currentTime: function() {
		return this._soundChannel.get_position() / 1000;
	}
	,set_src: function(value) {
		this._currentTime = 0.0;
		this.initSound(value);
		return value;
	}
	,__class__: cocktail_port_platform_flash_$player_NativeAudio
});
var cocktail_port_platform_flash_$player_NativeButton = function(node) {
	cocktail_port_base_NativeInputBase.call(this,node);
};
$hxClasses["cocktail.port.platform.flash_player.NativeButton"] = cocktail_port_platform_flash_$player_NativeButton;
cocktail_port_platform_flash_$player_NativeButton.__name__ = true;
cocktail_port_platform_flash_$player_NativeButton.__super__ = cocktail_port_base_NativeInputBase;
cocktail_port_platform_flash_$player_NativeButton.prototype = $extend(cocktail_port_base_NativeInputBase.prototype,{
	set_value: function(textValue) {
		this._node.set_innerHTML(textValue);
		return textValue;
	}
	,__class__: cocktail_port_platform_flash_$player_NativeButton
});
var cocktail_port_platform_flash_$player_NativeHttp = function(timer) {
	cocktail_port_base_NativeHttpBase.call(this,timer);
	this._urlLoader = new openfl_net_URLLoader();
};
$hxClasses["cocktail.port.platform.flash_player.NativeHttp"] = cocktail_port_platform_flash_$player_NativeHttp;
cocktail_port_platform_flash_$player_NativeHttp.__name__ = true;
cocktail_port_platform_flash_$player_NativeHttp.__super__ = cocktail_port_base_NativeHttpBase;
cocktail_port_platform_flash_$player_NativeHttp.prototype = $extend(cocktail_port_base_NativeHttpBase.prototype,{
	doLoad: function(url,method,data,authorRequestHeaders,dataFormat) {
		cocktail_port_base_NativeHttpBase.prototype.doLoad.call(this,url,method,data,authorRequestHeaders,dataFormat);
		if(url.indexOf("http://") == -1 && url.indexOf("https://") == -1) {
			var asset = openfl_Assets.getText(url);
			if(asset != null) {
				this.response = asset;
				this.complete = true;
				this.responseHeadersLoaded = true;
				return;
			}
		}
		var urlRequest = new openfl_net_URLRequest(url);
		urlRequest.method = method;
		urlRequest.data = data;
		switch(dataFormat[1]) {
		case 1:
			this._urlLoader.set_dataFormat(openfl_net_URLLoaderDataFormat.TEXT);
			break;
		case 0:
			this._urlLoader.set_dataFormat(openfl_net_URLLoaderDataFormat.BINARY);
			break;
		}
		this._urlLoader.addEventListener(openfl_events_HTTPStatusEvent.HTTP_STATUS,$bind(this,this.onHttpStatus));
		this._urlLoader.addEventListener(openfl_events_IOErrorEvent.IO_ERROR,$bind(this,this.onIOError));
		this._urlLoader.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.onNativeLoadComplete));
		this._urlLoader.load(urlRequest);
		this.responseHeadersLoaded = true;
	}
	,onIOError: function(event) {
		this.error = true;
	}
	,onNativeLoadComplete: function(event) {
		this.response = this._urlLoader.data;
		this.complete = true;
	}
	,onHttpStatus: function(event) {
		this.status = event.status;
	}
	,get_total: function() {
		return this._urlLoader.bytesTotal;
	}
	,get_loaded: function() {
		return this._urlLoader.bytesLoaded;
	}
	,__class__: cocktail_port_platform_flash_$player_NativeHttp
});
var cocktail_port_platform_flash_$player_NativeLayer = function() {
	cocktail_port_base_NativeLayerBase.call(this);
	this._nativeLayer = new openfl_display_Sprite();
	this._nativeLayer.mouseEnabled = false;
	this._childrenNativeLayer = new openfl_display_Sprite();
	this._childrenNativeLayer.mouseEnabled = false;
	this._bitmapContainer = new openfl_display_Sprite();
	this._bitmapContainer.mouseEnabled = false;
	this._width = 0;
	this._height = 0;
	this._childrenNativeLayer.addChild(this._bitmapContainer);
	this._childrenNativeLayer.addChild(this._nativeLayer);
	this.platformLayer = this._nativeLayer;
};
$hxClasses["cocktail.port.platform.flash_player.NativeLayer"] = cocktail_port_platform_flash_$player_NativeLayer;
cocktail_port_platform_flash_$player_NativeLayer.__name__ = true;
cocktail_port_platform_flash_$player_NativeLayer.__super__ = cocktail_port_base_NativeLayerBase;
cocktail_port_platform_flash_$player_NativeLayer.prototype = $extend(cocktail_port_base_NativeLayerBase.prototype,{
	attach: function(platformLayer,index) {
		platformLayer.addChildAt(this._childrenNativeLayer,index);
	}
	,detach: function(platformLayer) {
		if(this._childrenNativeLayer.parent != null) platformLayer.removeChild(this._childrenNativeLayer);
	}
	,initBitmapData: function(width,height) {
		if(this._nativeBitmap == null) {
			this.graphics.initBitmapData(width,height);
			this._nativeBitmap = new openfl_display_Bitmap(this.graphics.nativeBitmapData,openfl_display_PixelSnapping.AUTO,false);
			this._bitmapContainer.addChild(this._nativeBitmap);
		} else {
			if(this._width == width && this._height == height) return;
			this.graphics.dispose();
			this.graphics.initBitmapData(width,height);
			this._nativeBitmap.bitmapData = this.graphics.nativeBitmapData;
		}
		this._width = width;
		this._height = height;
	}
	,__class__: cocktail_port_platform_flash_$player_NativeLayer
});
var cocktail_port_platform_flash_$player_NativeTextInput = function(node) {
	var _g = this;
	cocktail_port_base_NativeTextInputBase.call(this,node);
	this._textField = new openfl_text_TextField();
	this._mask = new openfl_display_Sprite();
	this._textField.set_mask(this._mask);
	this._textField.set_type(openfl_text_TextFieldType.INPUT);
	this._textField.addEventListener(openfl_events_Event.CHANGE,function(e) {
		_g.onInput();
	});
	this._textFormat = new openfl_text_TextFormat();
	this.updateTextFormat();
};
$hxClasses["cocktail.port.platform.flash_player.NativeTextInput"] = cocktail_port_platform_flash_$player_NativeTextInput;
cocktail_port_platform_flash_$player_NativeTextInput.__name__ = true;
cocktail_port_platform_flash_$player_NativeTextInput.__super__ = cocktail_port_base_NativeTextInputBase;
cocktail_port_platform_flash_$player_NativeTextInput.prototype = $extend(cocktail_port_base_NativeTextInputBase.prototype,{
	attach: function(graphicContext) {
		var containerGraphicContext = graphicContext.nativeLayer.platformLayer;
		containerGraphicContext.addChild(this._textField);
		containerGraphicContext.addChild(this._mask);
	}
	,detach: function(graphicContext) {
		var containerGraphicContext = graphicContext.nativeLayer.platformLayer;
		containerGraphicContext.removeChild(this._textField);
		containerGraphicContext.removeChild(this._mask);
	}
	,focus: function() {
		openfl_Lib.current.stage.set_focus(this._textField);
	}
	,blur: function() {
		openfl_Lib.current.stage.set_focus(null);
	}
	,updateTextFormat: function() {
		this._textField.set_defaultTextFormat(this._textFormat);
		this._textField.setTextFormat(this._textFormat);
	}
	,set_viewport: function(value) {
		this._textField.set_x(value.x);
		this._textField.set_y(value.y);
		this._textField.set_width(value.width);
		this._textField.set_height(value.height);
		return value;
	}
	,set_clipRect: function(value) {
		this._mask.get_graphics().clear();
		this._mask.get_graphics().beginFill(16711680,0.5);
		this._mask.get_graphics().drawRect(value.x,value.y,value.width,value.height);
		this._mask.get_graphics().endFill();
		return value;
	}
	,set_fontSize: function(value) {
		this._textFormat.size = value;
		this.updateTextFormat();
		return value;
	}
	,set_italic: function(value) {
		this._textFormat.italic = value;
		this.updateTextFormat();
		return value;
	}
	,set_bold: function(value) {
		this._textFormat.bold = value;
		this.updateTextFormat();
		return value;
	}
	,set_color: function(value) {
		this._textFormat.color = value;
		this.updateTextFormat();
		return value;
	}
	,set_fontFamily: function(value) {
		switch(value) {
		case "serif":
			value = "_serif";
			break;
		case "sans-serif":
			value = "_sans";
			break;
		case "typewriter":
			value = "_typewriter";
			break;
		}
		this._textFormat.font = value;
		this.updateTextFormat();
		return value;
	}
	,get_value: function() {
		return this._textField.get_text();
	}
	,set_value: function(textValue) {
		return this._textField.set_text(textValue);
	}
	,set_maxLength: function(value) {
		if(value == -1) value = 0;
		return this._textField.maxChars = value;
	}
	,set_letterSpacing: function(value) {
		this._textFormat.letterSpacing = value;
		this.updateTextFormat();
		return value;
	}
	,__class__: cocktail_port_platform_flash_$player_NativeTextInput
});
var cocktail_port_platform_flash_$player_NativePasswordInput = function(node) {
	cocktail_port_platform_flash_$player_NativeTextInput.call(this,node);
	this._textField.displayAsPassword = true;
};
$hxClasses["cocktail.port.platform.flash_player.NativePasswordInput"] = cocktail_port_platform_flash_$player_NativePasswordInput;
cocktail_port_platform_flash_$player_NativePasswordInput.__name__ = true;
cocktail_port_platform_flash_$player_NativePasswordInput.__super__ = cocktail_port_platform_flash_$player_NativeTextInput;
cocktail_port_platform_flash_$player_NativePasswordInput.prototype = $extend(cocktail_port_platform_flash_$player_NativeTextInput.prototype,{
	__class__: cocktail_port_platform_flash_$player_NativePasswordInput
});
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
	this.__array = new Float32Array([a,b,c,d,tx,ty,0,0,1]);
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = true;
openfl_geom_Matrix.prototype = {
	clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new openfl_geom_Matrix();
		result.a = this.a * m.a + this.b * m.c;
		result.b = this.a * m.b + this.b * m.d;
		result.c = this.c * m.a + this.d * m.c;
		result.d = this.c * m.b + this.d * m.d;
		result.tx = this.tx * m.a + this.ty * m.c + m.tx;
		result.ty = this.tx * m.b + this.ty * m.d + m.ty;
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		var m = new openfl_geom_Matrix();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__toMatrix3: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,__class__: openfl_geom_Matrix
};
var cocktail_port_platform_flash_$player_NativeText = function(nativeTextElement) {
	cocktail_port_base_NativeTextBase.call(this,nativeTextElement);
	this._textField = nativeTextElement;
};
$hxClasses["cocktail.port.platform.flash_player.NativeText"] = cocktail_port_platform_flash_$player_NativeText;
cocktail_port_platform_flash_$player_NativeText.__name__ = true;
cocktail_port_platform_flash_$player_NativeText.__super__ = cocktail_port_base_NativeTextBase;
cocktail_port_platform_flash_$player_NativeText.prototype = $extend(cocktail_port_base_NativeTextBase.prototype,{
	getBitmap: function(bounds) {
		var textYOffset = this._textField.get_textHeight() - this._textField.get_height();
		this._nativeBitmap = new openfl_display_BitmapData(Math.round(bounds.width),Math.round(bounds.height - textYOffset),true,0);
		cocktail_port_platform_flash_$player_NativeText._matrix.identity();
		cocktail_port_platform_flash_$player_NativeText._matrix.translate(-2,textYOffset + 2);
		this._nativeBitmap.draw(this._textField,cocktail_port_platform_flash_$player_NativeText._matrix);
		return this._nativeBitmap;
	}
	,get_width: function() {
		return this._textField.get_textWidth();
	}
	,__class__: cocktail_port_platform_flash_$player_NativeText
});
var cocktail_port_platform_flash_$player_NativeTextArea = function(node) {
	cocktail_port_platform_flash_$player_NativeTextInput.call(this,node);
	this._textField.multiline = true;
	this._textField.set_wordWrap(true);
};
$hxClasses["cocktail.port.platform.flash_player.NativeTextArea"] = cocktail_port_platform_flash_$player_NativeTextArea;
cocktail_port_platform_flash_$player_NativeTextArea.__name__ = true;
cocktail_port_platform_flash_$player_NativeTextArea.__super__ = cocktail_port_platform_flash_$player_NativeTextInput;
cocktail_port_platform_flash_$player_NativeTextArea.prototype = $extend(cocktail_port_platform_flash_$player_NativeTextInput.prototype,{
	__class__: cocktail_port_platform_flash_$player_NativeTextArea
});
var cocktail_port_platform_flash_$player_Platform = function() {
	this.initDisplayList();
	cocktail_port_base_PlatformBase.call(this);
};
$hxClasses["cocktail.port.platform.flash_player.Platform"] = cocktail_port_platform_flash_$player_Platform;
cocktail_port_platform_flash_$player_Platform.__name__ = true;
cocktail_port_platform_flash_$player_Platform.__super__ = cocktail_port_base_PlatformBase;
cocktail_port_platform_flash_$player_Platform.prototype = $extend(cocktail_port_base_PlatformBase.prototype,{
	dispose: function() {
		cocktail_port_base_PlatformBase.prototype.dispose.call(this);
		if(this._rootSprite.parent != null) this._rootSprite.parent.removeChild(this._rootSprite);
		if(this._platformLayersRootSprite.parent != null) this._platformLayersRootSprite.parent.removeChild(this._platformLayersRootSprite);
		if(this.hitTestingSprite.parent != null) this.hitTestingSprite.parent.removeChild(this.hitTestingSprite);
	}
	,initDisplayList: function() {
		this._rootSprite = new openfl_display_Sprite();
		this._platformLayersRootSprite = new openfl_display_Sprite();
		this.hitTestingSprite = this._platformLayersRootSprite;
		this.updateHitTestingSprite();
		this._rootSprite.addChild(this._platformLayersRootSprite);
	}
	,open: function(url,name) {
		openfl_Lib.getURL(new openfl_net_URLRequest(url),name);
	}
	,enterFullscreen: function() {
		openfl_Lib.current.stage.set_displayState(openfl_display_StageDisplayState.FULL_SCREEN);
	}
	,exitFullscreen: function() {
		openfl_Lib.current.stage.set_displayState(openfl_display_StageDisplayState.NORMAL);
	}
	,fullScreenEnabled: function() {
		return Object.prototype.hasOwnProperty.call(openfl_Lib.current.stage,"allowsFullScreen");
	}
	,fullscreen: function() {
		return openfl_Lib.current.stage.__displayState == openfl_display_StageDisplayState.FULL_SCREEN;
	}
	,getRootPlatformLayer: function() {
		return this._rootSprite;
	}
	,getTopPlatformLayer: function() {
		return this._platformLayersRootSprite;
	}
	,convertToHitTestingSpriteSpace: function(point,target,hitTestingSprite) {
		if(target == hitTestingSprite) return point;
		point.x += target.get_x();
		point.y += target.get_y();
		var parent = target.parent;
		while(parent != hitTestingSprite) {
			point.x += parent.get_x();
			point.y += parent.get_y();
			parent = parent.parent;
			if(parent == null) return point;
		}
		return point;
	}
	,setNativeListeners: function() {
		openfl_Lib.current.stage.addEventListener(openfl_events_Event.RESIZE,$bind(this,this.onNativeResize));
	}
	,removeNativeListeners: function() {
		openfl_Lib.current.stage.removeEventListener(openfl_events_Event.RESIZE,$bind(this,this.onNativeResize));
	}
	,getUIEvent: function(event) {
		var resizeEvent = new cocktail_core_event_UIEvent();
		resizeEvent.initUIEvent("resize",false,false,null,0.0);
		return resizeEvent;
	}
	,onNativeResize: function(event) {
		this.updateHitTestingSprite();
		cocktail_port_base_PlatformBase.prototype.onNativeResize.call(this,event);
	}
	,updateHitTestingSprite: function() {
		this.hitTestingSprite.get_graphics().clear();
		this.setupTransparentFill(this.hitTestingSprite.get_graphics());
		this.hitTestingSprite.get_graphics().drawRect(0,0,this.get_viewportWidth(),this.get_viewportHeight());
		this.hitTestingSprite.get_graphics().endFill();
	}
	,setupTransparentFill: function(graphics) {
		graphics.beginFill(0,0.01);
	}
	,getNativeViewportHeight: function() {
		return openfl_Lib.current.stage.stageHeight;
	}
	,getNativeViewportWidth: function() {
		return openfl_Lib.current.stage.stageWidth;
	}
	,getNativeViewportX: function() {
		return 0;
	}
	,getNativeViewportY: function() {
		return 0;
	}
	,onViewportUpdate: function() {
		this._rootSprite.set_x(this.get_viewportX());
		this._rootSprite.set_y(this.get_viewportY());
	}
	,__class__: cocktail_port_platform_flash_$player_Platform
});
var cocktail_port_platform_flash_$player_PlatformTimer = function(updateCallback) {
	cocktail_port_base_PlatformTimerBase.call(this,updateCallback);
	this._callback = $bind(this,this.onEnterFrame);
	this._updateCallback = updateCallback;
	openfl_Lib.current.stage.addEventListener(openfl_events_Event.ENTER_FRAME,this._callback);
};
$hxClasses["cocktail.port.platform.flash_player.PlatformTimer"] = cocktail_port_platform_flash_$player_PlatformTimer;
cocktail_port_platform_flash_$player_PlatformTimer.__name__ = true;
cocktail_port_platform_flash_$player_PlatformTimer.__super__ = cocktail_port_base_PlatformTimerBase;
cocktail_port_platform_flash_$player_PlatformTimer.prototype = $extend(cocktail_port_base_PlatformTimerBase.prototype,{
	dispose: function() {
		cocktail_port_base_PlatformTimerBase.prototype.dispose.call(this);
		openfl_Lib.current.stage.removeEventListener(openfl_events_Event.ENTER_FRAME,this._callback);
		this._callback = null;
		this._updateCallback = null;
	}
	,getTimer: function() {
		return openfl_Lib.getTimer();
	}
	,onEnterFrame: function(e) {
		this._updateCallback();
	}
	,__class__: cocktail_port_platform_flash_$player_PlatformTimer
});
var cocktail_port_platform_flash_$player_TouchListener = function(platform) {
	cocktail_port_base_TouchListenerBase.call(this,platform);
};
$hxClasses["cocktail.port.platform.flash_player.TouchListener"] = cocktail_port_platform_flash_$player_TouchListener;
cocktail_port_platform_flash_$player_TouchListener.__name__ = true;
cocktail_port_platform_flash_$player_TouchListener.__super__ = cocktail_port_base_TouchListenerBase;
cocktail_port_platform_flash_$player_TouchListener.prototype = $extend(cocktail_port_base_TouchListenerBase.prototype,{
	setNativeListeners: function() {
		this._platform.hitTestingSprite.addEventListener("touchBegin",$bind(this,this.onNativeTouchStart));
		this._platform.hitTestingSprite.addEventListener("touchMove",$bind(this,this.onNativeTouchMove));
		this._platform.hitTestingSprite.addEventListener("touchEnd",$bind(this,this.onNativeTouchEnd));
	}
	,removeNativeListeners: function() {
		this._platform.hitTestingSprite.removeEventListener("touchBegin",$bind(this,this.onNativeTouchStart));
		this._platform.hitTestingSprite.removeEventListener("touchMove",$bind(this,this.onNativeTouchMove));
		this._platform.hitTestingSprite.removeEventListener("touchEnd",$bind(this,this.onNativeTouchEnd));
	}
	,getTouchEvent: function(event) {
		var typedEvent = event;
		var touchType;
		var _g = typedEvent.type;
		switch(_g) {
		case "touchBegin":
			touchType = "touchstart";
			break;
		case "touchEnd":
			touchType = "touchend";
			break;
		case "touchMove":
			touchType = "touchmove";
			break;
		default:
			touchType = typedEvent.type;
		}
		var localPoint = new openfl_geom_Point(typedEvent.localX,typedEvent.localY);
		localPoint = this._platform.convertToHitTestingSpriteSpace(localPoint,event.target,this._platform.hitTestingSprite);
		var touch = new cocktail_core_event_Touch();
		touch.identifier = typedEvent.touchPointID;
		touch.screenX = Math.round(localPoint.x);
		touch.screenY = Math.round(localPoint.y);
		touch.clientX = Math.round(localPoint.x);
		touch.clientY = Math.round(localPoint.y);
		touch.pageX = 0;
		touch.pageY = 0;
		var touchEvent = new cocktail_core_event_TouchEvent();
		touchEvent.initTouchEvent(touchType,false,false,null,0.0,new cocktail_core_event_TouchList([touch]),null,null,false,false,false,false);
		return touchEvent;
	}
	,__class__: cocktail_port_platform_flash_$player_TouchListener
});
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = true;
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = true;
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_Utf8 = function() { };
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = true;
haxe_Utf8.charCodeAt = function(s,index) {
	return HxOverrides.cca(s,index);
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) return hb;
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return node.value;
			if(c < 0) node = node.left; else node = node.right;
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) return new haxe_ds_TreeNode(null,k,v,null);
		var c = this.compare(k,node.key);
		if(c == 0) return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null?0:node._height); else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl;
		if(l == null) hl = 0; else hl = l._height;
		var hr;
		if(r == null) hr = 0; else hr = r._height;
		if(hl > hr + 2) {
			if((function($this) {
				var $r;
				var _this = l.left;
				$r = _this == null?0:_this._height;
				return $r;
			}(this)) >= (function($this) {
				var $r;
				var _this1 = l.right;
				$r = _this1 == null?0:_this1._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r)); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
		} else if(hr > hl + 2) {
			if((function($this) {
				var $r;
				var _this2 = r.right;
				$r = _this2 == null?0:_this2._height;
				return $r;
			}(this)) > (function($this) {
				var $r;
				var _this3 = r.left;
				$r = _this3 == null?0:_this3._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
		} else return new haxe_ds_TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) h = -1;
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) this._height = ((function($this) {
		var $r;
		var _this = $this.left;
		$r = _this == null?0:_this._height;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var _this1 = $this.right;
		$r = _this1 == null?0:_this1._height;
		return $r;
	}(this))?(function($this) {
		var $r;
		var _this2 = $this.left;
		$r = _this2 == null?0:_this2._height;
		return $r;
	}(this)):(function($this) {
		var $r;
		var _this3 = $this.right;
		$r = _this3 == null?0:_this3._height;
		return $r;
	}(this))) + 1; else this._height = h;
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = true;
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) return d;
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) return 0;
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) return ld;
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) return d;
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) return this.compare(v1,v2); else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) return this.compareArgs(v1,v2); else return Reflect.compare(v1,v2);
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
haxe_ds__$Vector_Vector_$Impl_$.__name__ = true;
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = true;
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = true;
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) strict = false;
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				buf.addSub(str,start,p - start);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw new js__$Boot_HaxeError("Expected <![CDATA[");
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw new js__$Boot_HaxeError("Expected <!DOCTYPE");
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw new js__$Boot_HaxeError("Expected <!--"); else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw new js__$Boot_HaxeError("Expected node name");
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw new js__$Boot_HaxeError("Expected node name");
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				nsubs++;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw new js__$Boot_HaxeError("Expected attribute name");
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw new js__$Boot_HaxeError("Duplicate attribute");
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected =");
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected \"");
			}
			break;
		case 8:
			switch(c) {
			case 38:
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 62:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			case 60:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val2 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val2);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw new js__$Boot_HaxeError("Expected node name");
				var v = HxOverrides.substr(str,start,p - start);
				if(v != (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					$r = parent.nodeName;
					return $r;
				}(this))) throw new js__$Boot_HaxeError("Expected </" + (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + parent.nodeType;
					$r = parent.nodeName;
					return $r;
				}(this)) + ">");
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				var xml1 = Xml.createComment(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				var xml2 = Xml.createDocType(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml2);
				nsubs++;
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				var xml3 = Xml.createProcessingInstruction(str1);
				parent.addChild(xml3);
				nsubs++;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1;
					if(s.charCodeAt(1) == 120) c1 = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else c1 = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else if(!haxe_xml_Parser.escapes.exists(s)) {
					if(strict) throw new js__$Boot_HaxeError("Undefined entity: " + s);
					buf.b += Std.string("&" + s + ";");
				} else buf.add(haxe_xml_Parser.escapes.get(s));
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) throw new js__$Boot_HaxeError("Invalid character in entity: " + String.fromCharCode(c));
				buf.b += "&";
				buf.addSub(str,start,p - start);
				p--;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			buf.addSub(str,start,p - start);
			var xml4 = Xml.createPCData(buf.b);
			parent.addChild(xml4);
			nsubs++;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		buf.addSub(str,start,p - start);
		var xml5 = Xml.createPCData(buf.b);
		parent.addChild(xml5);
		nsubs++;
		return p;
	}
	throw new js__$Boot_HaxeError("Unexpected end");
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Object.prototype.hasOwnProperty.call(val,"name")) this.name = Reflect.field(val,"name"); else this.name = "Error";
	if(Object.prototype.hasOwnProperty.call(val,"message")) this.message = Reflect.field(val,"message"); else this.message = Std.string(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return (Function("return typeof " + name + " != \"undefined\" ? " + name + " : null"))();
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = true;
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var layout_Layout = function(scale,bounds) {
	if(bounds == null) this.bounds = layout_area_StageArea.get_instance(); else this.bounds = bounds;
	if(scale == null) this.scale = new layout_Scale(this.bounds.width | 0,this.bounds.height | 0); else this.scale = scale;
	this.bounds.addEventListener(openfl_events_Event.CHANGE,$bind(this,this.onBoundsChanged));
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.items = this1;
};
$hxClasses["layout.Layout"] = layout_Layout;
layout_Layout.__name__ = true;
layout_Layout.__properties__ = {set_currentLayout:"set_currentLayout",get_currentLayout:"get_currentLayout",get_stageLayout:"get_stageLayout"}
layout_Layout.stageLayout = null;
layout_Layout.get_stageLayout = function() {
	if(layout_Layout.stageLayout == null) {
		layout_Layout.stageLayout = new layout_Layout(new layout_Scale());
		layout_Layout.stageScale = layout_Layout.stageLayout.scale;
	}
	return layout_Layout.stageLayout;
};
layout_Layout.stageScale = null;
layout_Layout.currentLayout = null;
layout_Layout.get_currentLayout = function() {
	if(layout_Layout.currentLayout == null) layout_Layout.set_currentLayout(layout_Layout.get_stageLayout());
	return layout_Layout.currentLayout;
};
layout_Layout.set_currentLayout = function(value) {
	return layout_Layout.currentLayout = value;
};
layout_Layout.prototype = {
	onBoundsChanged: function(e) {
		this.apply();
	}
	,apply: function() {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var instruction = _g1.data[_g];
			++_g;
			instruction.item.apply(instruction.target,instruction.area,this.scale);
		}
	}
	,add: function(target,item,base) {
		var i = this.items.length - 1;
		while(i >= 0) {
			if(this.items.data[i].target == target && layout_item_LayoutMask.hasConflict(this.items.data[i].item.mask,item.mask)) {
				var this1 = this.items;
				var pos = i;
				var len = 1;
				if(pos < 0) pos += this1.length;
				if(pos + len > this1.length) len = this1.length - pos;
				if(len < 0) len = 0;
				var vectorData = new openfl_VectorData();
				vectorData.length = len;
				vectorData.fixed = false;
				var this2;
				this2 = new Array(len);
				vectorData.data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,len);
				if(len > 0) {
					this1.length -= len;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
				}
				vectorData;
			}
			i--;
		}
		var boundItem = new layout__$Layout_BoundItem(target,base != null?base:new layout__$Resizable_AreaResizable(this.bounds),item);
		var this3 = this.items;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
			this3.data[this3.length - 1] = boundItem;
		}
		this3.length;
		boundItem.item.apply(boundItem.target,boundItem.area,this.scale);
	}
	,__class__: layout_Layout
};
var layout__$Layout_BoundItem = function(target,area,item) {
	this.target = target;
	this.area = area;
	this.item = item;
};
$hxClasses["layout._Layout.BoundItem"] = layout__$Layout_BoundItem;
layout__$Layout_BoundItem.__name__ = true;
layout__$Layout_BoundItem.prototype = {
	__class__: layout__$Layout_BoundItem
};
var layout_LayoutUtils = function() { };
$hxClasses["layout.LayoutUtils"] = layout_LayoutUtils;
layout_LayoutUtils.__name__ = true;
layout_LayoutUtils.center = function(objectToPlace,layout1) {
	(layout1 == null?layout_Layout.get_currentLayout():layout1).add(objectToPlace,new layout_item__$Position_Percent(true,0.5));
	(layout1 == null?layout_Layout.get_currentLayout():layout1).add(objectToPlace,new layout_item__$Position_Percent(false,0.5));
};
layout_LayoutUtils.fillWidth = function(objectToScale,margin,layout1) {
	if(margin == null) margin = 0;
	(layout1 == null?layout_Layout.get_currentLayout():layout1).add(objectToScale,new layout_item__$Size_MarginSize(true,margin * 2));
};
layout_LayoutUtils.fillHeight = function(objectToScale,margin,layout1) {
	if(margin == null) margin = 0;
	(layout1 == null?layout_Layout.get_currentLayout():layout1).add(objectToScale,new layout_item__$Size_MarginSize(false,margin * 2));
};
var layout__$Resizable_ResizableImpl = function() {
	this.baseWidth = this.get_width();
	this.baseHeight = this.get_height();
};
$hxClasses["layout._Resizable.ResizableImpl"] = layout__$Resizable_ResizableImpl;
layout__$Resizable_ResizableImpl.__name__ = true;
layout__$Resizable_ResizableImpl.prototype = {
	get_x: function() {
		return 0;
	}
	,set_x: function(value) {
		return 0;
	}
	,get_y: function() {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,get_width: function() {
		return 0;
	}
	,set_width: function(value) {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,set_height: function(value) {
		return 0;
	}
	,__class__: layout__$Resizable_ResizableImpl
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var layout__$Resizable_DisplayObjectResizable = function(displayObject) {
	this.displayObject = displayObject;
	layout__$Resizable_ResizableImpl.call(this);
	this.baseWidth = displayObject.get_width() / displayObject.get_scaleX();
	this.baseHeight = displayObject.get_height() / displayObject.get_scaleY();
};
$hxClasses["layout._Resizable.DisplayObjectResizable"] = layout__$Resizable_DisplayObjectResizable;
layout__$Resizable_DisplayObjectResizable.__name__ = true;
layout__$Resizable_DisplayObjectResizable.__super__ = layout__$Resizable_ResizableImpl;
layout__$Resizable_DisplayObjectResizable.prototype = $extend(layout__$Resizable_ResizableImpl.prototype,{
	get_x: function() {
		return this.displayObject.get_x();
	}
	,set_x: function(value) {
		return this.displayObject.set_x(value);
	}
	,get_y: function() {
		return this.displayObject.get_y();
	}
	,set_y: function(value) {
		return this.displayObject.set_y(value);
	}
	,get_width: function() {
		return this.displayObject.get_width();
	}
	,set_width: function(value) {
		return this.displayObject.set_width(value);
	}
	,get_height: function() {
		return this.displayObject.get_height();
	}
	,set_height: function(value) {
		return this.displayObject.set_height(value);
	}
	,__class__: layout__$Resizable_DisplayObjectResizable
});
var layout__$Resizable_AreaResizable = function(area) {
	this.area = area;
	layout__$Resizable_ResizableImpl.call(this);
};
$hxClasses["layout._Resizable.AreaResizable"] = layout__$Resizable_AreaResizable;
layout__$Resizable_AreaResizable.__name__ = true;
layout__$Resizable_AreaResizable.__super__ = layout__$Resizable_ResizableImpl;
layout__$Resizable_AreaResizable.prototype = $extend(layout__$Resizable_ResizableImpl.prototype,{
	get_x: function() {
		return this.area.x;
	}
	,set_x: function(value) {
		return this.area.set_x(value);
	}
	,get_y: function() {
		return this.area.y;
	}
	,set_y: function(value) {
		return this.area.set_y(value);
	}
	,get_width: function() {
		return this.area.width;
	}
	,set_width: function(value) {
		return this.area.set_width(value);
	}
	,get_height: function() {
		return this.area.height;
	}
	,set_height: function(value) {
		return this.area.set_height(value);
	}
	,__class__: layout__$Resizable_AreaResizable
});
var layout_Scale = function(baseStageWidth,baseStageHeight,area) {
	if(baseStageHeight == null) baseStageHeight = 600;
	if(baseStageWidth == null) baseStageWidth = 800;
	this.y = 1;
	this.x = 1;
	this.baseStageWidth = baseStageWidth;
	this.baseStageHeight = baseStageHeight;
	this.set_area(area != null?area:layout_area_StageArea.get_instance());
	this.set_behavior(new layout_ShowAllScale());
};
$hxClasses["layout.Scale"] = layout_Scale;
layout_Scale.__name__ = true;
layout_Scale.prototype = {
	set_behavior: function(value) {
		if(this.behavior == null && value != null) this.area.addEventListener(openfl_events_Event.CHANGE,$bind(this,this.onResize)); else if(this.behavior != null && value == null) this.area.removeEventListener(openfl_events_Event.CHANGE,$bind(this,this.onResize));
		this.behavior = value;
		this.onResize(null);
		return this.behavior;
	}
	,onResize: function(e) {
		this.behavior.onResize(this.area.width | 0,this.area.height | 0,this);
	}
	,set_area: function(value) {
		if(value == null) this.area = layout_area_StageArea.get_instance(); else this.area = value;
		if(this.behavior != null) this.onResize(null);
		return this.area;
	}
	,__class__: layout_Scale
	,__properties__: {set_area:"set_area",set_behavior:"set_behavior"}
};
var layout__$Scale_ScaleBehavior = function() {
};
$hxClasses["layout._Scale.ScaleBehavior"] = layout__$Scale_ScaleBehavior;
layout__$Scale_ScaleBehavior.__name__ = true;
layout__$Scale_ScaleBehavior.prototype = {
	onResize: function(stageWidth,stageHeight,scale) {
		scale.x = 1;
		scale.y = 1;
	}
	,__class__: layout__$Scale_ScaleBehavior
};
var layout_ShowAllScale = function() {
	layout__$Scale_ScaleBehavior.call(this);
};
$hxClasses["layout.ShowAllScale"] = layout_ShowAllScale;
layout_ShowAllScale.__name__ = true;
layout_ShowAllScale.__super__ = layout__$Scale_ScaleBehavior;
layout_ShowAllScale.prototype = $extend(layout__$Scale_ScaleBehavior.prototype,{
	onResize: function(stageWidth,stageHeight,scale) {
		scale.x = Math.min(stageWidth / scale.baseStageWidth,stageHeight / scale.baseStageHeight);
		scale.y = scale.x;
	}
	,__class__: layout_ShowAllScale
});
var layout_area_Area = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	openfl_events_EventDispatcher.call(this);
	this.setTo(x,y,width,height);
};
$hxClasses["layout.area.Area"] = layout_area_Area;
layout_area_Area.__name__ = true;
layout_area_Area.__super__ = openfl_events_EventDispatcher;
layout_area_Area.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	setTo: function(x,y,width,height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
	,set_x: function(value) {
		this.x = value;
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
		return this.x;
	}
	,set_y: function(value) {
		this.y = value;
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
		return this.y;
	}
	,set_width: function(value) {
		this.width = value;
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
		return this.width;
	}
	,set_height: function(value) {
		this.height = value;
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
		return this.height;
	}
	,__class__: layout_area_Area
	,__properties__: {set_height:"set_height",set_width:"set_width",set_y:"set_y",set_x:"set_x"}
});
var layout_area_StageArea = function() {
	layout_area_Area.call(this);
	openfl_Lib.current.stage.addEventListener(openfl_events_Event.RESIZE,$bind(this,this.onStageResize),false,1);
	this.onStageResize(null);
};
$hxClasses["layout.area.StageArea"] = layout_area_StageArea;
layout_area_StageArea.__name__ = true;
layout_area_StageArea.__properties__ = {get_instance:"get_instance"}
layout_area_StageArea.instance = null;
layout_area_StageArea.get_instance = function() {
	if(layout_area_StageArea.instance == null) layout_area_StageArea.instance = new layout_area_StageArea();
	return layout_area_StageArea.instance;
};
layout_area_StageArea.__super__ = layout_area_Area;
layout_area_StageArea.prototype = $extend(layout_area_Area.prototype,{
	onStageResize: function(e) {
		var stage = openfl_Lib.current.stage;
		layout_area_Area.prototype.setTo.call(this,0,0,stage.stageWidth,stage.stageHeight);
	}
	,setTo: function(x,y,width,height) {
	}
	,set_x: function(value) {
		return this.x;
	}
	,set_y: function(value) {
		return this.y;
	}
	,set_width: function(value) {
		return this.width;
	}
	,set_height: function(value) {
		return this.height;
	}
	,__class__: layout_area_StageArea
});
var layout_item_LayoutItem = function() { };
$hxClasses["layout.item.LayoutItem"] = layout_item_LayoutItem;
layout_item_LayoutItem.__name__ = true;
layout_item_LayoutItem.prototype = {
	__class__: layout_item_LayoutItem
};
var layout_item_LayoutMask = function() { };
$hxClasses["layout.item.LayoutMask"] = layout_item_LayoutMask;
layout_item_LayoutMask.__name__ = true;
layout_item_LayoutMask.hasConflict = function(maskA,maskB) {
	if((maskA & 240) != 0 && (maskB & 240) != 0) {
		maskA = maskA & 240;
		maskB = maskB & 240;
	}
	return (maskA & maskB) != 0;
};
var layout_item_Position = function(horizontal) {
	this.horizontal = horizontal;
	if(horizontal) this.mask = 1; else this.mask = 2;
};
$hxClasses["layout.item.Position"] = layout_item_Position;
layout_item_Position.__name__ = true;
layout_item_Position.__interfaces__ = [layout_item_LayoutItem];
layout_item_Position.prototype = {
	apply: function(target,area,scale) {
		if(this.horizontal) {
			var x = this.getCoordinate(area.get_x(),area.get_width(),target.get_width(),scale.x);
			if(x != target.get_x()) target.set_x(x);
		} else {
			var y = this.getCoordinate(area.get_y(),area.get_height(),target.get_height(),scale.y);
			if(y != target.get_y()) target.set_y(y);
		}
	}
	,getCoordinate: function(areaMin,areaSize,targetSize,scale) {
		return areaMin;
	}
	,__class__: layout_item_Position
};
var layout_item__$Position_Percent = function(horizontal,percent) {
	layout_item_Position.call(this,horizontal);
	this.percent = percent;
};
$hxClasses["layout.item._Position.Percent"] = layout_item__$Position_Percent;
layout_item__$Position_Percent.__name__ = true;
layout_item__$Position_Percent.__super__ = layout_item_Position;
layout_item__$Position_Percent.prototype = $extend(layout_item_Position.prototype,{
	getCoordinate: function(areaMin,areaSize,targetSize,scale) {
		return this.percent * (areaSize - targetSize) + areaMin;
	}
	,__class__: layout_item__$Position_Percent
});
var layout_item_Size = function(horizontal) {
	this.horizontal = horizontal;
	if(horizontal) this.mask = 4; else this.mask = 8;
};
$hxClasses["layout.item.Size"] = layout_item_Size;
layout_item_Size.__name__ = true;
layout_item_Size.__interfaces__ = [layout_item_LayoutItem];
layout_item_Size.prototype = {
	apply: function(target,area,scale) {
		if(this.horizontal) {
			var width = this.getSize(target.baseWidth,area.get_width(),scale.x);
			if(width != target.get_width()) target.set_width(width);
		} else {
			var height = this.getSize(target.baseHeight,area.get_height(),scale.y);
			if(height != target.get_height()) target.set_height(height);
		}
	}
	,getSize: function(targetSize,areaSize,scale) {
		return targetSize * scale;
	}
	,__class__: layout_item_Size
};
var layout_item__$Size_MarginSize = function(horizontal,margin) {
	layout_item_Size.call(this,horizontal);
	this.margin = margin;
};
$hxClasses["layout.item._Size.MarginSize"] = layout_item__$Size_MarginSize;
layout_item__$Size_MarginSize.__name__ = true;
layout_item__$Size_MarginSize.__super__ = layout_item_Size;
layout_item__$Size_MarginSize.prototype = $extend(layout_item_Size.prototype,{
	getSize: function(targetSize,areaSize,scale) {
		return areaSize - this.margin * scale;
	}
	,__class__: layout_item__$Size_MarginSize
});
var lime_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
};
$hxClasses["lime.AssetCache"] = lime_AssetCache;
lime_AssetCache.__name__ = true;
lime_AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime_AssetCache
};
var lime_Assets = function() { };
$hxClasses["lime.Assets"] = lime_Assets;
lime_Assets.__name__ = true;
lime_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.font.exists(id)) return lime_Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.font.set(id,font);
				return font;
			} else console.log("[Assets] Font asset \"" + id + "\" exists, but only asynchronously");
		} else console.log("[Assets] There is no Font asset with an ID of \"" + id + "\"");
	} else console.log("[Assets] There is no asset library named \"" + libraryName + "\"");
	return null;
};
lime_Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.image.set(id,image1);
				return image1;
			} else console.log("[Assets] Image asset \"" + id + "\" exists, but only asynchronously");
		} else console.log("[Assets] There is no Image asset with an ID of \"" + id + "\"");
	} else console.log("[Assets] There is no asset library named \"" + libraryName + "\"");
	return null;
};
lime_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_Assets.libraries.get(name);
};
lime_Assets.getPath = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else console.log("[Assets] There is no asset with an ID of \"" + id + "\"");
	} else console.log("[Assets] There is no asset library named \"" + libraryName + "\"");
	return null;
};
lime_Assets.getText = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else console.log("[Assets] String asset \"" + id + "\" exists, but only asynchronously");
		} else console.log("[Assets] There is no String asset with an ID of \"" + id + "\"");
	} else console.log("[Assets] There is no asset library named \"" + libraryName + "\"");
	return null;
};
lime_Assets.initialize = function() {
	if(!lime_Assets.initialized) {
		lime_Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime_Assets.initialized = true;
	}
};
lime_Assets.isValidImage = function(buffer) {
	return true;
};
lime_Assets.registerLibrary = function(name,library) {
	if(lime_Assets.libraries.exists(name)) lime_Assets.unloadLibrary(name);
	if(library != null) library.eventCallback = lime_Assets.library_onEvent;
	lime_Assets.libraries.set(name,library);
};
lime_Assets.unloadLibrary = function(name) {
	lime_Assets.initialize();
	var library = lime_Assets.libraries.get(name);
	if(library != null) {
		lime_Assets.cache.clear(name + ":");
		library.eventCallback = null;
	}
	lime_Assets.libraries.remove(name);
};
lime_Assets.library_onEvent = function(library,type) {
	if(type == "change") lime_Assets.cache.clear();
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = true;
lime__$backend_html5_HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		}
		return keyCode;
	}
	,create: function(config) {
		this.parent.config = config;
		if(config != null) {
			var $window = new lime_ui_Window(config);
			var renderer = new lime_graphics_Renderer($window);
			this.parent.addWindow($window);
			this.parent.addRenderer(renderer);
			this.parent.init(renderer.context);
		}
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] 
										   || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleUpdateEvent();
		return 0;
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				var listeners = this.parent.windows[0].onKeyDown.listeners;
				var repeat = this.parent.windows[0].onKeyDown.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](keyCode,modifier);
					if(!repeat[i]) {
						this.parent.windows[0].onKeyDown.remove(listeners[i]);
						length--;
					} else i++;
				}
				if(this.parent.windows[0].backend.getEnableTextEvents()) {
					var listeners1 = this.parent.windows[0].onTextInput.listeners;
					var repeat1 = this.parent.windows[0].onTextInput.repeat;
					var length1 = listeners1.length;
					var i1 = 0;
					while(i1 < length1) {
						listeners1[i1](String.fromCharCode(event.keyCode));
						if(!repeat1[i1]) {
							this.parent.windows[0].onTextInput.remove(listeners1[i1]);
							length1--;
						} else i1++;
					}
				}
			} else {
				var listeners2 = this.parent.windows[0].onKeyUp.listeners;
				var repeat2 = this.parent.windows[0].onKeyUp.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](keyCode,modifier);
					if(!repeat2[i2]) {
						this.parent.windows[0].onKeyUp.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
			}
		}
	}
	,handleUpdateEvent: function(__) {
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var listeners = this.parent.onUpdate.listeners;
			var repeat = this.parent.onUpdate.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](this.deltaTime | 0);
				if(!repeat[i]) {
					this.parent.onUpdate.remove(listeners[i]);
					length--;
				} else i++;
			}
			if(this.parent.renderers[0] != null) {
				var listeners1 = this.parent.renderers[0].onRender.listeners;
				var repeat1 = this.parent.renderers[0].onRender.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](this.parent.renderers[0].context);
					if(!repeat1[i1]) {
						this.parent.renderers[0].onRender.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				this.parent.renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else this.nextUpdate = this.currentUpdate + this.framePeriod;
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleUpdateEvent));
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				var listeners = this.parent.windows[0].onWindowFocusIn.listeners;
				var repeat = this.parent.windows[0].onWindowFocusIn.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i]();
					if(!repeat[i]) {
						this.parent.windows[0].onWindowFocusIn.remove(listeners[i]);
						length--;
					} else i++;
				}
				var listeners1 = this.parent.windows[0].onWindowActivate.listeners;
				var repeat1 = this.parent.windows[0].onWindowActivate.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1]();
					if(!repeat1[i1]) {
						this.parent.windows[0].onWindowActivate.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				break;
			case "blur":
				var listeners2 = this.parent.windows[0].onWindowFocusOut.listeners;
				var repeat2 = this.parent.windows[0].onWindowFocusOut.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2]();
					if(!repeat2[i2]) {
						this.parent.windows[0].onWindowFocusOut.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
				var listeners3 = this.parent.windows[0].onWindowDeactivate.listeners;
				var repeat3 = this.parent.windows[0].onWindowDeactivate.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3]();
					if(!repeat3[i3]) {
						this.parent.windows[0].onWindowDeactivate.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) {
					var listeners4 = this.parent.windows[0].onWindowResize.listeners;
					var repeat4 = this.parent.windows[0].onWindowResize.repeat;
					var length4 = listeners4.length;
					var i4 = 0;
					while(i4 < length4) {
						listeners4[i4](this.parent.windows[0].__width,this.parent.windows[0].__height);
						if(!repeat4[i4]) {
							this.parent.windows[0].onWindowResize.remove(listeners4[i4]);
							length4--;
						} else i4++;
					}
				}
				break;
			case "beforeunload":
				var listeners5 = this.parent.windows[0].onWindowClose.listeners;
				var repeat5 = this.parent.windows[0].onWindowClose.repeat;
				var length5 = listeners5.length;
				var i5 = 0;
				while(i5 < length5) {
					listeners5[i5]();
					if(!repeat5[i5]) {
						this.parent.windows[0].onWindowClose.remove(listeners5[i5]);
						length5--;
					} else i5++;
				}
				break;
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = true;
lime__$backend_html5_HTML5Mouse.__cursor = null;
lime__$backend_html5_HTML5Mouse.__hidden = null;
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = true;
lime__$backend_html5_HTML5Renderer.prototype = {
	create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div); else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d")); else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			var listeners = this.parent.onRenderContextLost.listeners;
			var repeat = this.parent.onRenderContextLost.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i]();
				if(!repeat[i]) {
					this.parent.onRenderContextLost.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "webglcontextrestored":
			this.createContext();
			var listeners1 = this.parent.onRenderContextRestored.listeners;
			var repeat1 = this.parent.onRenderContextRestored.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](this.parent.context);
				if(!repeat1[i1]) {
					this.parent.onRenderContextRestored.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		default:
		}
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = true;
lime__$backend_html5_HTML5Window.prototype = {
	create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		}
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				var listeners = this.parent.onMouseDown.listeners;
				var repeat = this.parent.onMouseDown.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](x,y,event.button);
					if(!repeat[i]) {
						this.parent.onMouseDown.remove(listeners[i]);
						length--;
					} else i++;
				}
				break;
			case "mouseenter":
				var listeners1 = this.parent.onWindowEnter.listeners;
				var repeat1 = this.parent.onWindowEnter.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1]();
					if(!repeat1[i1]) {
						this.parent.onWindowEnter.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				break;
			case "mouseleave":
				var listeners2 = this.parent.onWindowLeave.listeners;
				var repeat2 = this.parent.onWindowLeave.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2]();
					if(!repeat2[i2]) {
						this.parent.onWindowLeave.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
				break;
			case "mouseup":
				var listeners3 = this.parent.onMouseUp.listeners;
				var repeat3 = this.parent.onMouseUp.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3](x,y,event.button);
					if(!repeat3[i3]) {
						this.parent.onMouseUp.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
				break;
			case "mousemove":
				var listeners4 = this.parent.onMouseMove.listeners;
				var repeat4 = this.parent.onMouseMove.repeat;
				var length4 = listeners4.length;
				var i4 = 0;
				while(i4 < length4) {
					listeners4[i4](x,y);
					if(!repeat4[i4]) {
						this.parent.onMouseMove.remove(listeners4[i4]);
						length4--;
					} else i4++;
				}
				break;
			default:
			}
		} else {
			var listeners5 = this.parent.onMouseWheel.listeners;
			var repeat5 = this.parent.onMouseWheel.repeat;
			var length5 = listeners5.length;
			var i5 = 0;
			while(i5 < length5) {
				listeners5[i5](event.deltaX,-event.deltaY);
				if(!repeat5[i5]) {
					this.parent.onMouseWheel.remove(listeners5[i5]);
					length5--;
				} else i5++;
			}
		}
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var touch = event.changedTouches[0];
		var id = touch.identifier;
		var x = 0.0;
		var y = 0.0;
		if(this.element != null) {
			if(this.canvas != null) {
				var rect = this.canvas.getBoundingClientRect();
				x = (touch.clientX - rect.left) * (this.parent.__width / rect.width);
				y = (touch.clientY - rect.top) * (this.parent.__height / rect.height);
			} else if(this.div != null) {
				var rect1 = this.div.getBoundingClientRect();
				x = touch.clientX - rect1.left;
				y = touch.clientY - rect1.top;
			} else {
				var rect2 = this.element.getBoundingClientRect();
				x = (touch.clientX - rect2.left) * (this.parent.__width / rect2.width);
				y = (touch.clientY - rect2.top) * (this.parent.__height / rect2.height);
			}
		} else {
			x = touch.clientX;
			y = touch.clientY;
		}
		var _g = event.type;
		switch(_g) {
		case "touchstart":
			var listeners = this.parent.onTouchStart.listeners;
			var repeat = this.parent.onTouchStart.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](x,y,id);
				if(!repeat[i]) {
					this.parent.onTouchStart.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "touchmove":
			var listeners1 = this.parent.onTouchMove.listeners;
			var repeat1 = this.parent.onTouchMove.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](x,y,id);
				if(!repeat1[i1]) {
					this.parent.onTouchMove.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		case "touchend":
			var listeners2 = this.parent.onTouchEnd.listeners;
			var repeat2 = this.parent.onTouchEnd.repeat;
			var length2 = listeners2.length;
			var i2 = 0;
			while(i2 < length2) {
				listeners2[i2](x,y,id);
				if(!repeat2[i2]) {
					this.parent.onTouchEnd.remove(listeners2[i2]);
					length2--;
				} else i2++;
			}
			break;
		default:
		}
	}
	,resize: function(width,height) {
	}
	,setFullscreen: function(value) {
		return false;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = true;
lime_app_IModule.prototype = {
	__class__: lime_app_IModule
};
var lime_app_Module = function() {
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = true;
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	init: function(context) {
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchEnd: function(x,y,id) {
	}
	,onTouchMove: function(x,y,id) {
	}
	,onTouchStart: function(x,y,id) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowEnter: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app_Event();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) lime_app_Application.current = this;
	this.modules = [];
	this.renderers = [];
	this.windows = [];
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.onUpdate.add($bind(this,this.update));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = true;
lime_app_Application.current = null;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	addModule: function(module) {
		this.modules.push(module);
		if(this.initialized && this.renderers[0] != null) module.init(this.renderers[0].context);
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add($bind(this,this.render));
		renderer.onRenderContextLost.add($bind(this,this.onRenderContextLost));
		renderer.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
		this.renderers.push(renderer);
	}
	,addWindow: function(window) {
		this.windows.push(window);
		window.onGamepadAxisMove.add($bind(this,this.onGamepadAxisMove));
		window.onGamepadButtonDown.add($bind(this,this.onGamepadButtonDown));
		window.onGamepadButtonUp.add($bind(this,this.onGamepadButtonUp));
		window.onGamepadConnect.add($bind(this,this.onGamepadConnect));
		window.onGamepadDisconnect.add($bind(this,this.onGamepadDisconnect));
		window.onKeyDown.add($bind(this,this.onKeyDown));
		window.onKeyUp.add($bind(this,this.onKeyUp));
		window.onMouseDown.add($bind(this,this.onMouseDown));
		window.onMouseMove.add($bind(this,this.onMouseMove));
		window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
		window.onMouseUp.add($bind(this,this.onMouseUp));
		window.onMouseWheel.add($bind(this,this.onMouseWheel));
		window.onTextEdit.add($bind(this,this.onTextEdit));
		window.onTextInput.add($bind(this,this.onTextInput));
		window.onTouchStart.add($bind(this,this.onTouchStart));
		window.onTouchMove.add($bind(this,this.onTouchMove));
		window.onTouchEnd.add($bind(this,this.onTouchEnd));
		window.onWindowActivate.add($bind(this,this.onWindowActivate));
		window.onWindowClose.add($bind(this,this.onWindowClose));
		window.onWindowDeactivate.add($bind(this,this.onWindowDeactivate));
		window.onWindowEnter.add($bind(this,this.onWindowEnter));
		window.onWindowFocusIn.add($bind(this,this.onWindowFocusIn));
		window.onWindowFocusOut.add($bind(this,this.onWindowFocusOut));
		window.onWindowFullscreen.add($bind(this,this.onWindowFullscreen));
		window.onWindowLeave.add($bind(this,this.onWindowLeave));
		window.onWindowMinimize.add($bind(this,this.onWindowMinimize));
		window.onWindowMove.add($bind(this,this.onWindowMove));
		window.onWindowResize.add($bind(this,this.onWindowResize));
		window.onWindowRestore.add($bind(this,this.onWindowRestore));
		window.create(this);
	}
	,create: function(config) {
		this.backend.create(config);
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,init: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.init(context);
		}
		this.initialized = true;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onKeyDown: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(keyCode,modifier);
		}
	}
	,onKeyUp: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(keyCode,modifier);
		}
	}
	,onMouseDown: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(x,y,button);
		}
	}
	,onMouseMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(x,y);
		}
	}
	,onMouseMoveRelative: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(x,y);
		}
	}
	,onMouseUp: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(x,y,button);
		}
	}
	,onMouseWheel: function(deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(deltaX,deltaY);
		}
	}
	,onRenderContextLost: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost();
		}
	}
	,onRenderContextRestored: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(context);
		}
	}
	,onTextEdit: function(text,start,length) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextEdit(text,start,length);
		}
	}
	,onTextInput: function(text) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextInput(text);
		}
	}
	,onTouchEnd: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(x,y,id);
		}
	}
	,onTouchMove: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(x,y,id);
		}
	}
	,onTouchStart: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(x,y,id);
		}
	}
	,onWindowActivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate();
		}
	}
	,onWindowClose: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose();
		}
	}
	,onWindowDeactivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate();
		}
	}
	,onWindowEnter: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowEnter();
		}
	}
	,onWindowFocusIn: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn();
		}
	}
	,onWindowFocusOut: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut();
		}
	}
	,onWindowFullscreen: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen();
		}
	}
	,onWindowLeave: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowLeave();
		}
	}
	,onWindowMinimize: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize();
		}
	}
	,onWindowMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(x,y);
		}
	}
	,onWindowResize: function(width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(width,height);
		}
	}
	,onWindowRestore: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore();
		}
	}
	,render: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(context);
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,__class__: lime_app_Application
});
var lime_app_Event = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = true;
lime_app_Event.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,remove: function(listener) {
		var index = HxOverrides.indexOf(this.listeners,listener,0);
		if(index > -1) {
			this.listeners.splice(index,1);
			this.priorities.splice(index,1);
			this.repeat.splice(index,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Preloader = function() {
	this.total = 0;
	this.loaded = 0;
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = true;
lime_app_Preloader.prototype = {
	create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				var image = new Image();
				lime_app_Preloader.images.set(url,image);
				image.onload = $bind(this,this.image_onLoad);
				image.src = url;
				this.total++;
				break;
			case "BINARY":
				var loader = new lime_net_URLLoader();
				loader.set_dataFormat(lime_net_URLLoaderDataFormat.BINARY);
				lime_app_Preloader.loaders.set(url,loader);
				this.total++;
				break;
			case "TEXT":
				var loader1 = new lime_net_URLLoader();
				lime_app_Preloader.loaders.set(url,loader1);
				this.total++;
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime_app_Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime_app_Preloader.loaders.get(url1);
			loader2.onComplete.add($bind(this,this.loader_onComplete));
			loader2.load(new lime_net_URLRequest(url1));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.update(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_g.loaded++;
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					_g.update(_g.loaded,_g.total);
					if(_g.loaded == _g.total) _g.start();
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		if(this.onComplete != null) this.onComplete();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(loader) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime_app_Preloader
};
var lime_audio_ALAudioContext = function() { };
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = true;
var lime_audio_ALCAudioContext = function() { };
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = true;
var lime_audio_AudioBuffer = function() { };
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = true;
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : true, __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = true;
lime_audio_AudioManager.context = null;
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
		} else lime_audio_AudioManager.context = context;
	}
};
var lime_audio_FlashAudioContext = function() { };
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = true;
var lime_audio_HTML5AudioContext = function() {
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = true;
lime_audio_HTML5AudioContext.prototype = {
	__class__: lime_audio_HTML5AudioContext
};
var lime_graphics_ConsoleRenderContext = function() { };
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = true;
var lime_graphics_FlashRenderContext = function() { };
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = true;
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.renderers[0] != null) {
			var _g = lime_app_Application.current.renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				this.type = lime_graphics_ImageType.FLASH;
				break;
			default:
				this.type = lime_graphics_ImageType.DATA;
			}
		} else this.type = lime_graphics_ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime_graphics_ImageBuffer(new Uint8Array(width * height * 4),width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = true;
lime_graphics_Image.__base64Encoder = null;
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	return lime_graphics_Image.__base64Encoder.encodeBytes(haxe_io_Bytes.ofData(bytes.byteView)).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 255 && bytes.readUnsignedByte() == 216;
};
lime_graphics_Image.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 137 && bytes.readUnsignedByte() == 80 && bytes.readUnsignedByte() == 78 && bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 13 && bytes.readUnsignedByte() == 10 && bytes.readUnsignedByte() == 26 && bytes.readUnsignedByte() == 10;
};
lime_graphics_Image.__isGIF = function(bytes) {
	bytes.position = 0;
	if(bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 73 && bytes.readUnsignedByte() == 70 && bytes.readUnsignedByte() == 56) {
		var b = bytes.readUnsignedByte();
		return (b == 55 || b == 57) && bytes.readUnsignedByte() == 97;
	}
	return false;
};
lime_graphics_Image.prototype = {
	clone: function() {
		var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		return image;
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(this.width <= 0 || this.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
		if(destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x = -destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y = -destPoint.y;
			destPoint.y = 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			if(format == null || format == 0) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),color);
			break;
		default:
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) type = "image/png"; else if(lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime_graphics_Image.__isGIF(bytes)) type = "image/gif"; else throw new js__$Boot_HaxeError("Image tried to read a PNG/JPG ByteArray, but found an invalid header.");
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.onload = function(_) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.sync(this);
			lime_graphics_utils_ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
				break;
			default:
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_src: function() {
		return this.buffer.get_src();
	}
	,get_transparent: function() {
		if(this.buffer == null) return false;
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) return false;
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",get_src:"get_src",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) bitsPerPixel = 4;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	if(format == null) this.format = 0; else this.format = format;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = true;
lime_graphics_ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			buffer.data = new Uint8Array(this.data.byteLength);
			var copy = new Uint8Array(this.data);
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : true, __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : true, __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : true, __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app_Event();
	this.onRenderContextRestored = new lime_app_Event();
	this.onRenderContextLost = new lime_app_Event();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.currentRenderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = true;
lime_graphics_Renderer.prototype = {
	create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_cairo_Cairo = function() { };
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = true;
lime_graphics_cairo_Cairo.prototype = {
	arc: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,identityMatrix: function() {
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,rectangle: function(x,y,width,height) {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,set_matrix: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_matrix:"set_matrix",get_hasCurrentPoint:"get_hasCurrentPoint",get_currentPoint:"get_currentPoint"}
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = true;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.destroy = function(this1) {
};
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.fromImage = function(image) {
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = true;
lime_graphics_opengl_GL.context = null;
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = true;
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(sourceImage);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.webkitImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.data == null) {
		buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		buffer.data = new Uint8Array(buffer.__srcImageData.data.buffer);
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.sync(image);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image) {
	if(image.dirty && image.type != lime_graphics_ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = true;
lime_graphics_utils_ImageDataUtil.__alpha16 = null;
lime_graphics_utils_ImageDataUtil.__clamp = null;
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return;
	var srcStride = sourceImage.buffer.width * 4 | 0;
	var srcPosition = (sourceRect.x + sourceImage.offsetX) * 4 + srcStride * (sourceRect.y + sourceImage.offsetY) + srcIdx | 0;
	var srcRowOffset = srcStride - (4 * (sourceRect.width + sourceImage.offsetX) | 0);
	var srcRowEnd = 4 * (sourceRect.x + sourceImage.offsetX + sourceRect.width) | 0;
	var srcData1 = sourceImage.buffer.data;
	var destStride = image.buffer.width * 4 | 0;
	var destPosition = (destPoint.x + image.offsetX) * 4 + destStride * (destPoint.y + image.offsetY) + destIdx | 0;
	var destRowOffset = destStride - (4 * (sourceRect.width + image.offsetX) | 0);
	var destRowEnd = 4 * (destPoint.x + image.offsetX + sourceRect.width) | 0;
	var destData1 = image.buffer.data;
	var length = sourceRect.width * sourceRect.height | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		destData1[destPosition] = srcData1[srcPosition];
		srcPosition += 4;
		destPosition += 4;
		if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
		if(destPosition % destStride > destRowEnd) destPosition += destRowOffset;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	var rowOffset = destPoint.y + image.offsetY - sourceRect.y - sourceImage.offsetY | 0;
	var columnOffset = destPoint.x + image.offsetX - sourceRect.x - sourceImage.offsetY | 0;
	var sourceData = sourceImage.buffer.data;
	var sourceStride = sourceImage.buffer.width * 4;
	var sourceOffset = 0;
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset = 0;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g2 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				offset = (row + rowOffset) * stride + (column + columnOffset) * 4;
				data[offset] = sourceData[sourceOffset];
				data[offset + 1] = sourceData[sourceOffset + 1];
				data[offset + 2] = sourceData[sourceOffset + 2];
				data[offset + 3] = sourceData[sourceOffset + 3];
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var outA;
		var oneMinusSourceAlpha;
		var _g11 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g4 = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g11 < _g4) {
			var row1 = _g11++;
			var _g31 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g21 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g31 < _g21) {
				var column1 = _g31++;
				sourceOffset = row1 * sourceStride + column1 * 4;
				offset = (row1 + rowOffset) * stride + (column1 + columnOffset) * 4;
				sourceAlpha = sourceData[sourceOffset + 3] / 255.0;
				destAlpha = data[offset + 3] / 255.0;
				oneMinusSourceAlpha = 1 - sourceAlpha;
				outA = sourceAlpha + destAlpha * oneMinusSourceAlpha;
				var index = Math.round((sourceData[sourceOffset] * sourceAlpha + data[offset] * destAlpha * oneMinusSourceAlpha) / outA);
				data[offset] = lime_graphics_utils_ImageDataUtil.__clamp[index];
				var index1 = Math.round((sourceData[sourceOffset + 1] * sourceAlpha + data[offset + 1] * destAlpha * oneMinusSourceAlpha) / outA);
				data[offset + 1] = lime_graphics_utils_ImageDataUtil.__clamp[index1];
				var index2 = Math.round((sourceData[sourceOffset + 2] * sourceAlpha + data[offset + 2] * destAlpha * oneMinusSourceAlpha) / outA);
				data[offset + 2] = lime_graphics_utils_ImageDataUtil.__clamp[index2];
				var index3 = Math.round(outA * 255.0);
				data[offset + 3] = lime_graphics_utils_ImageDataUtil.__clamp[index3];
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	var rgba = r | g << 8 | b << 16 | a << 24;
	var data = image.buffer.data;
	if(data == null) return;
	if(rect.width == image.buffer.width && rect.height == image.buffer.height && rect.x == 0 && rect.y == 0 && image.offsetX == 0 && image.offsetY == 0) {
		var length = image.buffer.width * image.buffer.height;
		var j = 0;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			j = i * 4;
			data[j] = r;
			data[j + 1] = g;
			data[j + 2] = b;
			data[j + 3] = a;
		}
	} else {
		var stride = image.buffer.width * 4;
		var offset;
		var rowStart = rect.y + image.offsetY | 0;
		var rowEnd = Std["int"](rect.get_bottom() + image.offsetY);
		var columnStart = rect.x + image.offsetX | 0;
		var columnEnd = Std["int"](rect.get_right() + image.offsetX);
		var _g1 = rowStart;
		while(_g1 < rowEnd) {
			var row = _g1++;
			var _g11 = columnStart;
			while(_g11 < columnEnd) {
				var column = _g11++;
				offset = row * stride + column * 4;
				data[offset] = r;
				data[offset + 1] = g;
				data[offset + 2] = b;
				data[offset + 3] = a;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		a16 = lime_graphics_utils_ImageDataUtil.__alpha16[data[index + 3]];
		data[index] = data[index] * a16 >> 16;
		data[index + 1] = data[index + 1] * a16 >> 16;
		data[index + 2] = data[index + 2] * a16 >> 16;
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime_graphics_ImageBuffer(new Uint8Array(newWidth * newHeight * 4),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (data[sourceIndex] * uOpposite + data[sourceIndexX] * uRatio) * vOpposite + (data[sourceIndexY] * uOpposite + data[sourceIndexXY] * uRatio) * vRatio | 0;
			newData[index + 1] = (data[sourceIndex + 1] * uOpposite + data[sourceIndexX + 1] * uRatio) * vOpposite + (data[sourceIndexY + 1] * uOpposite + data[sourceIndexXY + 1] * uRatio) * vRatio | 0;
			newData[index + 2] = (data[sourceIndex + 2] * uOpposite + data[sourceIndexX + 2] * uRatio) * vOpposite + (data[sourceIndexY + 2] * uOpposite + data[sourceIndexXY + 2] * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a;
	var unmultiply;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		a = data[index + 3];
		if(a != 0) {
			unmultiply = 255.0 / a;
			data[index] = lime_graphics_utils_ImageDataUtil.__clamp[data[index] * unmultiply | 0];
			data[index + 1] = lime_graphics_utils_ImageDataUtil.__clamp[data[index + 1] * unmultiply | 0];
			data[index + 2] = lime_graphics_utils_ImageDataUtil.__clamp[data[index + 2] * unmultiply | 0];
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = true;
lime_math_Matrix3.prototype = {
	__class__: lime_math_Matrix3
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = true;
lime_math_Rectangle.prototype = {
	offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,get_left: function() {
		return this.x;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,get_top: function() {
		return this.y;
	}
	,__class__: lime_math_Rectangle
	,__properties__: {get_top:"get_top",get_right:"get_right",get_left:"get_left",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = true;
lime_math_Vector2.prototype = {
	offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,__class__: lime_math_Vector2
};
var lime_math_Vector4 = function() { };
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = true;
var lime_net_URLLoader = function(request) {
	this.onSecurityError = new lime_app_Event();
	this.onProgress = new lime_app_Event();
	this.onOpen = new lime_app_Event();
	this.onIOError = new lime_app_Event();
	this.onHTTPStatus = new lime_app_Event();
	this.onComplete = new lime_app_Event();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(lime_net_URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["lime.net.URLLoader"] = lime_net_URLLoader;
lime_net_URLLoader.__name__ = true;
lime_net_URLLoader.prototype = {
	getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var _g = this;
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.__onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) {
				var listeners = self.onHTTPStatus.listeners;
				var repeat = self.onHTTPStatus.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](_g,s);
					if(!repeat[i]) {
						self.onHTTPStatus.remove(listeners[i]);
						length--;
					} else i++;
				}
			}
			if(s != null && s >= 200 && s < 400) self.__onData(subject.response); else if(s == null) {
				var listeners1 = self.onIOError.listeners;
				var repeat1 = self.onIOError.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](_g,"Failed to connect or resolve host");
					if(!repeat1[i1]) {
						self.onIOError.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
			} else if(s == 12029) {
				var listeners2 = self.onIOError.listeners;
				var repeat2 = self.onIOError.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](_g,"Failed to connect to host");
					if(!repeat2[i2]) {
						self.onIOError.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
			} else if(s == 12007) {
				var listeners3 = self.onIOError.listeners;
				var repeat3 = self.onIOError.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3](_g,"Unknown host");
					if(!repeat3[i3]) {
						self.onIOError.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
			} else if(s == 0) {
				var listeners4 = self.onIOError.listeners;
				var repeat4 = self.onIOError.repeat;
				var length4 = listeners4.length;
				var i4 = 0;
				while(i4 < length4) {
					listeners4[i4](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat4[i4]) {
						self.onIOError.remove(listeners4[i4]);
						length4--;
					} else i4++;
				}
				var listeners5 = self.onSecurityError.listeners;
				var repeat5 = self.onSecurityError.repeat;
				var length5 = listeners5.length;
				var i5 = 0;
				while(i5 < length5) {
					listeners5[i5](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat5[i5]) {
						self.onSecurityError.remove(listeners5[i5]);
						length5--;
					} else i5++;
				}
			} else {
				var listeners6 = self.onIOError.listeners;
				var repeat6 = self.onIOError.repeat;
				var length6 = listeners6.length;
				var i6 = 0;
				while(i6 < length6) {
					listeners6[i6](_g,"Http Error #" + subject.status);
					if(!repeat6[i6]) {
						self.onIOError.remove(listeners6[i6]);
						length6--;
					} else i6++;
				}
			}
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,lime_utils_ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,lime_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open("GET",url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(js_Boot.__cast(method , String),url,true);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			var listeners = this.onIOError.listeners;
			var repeat = this.onIOError.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](this,e.toString());
				if(!repeat[i]) {
					this.onIOError.remove(listeners[i]);
					length--;
				} else i++;
			}
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		var listeners1 = this.onOpen.listeners;
		var repeat1 = this.onOpen.repeat;
		var length1 = listeners1.length;
		var i1 = 0;
		while(i1 < length1) {
			listeners1[i1](this);
			if(!repeat1[i1]) {
				this.onOpen.remove(listeners1[i1]);
				length1--;
			} else i1++;
		}
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,__onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime_utils_ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var listeners = this.onComplete.listeners;
		var repeat = this.onComplete.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this);
			if(!repeat[i]) {
				this.onComplete.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,__onProgress: function(event) {
		this.bytesLoaded = event.loaded;
		this.bytesTotal = event.total;
		var listeners = this.onProgress.listeners;
		var repeat = this.onProgress.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this,this.bytesLoaded,this.bytesTotal);
			if(!repeat[i]) {
				this.onProgress.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == lime_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = lime_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: lime_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
};
var lime_net_URLLoaderDataFormat = $hxClasses["lime.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
lime_net_URLLoaderDataFormat.BINARY = ["BINARY",0];
lime_net_URLLoaderDataFormat.BINARY.toString = $estr;
lime_net_URLLoaderDataFormat.BINARY.__enum__ = lime_net_URLLoaderDataFormat;
lime_net_URLLoaderDataFormat.TEXT = ["TEXT",1];
lime_net_URLLoaderDataFormat.TEXT.toString = $estr;
lime_net_URLLoaderDataFormat.TEXT.__enum__ = lime_net_URLLoaderDataFormat;
lime_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
lime_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
lime_net_URLLoaderDataFormat.VARIABLES.__enum__ = lime_net_URLLoaderDataFormat;
var lime_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["lime.net.URLRequest"] = lime_net_URLRequest;
lime_net_URLRequest.__name__ = true;
lime_net_URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,lime_utils_ByteArray)) {
			res = res.slice();
			res.push(new lime_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: lime_net_URLRequest
};
var lime_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.URLRequestHeader"] = lime_net_URLRequestHeader;
lime_net_URLRequestHeader.__name__ = true;
lime_net_URLRequestHeader.prototype = {
	__class__: lime_net_URLRequestHeader
};
var lime_net_URLVariables = function() { };
$hxClasses["lime.net.URLVariables"] = lime_net_URLVariables;
lime_net_URLVariables.__name__ = true;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = true;
lime_system_System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js_Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.background = color;
	ApplicationMain.config.element = htmlElement;
	ApplicationMain.config.width = width;
	ApplicationMain.config.height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
var lime_ui_Gamepad = function() { };
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = true;
lime_ui_Gamepad.prototype = {
	__class__: lime_ui_Gamepad
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = true;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {get_shiftKey:"get_shiftKey",get_metaKey:"get_metaKey",get_ctrlKey:"get_ctrlKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = true;
lime_ui_Mouse.__properties__ = {set_cursor:"set_cursor"}
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : true, __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Window = function(config) {
	this.onWindowRestore = new lime_app_Event();
	this.onWindowResize = new lime_app_Event();
	this.onWindowMove = new lime_app_Event();
	this.onWindowMinimize = new lime_app_Event();
	this.onWindowLeave = new lime_app_Event();
	this.onWindowFullscreen = new lime_app_Event();
	this.onWindowFocusOut = new lime_app_Event();
	this.onWindowFocusIn = new lime_app_Event();
	this.onWindowEnter = new lime_app_Event();
	this.onWindowDeactivate = new lime_app_Event();
	this.onWindowClose = new lime_app_Event();
	this.onWindowActivate = new lime_app_Event();
	this.onTouchStart = new lime_app_Event();
	this.onTouchMove = new lime_app_Event();
	this.onTouchEnd = new lime_app_Event();
	this.onTextInput = new lime_app_Event();
	this.onTextEdit = new lime_app_Event();
	this.onMouseWheel = new lime_app_Event();
	this.onMouseUp = new lime_app_Event();
	this.onMouseMoveRelative = new lime_app_Event();
	this.onMouseMove = new lime_app_Event();
	this.onMouseDown = new lime_app_Event();
	this.onKeyUp = new lime_app_Event();
	this.onKeyDown = new lime_app_Event();
	this.onGamepadDisconnect = new lime_app_Event();
	this.onGamepadConnect = new lime_app_Event();
	this.onGamepadButtonUp = new lime_app_Event();
	this.onGamepadButtonDown = new lime_app_Event();
	this.onGamepadAxisMove = new lime_app_Event();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__x = 0;
	this.__y = 0;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = true;
lime_ui_Window.prototype = {
	create: function(application) {
		this.backend.create(application);
		if(this.currentRenderer != null) this.currentRenderer.create();
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_width:"set_width",set_height:"set_height",set_fullscreen:"set_fullscreen"}
};
var lime_utils_ByteArray = function(size) {
	if(size == null) size = 0;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	if(size > 0) this.allocated = size;
	this.___resizeBuffer(this.allocated);
	this.set_length(this.allocated);
};
$hxClasses["lime.utils.ByteArray"] = lime_utils_ByteArray;
lime_utils_ByteArray.__name__ = true;
lime_utils_ByteArray.__ofBuffer = function(buffer) {
	var bytes = new lime_utils_ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
};
lime_utils_ByteArray.prototype = {
	readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c21 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,__get: function(pos) {
		return this.data.getInt8(pos);
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value,this.allocated * 2))); else if(this.allocated > value * 2) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,__class__: lime_utils_ByteArray
	,__properties__: {set_length:"set_length"}
};
var motion_actuators_IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion_actuators_IGenericActuator;
motion_actuators_IGenericActuator.__name__ = true;
motion_actuators_IGenericActuator.prototype = {
	__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion_actuators_GenericActuator;
motion_actuators_GenericActuator.__name__ = true;
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) Reflect.setField(this.target,i,Reflect.field(this.properties,i)); else Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
		}
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) params = [];
		return Reflect.callMethod(method,method,params);
	}
	,change: function() {
		if(this._onUpdate != null) this.callMethod(this._onUpdate,this._onUpdateParams);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) this.callMethod(this._onComplete,this._onCompleteParams);
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) this._onCompleteParams = []; else this._onCompleteParams = parameters;
		if(this.duration == 0) this.complete();
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) this._onRepeatParams = []; else this._onRepeatParams = parameters;
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) this._onPauseParams = []; else this._onPauseParams = parameters;
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) this._onResumeParams = []; else this._onResumeParams = parameters;
		return this;
	}
	,pause: function() {
		if(this._onPause != null) this.callMethod(this._onPause,this._onPauseParams);
	}
	,reflect: function(value) {
		if(value == null) value = true;
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) times = -1;
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) this.callMethod(this._onResume,this._onResumeParams);
	}
	,reverse: function(value) {
		if(value == null) value = true;
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) value = true;
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) value = true;
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = openfl_Lib.getTimer() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		openfl_Lib.current.stage.addEventListener(openfl_events_Event.ENTER_FRAME,motion_actuators_SimpleActuator.stage_onEnterFrame);
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion_actuators_SimpleActuator;
motion_actuators_SimpleActuator.__name__ = true;
motion_actuators_SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = openfl_Lib.getTimer() / 1000;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g1 = 0;
	var _g = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		var i = _g1++;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) actuator.update(currentTime);
			j++;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	setField_openfl_geom_Transform: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_TransformActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_openfl_display_DisplayObject: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",this.cacheVisible);
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) value = Reflect.field(target,propertyName); else value = Reflect.getProperty(target,propertyName);
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) start = Reflect.field(this.target,i); else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				details = new motion_actuators_PropertyDetails(this.target,i,start,this.getField(this.properties,i) - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject);
		if(this.toggleVisible && this.properties.alpha != 0 && !this.getField(this.target,"visible")) {
			this.setVisible = true;
			this.cacheVisible = this.getField(this.target,"visible");
			this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",true);
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = openfl_Lib.getTimer();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (openfl_Lib.getTimer() - this.pauseTime) / 1000;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) details.target[details.propertyName] = value; else Reflect.setProperty(details.target,details.propertyName,value);
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) this.apply();
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) this.apply();
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					var i1 = _g1++;
					details = this.propertyDetails[i1];
					this.setProperty(details,details.start + details.change * easing);
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					var i2 = _g11++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) rotation -= 360; else if(rotation < -180) rotation += 360;
						endValue = details.start + rotation * easing;
					} else endValue = details.start + details.change * easing;
					if(!this._snapping) {
						if(details.isField) details.target[details.propertyName] = endValue; else Reflect.setProperty(details.target,details.propertyName,endValue);
					} else this.setProperty(details,Math.round(endValue));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion_easing_Expo;
motion_easing_Expo.__name__ = true;
motion_easing_Expo.__properties__ = {get_easeOut:"get_easeOut"}
motion_easing_Expo.get_easeOut = function() {
	return new motion_easing_ExpoEaseOut();
};
var motion_easing_IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion_easing_IEasing;
motion_easing_IEasing.__name__ = true;
motion_easing_IEasing.prototype = {
	__class__: motion_easing_IEasing
};
var motion_easing_ExpoEaseOut = function() {
};
$hxClasses["motion.easing.ExpoEaseOut"] = motion_easing_ExpoEaseOut;
motion_easing_ExpoEaseOut.__name__ = true;
motion_easing_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) return 1; else return 1 - Math.pow(2,-10 * k);
	}
	,__class__: motion_easing_ExpoEaseOut
};
var motion_Actuate = function() { };
$hxClasses["motion.Actuate"] = motion_Actuate;
motion_Actuate.__name__ = true;
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) customActuator = motion_Actuate.defaultActuator;
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) allowCreation = true;
	if(!(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) && allowCreation) motion_Actuate.targetLibraries.set(target,[]);
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) sendEvent = true;
	if(complete == null) complete = false;
	if(target != null) {
		if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					Reflect.setField(temp,properties,null);
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1;
					_g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						Reflect.setField(temp1,property,null);
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					i--;
				}
			}
		}
	}
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) overwrite = true;
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) customActuator = motion_Actuate.defaultActuator;
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					i--;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else return motion_Actuate.apply(target,properties,customActuator);
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) motion_Actuate.targetLibraries.remove(target);
	}
};
var motion_IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion_IComponentPath;
motion_IComponentPath.__name__ = true;
motion_IComponentPath.prototype = {
	__class__: motion_IComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_actuators_FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(js_Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) target.set_filters([Type.createInstance(this.filterClass,[])]);
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(filter,this.filterClass)) this.filter = filter;
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion_actuators_FilterActuator;
motion_actuators_FilterActuator.__name__ = true;
motion_actuators_FilterActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_FilterActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") Reflect.setField(this.filter,propertyName,Reflect.field(this.properties,propertyName));
		}
		var filters = this.getField(this.target,"filters");
		Reflect.setField(filters,this.properties.filter,this.filter);
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				start = this.getField(this.filter,propertyName);
				details = new motion_actuators_PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) Reflect.setField(filters,this.properties.filter,this.filter); else {
			var _g1 = 0;
			var _g = filters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(js_Boot.__instanceof(filters[i],this.filterClass)) filters[i] = this.filter;
			}
		}
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,__class__: motion_actuators_FilterActuator
});
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) this.properties.start = [];
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) this.properties.end = this.properties.start;
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
$hxClasses["motion.actuators.MethodActuator"] = motion_actuators_MethodActuator;
motion_actuators_MethodActuator.__name__ = true;
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		this.callMethod(this.target,this.properties.end);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			this.callMethod(this.target,this.currentParameters);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion_actuators_MotionPathActuator;
motion_actuators_MotionPathActuator.__name__ = true;
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) Reflect.setField(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end()); else Reflect.setProperty(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end());
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) path.start = Reflect.field(this.target,propertyName); else {
					isField = false;
					path.start = Reflect.getProperty(this.target,propertyName);
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) Reflect.setField(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) Reflect.setField(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else if(details2.isField) Reflect.setField(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing))); else Reflect.setProperty(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_MotionPathActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) isField = true;
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion_actuators_PropertyDetails;
motion_actuators_PropertyDetails.__name__ = true;
motion_actuators_PropertyDetails.prototype = {
	__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) isField = true;
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion_actuators_PropertyPathDetails;
motion_actuators_PropertyPathDetails.__name__ = true;
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	__class__: motion_actuators_PropertyPathDetails
});
var motion_actuators_TransformActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion_actuators_TransformActuator;
motion_actuators_TransformActuator.__name__ = true;
motion_actuators_TransformActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_TransformActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.endColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.endSoundTransform);
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject)) this.initializeColor();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) this.initializeSound();
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl_geom_ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else this.endColorTransform.alphaMultiplier = this.getField(this.target,"alpha");
		var transform = this.getField(this.target,"transform");
		var begin = this.getField(transform,"colorTransform");
		this.tweenColorTransform = new openfl_geom_ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			start = this.getField(begin,propertyName);
			details = new motion_actuators_PropertyDetails(this.tweenColorTransform,propertyName,start,this.getField(this.endColorTransform,propertyName) - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		if(this.getField(this.target,"soundTransform") == null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",new openfl_media_SoundTransform());
		var start = this.getField(this.target,"soundTransform");
		this.endSoundTransform = this.getField(this.target,"soundTransform");
		this.tweenSoundTransform = new openfl_media_SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.tweenColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.tweenSoundTransform);
	}
	,__class__: motion_actuators_TransformActuator
});
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = true;
openfl_IAssetCache.prototype = {
	__class__: openfl_IAssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = true;
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,__class__: openfl_AssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = true;
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) return openfl_Assets.cache.getFont(id);
	var limeFont = lime_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) return sound;
	}
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_Assets.getText(id);
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.__image != null;
	return true;
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = true;
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	__class__: openfl_display_MovieClip
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = true;
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_display_LoaderInfo
});
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = true;
openfl_system_ApplicationDomain.prototype = {
	__class__: openfl_system_ApplicationDomain
};
var openfl_events_UncaughtErrorEvents = function(target) {
	openfl_events_EventDispatcher.call(this,target);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = true;
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = true;
openfl_geom_ColorTransform.prototype = {
	__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) skipAlphaMultiplier = false;
		return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__class__: openfl_geom_ColorTransform
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = true;
openfl_Lib.application = null;
openfl_Lib.embed = $hx_exports.openfl.embed = function(elementName,width,height,background,assetsPrefix) {
	lime_system_System.embed(elementName,width,height,background,assetsPrefix);
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
};
openfl_Lib.notImplemented = function(api) {
	if(!openfl_Lib.__sentWarnings.exists(api)) {
		openfl_Lib.__sentWarnings.set(api,true);
		console.log("Warning: " + api + " is not implemented");
	}
};
var openfl_VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl_VectorData;
openfl_VectorData.__name__ = true;
openfl_VectorData.prototype = {
	__class__: openfl_VectorData
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = true;
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = true;
openfl__$internal_renderer_AbstractRenderer.prototype = {
	render: function(stage) {
	}
	,setViewport: function(x,y,width,height) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_RenderSession = function() {
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = true;
openfl__$internal_renderer_RenderSession.prototype = {
	__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = true;
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		var transform = bitmap.__worldTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			cairo.setSourceSurface(surface,0,0);
			if(scrollRect != null) {
				cairo.pushGroup();
				cairo.setSourceSurface(surface,0,0);
				cairo.newPath();
				cairo.rectangle(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				cairo.fill();
				cairo.popGroupToSource();
			}
			if(bitmap.__worldAlpha == 1) cairo.paint(); else cairo.paintWithAlpha(bitmap.__worldAlpha);
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = true;
openfl__$internal_renderer_cairo_CairoGraphics.cairo = null;
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
	var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
	var cx2 = x + 0.66666666666666663 * (cx - x);
	var cy2 = y + 0.66666666666666663 * (cy - y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1,cy1,cx2,cy2,x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.length != 0) {
		var cairo = renderSession.cairo;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cy1 = command[4];
				var cx2 = command[3];
				var cx1 = command[2];
				cairo.curveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				positionX = x;
				positionY = y;
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				positionX = x1;
				positionY = y1;
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				cairo.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				x3 -= offsetX;
				y3 -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x3 + width;
				var ye = y3 + height;
				var xm = x3 + width / 2;
				var ym = y3 + height / 2;
				cairo.moveTo(x3,ym);
				cairo.curveTo(x3,ym - oy,xm - ox,y3,xm,y3);
				cairo.curveTo(xm + ox,y3,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x3,ym + oy,x3,ym);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				cairo.rectangle(x4 - offsetX,y4 - offsetY,width1,height1);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 15:
				var y6 = command[3];
				var x6 = command[2];
				cairo.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 16:
				var y7 = command[3];
				var x7 = command[2];
				cairo.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				break;
			default:
			}
		}
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = true;
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		var transform = mask.__getTransform();
		cairo.set_matrix(transform.__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clip();
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new lime_math_Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clip();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function(width,height,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.cairo = cairo;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = true;
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.cairo.identityMatrix();
		if(stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2]);
			this.cairo.paint();
		}
		stage.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoShape = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoShape"] = openfl__$internal_renderer_cairo_CairoShape;
openfl__$internal_renderer_cairo_CairoShape.__name__ = true;
openfl__$internal_renderer_cairo_CairoShape.render = function(shape,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = true;
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = true;
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__worldTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.webkitImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.__image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.__image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.webkitImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = true;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bounds = null;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = null;
openfl__$internal_renderer_canvas_CanvasGraphics.graphics = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = null;
openfl__$internal_renderer_canvas_CanvasGraphics.context = null;
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat) {
	bitmap.__sync();
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.__image.get_src(),bitmapRepeat?"repeat":"no-repeat");
	return null;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.__image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	context.fill();
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = [];
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = [];
};
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function() {
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) return;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var _g = 0;
	while(_g < commands.length) {
		var command = commands[_g];
		++_g;
		switch(command[1]) {
		case 3:
			var y = command[7];
			var x = command[6];
			var cy2 = command[5];
			var cx2 = command[4];
			var cy1 = command[3];
			var cx1 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
			break;
		case 4:
			var y1 = command[5];
			var x1 = command[4];
			var cy = command[3];
			var cx = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
			break;
		case 5:
			var radius = command[4];
			var y2 = command[3];
			var x2 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x2 - offsetX + radius,y2 - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
			break;
		case 6:
			var height = command[5];
			var width = command[4];
			var y3 = command[3];
			var x3 = command[2];
			x3 -= offsetX;
			y3 -= offsetY;
			var kappa = .5522848;
			var ox = width / 2 * kappa;
			var oy = height / 2 * kappa;
			var xe = x3 + width;
			var ye = y3 + height;
			var xm = x3 + width / 2;
			var ym = y3 + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x3,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
			break;
		case 8:
			var ry = command[7];
			var rx = command[6];
			var height1 = command[5];
			var width1 = command[4];
			var y4 = command[3];
			var x4 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(x4 - offsetX,y4 - offsetY,width1,height1,rx,ry);
			break;
		case 15:
			var y5 = command[3];
			var x5 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x5 - offsetX,y5 - offsetY);
			positionX = x5;
			positionY = y5;
			break;
		case 16:
			var y6 = command[3];
			var x6 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x6 - offsetX,y6 - offsetY);
			positionX = x6;
			positionY = y6;
			closeGap = true;
			startX = x6;
			startY = y6;
			break;
		case 12:
			var miterLimit = command[9];
			var joints = command[8];
			var caps = command[7];
			var scaleMode = command[6];
			var pixelHinting = command[5];
			var alpha = command[4];
			var color = command[3];
			var thickness = command[2];
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(thickness == null) openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false; else {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = thickness;
				if(joints == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = "round"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = Std.string(joints).toLowerCase();
				if(caps == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "round"; else switch(caps[1]) {
				case 0:
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "butt";
					break;
				default:
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = Std.string(caps).toLowerCase();
				}
				if(miterLimit == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = 3; else openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = miterLimit;
				if(alpha == 1 || alpha == null) if(color == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(color & 16777215,6); else {
					var r = (color & 16711680) >>> 16;
					var g = (color & 65280) >>> 8;
					var b = color & 255;
					if(color == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 14:
			var focalPointRatio = command[9];
			var interpolationMethod = command[8];
			var spreadMethod = command[7];
			var matrix = command[6];
			var ratios = command[5];
			var alphas = command[4];
			var colors = command[3];
			var type = command[2];
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 13:
			var smooth = command[5];
			var repeat = command[4];
			var matrix1 = command[3];
			var bitmap = command[2];
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(bitmap,repeat);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 0:
			var smooth1 = command[5];
			var repeat1 = command[4];
			var matrix2 = command[3];
			var bitmap1 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(bitmap1,true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(matrix2 != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = matrix2;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = new openfl_geom_Matrix(matrix2.a,matrix2.b,matrix2.c,matrix2.d,matrix2.tx,matrix2.ty);
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var alpha1 = command[3];
			var rgb = command[2];
			if(alpha1 < 0.005) openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false; else {
				if(alpha1 == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(rgb,6); else {
					var r1 = (rgb & 16711680) >>> 16;
					var g1 = (rgb & 65280) >>> 8;
					var b1 = rgb & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + alpha1 + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var focalPointRatio1 = command[9];
			var interpolationMethod1 = command[8];
			var spreadMethod1 = command[7];
			var matrix3 = command[6];
			var ratios1 = command[5];
			var alphas1 = command[4];
			var colors1 = command[3];
			var type1 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(type1,colors1,alphas1,ratios1,matrix3,spreadMethod1,interpolationMethod1,focalPointRatio1);
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 7:
			var height2 = command[5];
			var width2 = command[4];
			var y7 = command[3];
			var x7 = command[2];
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(x7,y7));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(x7 + width2,y7 + height2));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = y7;
					sl = x7;
					sb = y7 + height2;
					sr = x7 + width2;
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.__image.get_src(),sl,st,sr - sl,sb - st,x7 - offsetX,y7 - offsetY,width2,height2);
				}
			}
			if(!optimizationUsed) openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(x7 - offsetX,y7 - offsetY,width2,height2);
			break;
		default:
		}
	}
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type[1]) {
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,(point.x - matrix.tx) / 2);
		break;
	case 1:
		var matrix1;
		if(matrix != null) matrix1 = new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty); else matrix1 = new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession) {
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		if(!graphics.__visible || graphics.__commands.length == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height == 0) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			graphics.__canvas.width = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width);
			graphics.__canvas.height = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height);
			var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
			var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = [];
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = [];
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var _g = 0;
			var _g1 = graphics.__commands;
			try {
				while(_g < _g1.length) {
					var command = _g1[_g];
					++_g;
					switch(command[1]) {
					case 3:case 4:case 15:case 16:
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.push(command);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.push(command);
						break;
					case 11:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 12:case 14:case 13:
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.push(command);
						break;
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.push(command);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.push(command);
						break;
					case 5:case 6:case 7:case 8:
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.push(command);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.push(command);
						break;
					case 10:
						var culling = command[5];
						var uvtData = command[4];
						var indices = command[3];
						var vertices = command[2];
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var v = vertices;
						var ind = indices;
						var uvt = uvtData;
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvtData == null) {
								var this1;
								this1 = new openfl_VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvtData = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i1 = _g3++;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data;
											var this3;
											this3 = new Array(uvtData.data.length + 10);
											data = this3;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data,0,uvtData.data.length);
											uvtData.data = data;
										}
										uvtData.data[uvtData.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
									}
									uvtData.length;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data1;
											var this4;
											this4 = new Array(uvtData.data.length + 10);
											data1 = this4;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
											uvtData.data = data1;
										}
										uvtData.data[uvtData.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
									}
									uvtData.length;
								}
							}
							var skipT = uvtData.length != v.length;
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvtData,skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0); else pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
						var i = 0;
						var l = ind.length;
						var a;
						var b;
						var c;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i < l) {
							a = i;
							b = i + 1;
							c = i + 2;
							iax = ind.data[a] * 2;
							iay = ind.data[a] * 2 + 1;
							ibx = ind.data[b] * 2;
							iby = ind.data[b] * 2 + 1;
							icx = ind.data[c] * 2;
							icy = ind.data[c] * 2 + 1;
							x1 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							switch(culling[1]) {
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i += 3;
									continue;
								}
								break;
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								i += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i += 3;
						}
						break;
					case 9:
						var count = command[6];
						var flags = command[5];
						var smooth = command[4];
						var tileData = command[3];
						var sheet = command[2];
						var useScale = (flags & 1) > 0;
						var useRotation = (flags & 2) > 0;
						var useTransform = (flags & 16) > 0;
						var useRGB = (flags & 4) > 0;
						var useAlpha = (flags & 8) > 0;
						var useRect = (flags & 32) > 0;
						var useOrigin = (flags & 64) > 0;
						var useBlendAdd = (flags & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = tileData.length;
						if(count >= 0 && totalCount > count) totalCount = count;
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						sheet.__bitmap.__sync();
						surface = sheet.__bitmap.__image.get_src();
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "lighter";
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = tileData[index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = sheet.__tileRects[tileID];
								center = sheet.__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = sheet.__rectTile;
								rect.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
								center = sheet.__point;
								if(useOrigin) {
									center.x = tileData[index + 6];
									center.y = tileData[index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(tileData[index],tileData[index + 1]);
								if(useRotation) openfl__$internal_renderer_canvas_CanvasGraphics.context.rotate(tileData[index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = tileData[index + scaleIndex];
								if(useTransform) openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
								if(useAlpha) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalAlpha = tileData[index + alphaIndex];
								openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "source-over";
						break;
					default:
						openfl_Lib.notImplemented("CanvasGraphics");
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.length > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.length > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.length != 0) {
		var context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cy1 = command[4];
				var cx2 = command[3];
				var cx1 = command[2];
				context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				positionX = x;
				positionY = y;
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				positionX = x1;
				positionY = y1;
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				x3 -= offsetX;
				y3 -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x3 + width;
				var ye = y3 + height;
				var xm = x3 + width / 2;
				var ym = y3 + height / 2;
				context.moveTo(x3,ym);
				context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
				context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
				context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				context.rect(x4 - offsetX,y4 - offsetY,width1,height1);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 15:
				var y6 = command[3];
				var x6 = command[2];
				context.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 16:
				var y7 = command[3];
				var x7 = command[2];
				context.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				break;
			default:
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = true;
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getTransform();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(width,height,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = true;
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = true;
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			if(shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			context.globalAlpha = shape.__worldAlpha;
			var transform = shape.__worldTransform;
			if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			if(scrollRect == null) context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y); else context.drawImage(graphics.__canvas,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height);
			if(shape.__mask != null) renderSession.maskManager.popMask();
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = true;
openfl__$internal_renderer_canvas_CanvasTextField.context = null;
openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function(textField) {
	textField.this_onRemovedFromStage(null);
};
openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function(textField) {
	textField.__cursorPosition = -1;
	if(textField.__hiddenInput == null) {
		textField.__hiddenInput = window.document.createElement("input");
		var hiddenInput = textField.__hiddenInput;
		hiddenInput.type = "text";
		hiddenInput.style.position = "absolute";
		hiddenInput.style.opacity = "0";
		hiddenInput.style.color = "transparent";
		hiddenInput.style.left = "0px";
		hiddenInput.style.top = "50%";
		if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
			hiddenInput.style.fontSize = "0px";
			hiddenInput.style.width = "0px";
			hiddenInput.style.height = "0px";
		} else {
			hiddenInput.style.width = "1px";
			hiddenInput.style.height = "1px";
		}
		hiddenInput.style.pointerEvents = "none";
		hiddenInput.style.zIndex = "-10000000";
		if(textField.maxChars > 0) hiddenInput.maxLength = textField.maxChars;
		window.document.body.appendChild(hiddenInput);
		hiddenInput.value = textField.__text;
	}
	if(textField.stage != null) textField.this_onAddedToStage(null); else {
		textField.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(textField,textField.this_onAddedToStage));
		textField.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(textField,textField.this_onRemovedFromStage));
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.getLineBreakIndices = function(textField) {
	var breaks = [];
	var _g1 = 0;
	var _g;
	var s = textField.get_text();
	_g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var $char = haxe_Utf8.charCodeAt(textField.get_text(),i);
		if($char == openfl__$internal_renderer_canvas_CanvasTextField.__utf8_endline_code) breaks.push(i);
	}
	return breaks;
};
openfl__$internal_renderer_canvas_CanvasTextField.getLineWidth = function(textField,line) {
	if(textField.__context == null) {
		textField.__canvas = window.document.createElement("canvas");
		textField.__context = textField.__canvas.getContext("2d");
	}
	var linebreaks = openfl__$internal_renderer_canvas_CanvasTextField.getLineBreakIndices(textField);
	var context = textField.__context;
	context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat);
	if(line == -1) {
		var longest = 0.0;
		var _g1 = 0;
		var _g = linebreaks.length;
		while(_g1 < _g) {
			var i = _g1++;
			longest = Math.max(longest,context.measureText(textField.__text.substring(i == 0?0:linebreaks[i - 1] + 1,linebreaks[i])).width);
		}
		longest = Math.max(longest,context.measureText(textField.__text.substring(linebreaks.length == 0?0:linebreaks[linebreaks.length - 1] + 1)).width);
		return longest;
	} else return context.measureText(textField.__text.substring(line == 0?0:linebreaks[line - 1] + 1)).width;
};
openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth = function(textField,text) {
	if(textField.__context == null) {
		textField.__canvas = window.document.createElement("canvas");
		textField.__context = textField.__canvas.getContext("2d");
	}
	textField.__context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat);
	textField.__context.textAlign = "left";
	return textField.__context.measureText(text).width;
};
openfl__$internal_renderer_canvas_CanvasTextField.measureText = function(textField,condense) {
	if(condense == null) condense = true;
	if(textField.__context == null) {
		textField.__canvas = window.document.createElement("canvas");
		textField.__context = textField.__canvas.getContext("2d");
	}
	if(textField.__ranges == null) {
		textField.__context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat);
		return [textField.__context.measureText(textField.__text).width];
	} else {
		var measurements = [];
		var _g = 0;
		var _g1 = textField.__ranges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			textField.__context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(range.format);
			measurements.push(textField.__context.measureText(textField.get_text().substring(range.start,range.end)).width);
		}
		return measurements;
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession) {
	var bounds = textField.getBounds(null);
	if(textField.__dirty) {
		if((textField.__text == null || textField.__text == "") && !textField.background && !textField.border && !textField.__hasFocus || (textField.get_width() <= 0 || textField.get_height() <= 0) && textField.autoSize != openfl_text_TextFieldAutoSize.NONE) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics == null || textField.__graphics.__canvas == null) {
				if(textField.__graphics == null) textField.__graphics = new openfl_display_Graphics();
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
				textField.__graphics.__bounds = new openfl_geom_Rectangle(0,0,bounds.width,bounds.height);
			}
			var graphics = textField.__graphics;
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			if(textField.__text != null && textField.__text != "" || textField.__hasFocus) {
				var text = textField.get_text();
				if(textField.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				var measurements = openfl__$internal_renderer_canvas_CanvasTextField.measureText(textField);
				graphics.__canvas.width = Math.ceil(textField.__width);
				graphics.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,textField.get_width() - 1,textField.get_height() - 1);
					if(textField.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__hasFocus && textField.__selectionStart == textField.__cursorPosition && textField.__showCursor) {
					var cursorOffset = openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(textField,text.substring(0,textField.__cursorPosition)) + 3;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.__textFormat.color,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(cursorOffset,5,1,textField.__textFormat.size * 1.185 - 4);
				} else if(textField.__hasFocus && Math.abs(textField.__selectionStart - textField.__cursorPosition) > 0) {
					var lowPos = Std["int"](Math.min(textField.__selectionStart,textField.__cursorPosition));
					var highPos = Std["int"](Math.max(textField.__selectionStart,textField.__cursorPosition));
					var xPos = openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(textField,text.substring(0,lowPos)) + 2;
					var widthPos = openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(textField,text.substring(lowPos,highPos));
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(xPos,5,widthPos,textField.__textFormat.size * 1.185 - 4);
				}
				if(textField.__ranges == null) openfl__$internal_renderer_canvas_CanvasTextField.renderText(textField,text,textField.__textFormat,0,bounds); else {
					var currentIndex = 0;
					var range;
					var offsetX = 0.0;
					var _g1 = 0;
					var _g2 = textField.__ranges.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						range = textField.__ranges[i1];
						openfl__$internal_renderer_canvas_CanvasTextField.renderText(textField,text.substring(range.start,range.end),range.format,offsetX,bounds);
						offsetX += measurements[i1];
					}
				}
			} else {
				graphics.__canvas.width = Math.ceil(textField.__width);
				graphics.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					if(textField.border) openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,textField.get_width() - 1,textField.get_height() - 1); else openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,textField.get_width(),textField.get_height());
					if(textField.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.renderText = function(textField,text,format,offsetX,bounds) {
	openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(format);
	openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(format.color,6);
	openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
	var yOffset = 0.0;
	if(new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent)) yOffset = format.size * 0.185;
	var lines = [];
	if(textField.get_wordWrap()) {
		var words = text.split(" ");
		var line = "";
		var word;
		var newLineIndex;
		var test;
		var _g1 = 0;
		var _g = words.length;
		while(_g1 < _g) {
			var i = _g1++;
			word = words[i];
			newLineIndex = word.indexOf("\n");
			if(newLineIndex > -1) {
				while(newLineIndex > -1) {
					test = line + word.substring(0,newLineIndex) + " ";
					if(openfl__$internal_renderer_canvas_CanvasTextField.context.measureText(test).width > textField.__width - 4 && i > 0) {
						lines.push(line);
						lines.push(word.substring(0,newLineIndex));
					} else lines.push(line + word.substring(0,newLineIndex));
					word = HxOverrides.substr(word,newLineIndex + 1,null);
					newLineIndex = word.indexOf("\n");
					line = "";
				}
				if(word != "") line = word + " ";
			} else {
				test = line + words[i] + " ";
				if(openfl__$internal_renderer_canvas_CanvasTextField.context.measureText(test).width > textField.__width - 4 && i > 0) {
					lines.push(line);
					line = words[i] + " ";
				} else line = test;
			}
		}
		if(line != "") lines.push(line);
	} else lines = text.split("\n");
	var _g2 = 0;
	while(_g2 < lines.length) {
		var line1 = lines[_g2];
		++_g2;
		var _g11 = format.align;
		switch(_g11[1]) {
		case 3:
			openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "center";
			openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(line1,offsetX + textField.get_width() / 2,2 + yOffset,textField.get_textWidth());
			break;
		case 1:
			openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "end";
			openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(line1,offsetX + textField.get_width() - 2,2 + yOffset,textField.get_textWidth());
			break;
		default:
			openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
			openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(line1,2 + offsetX,2 + yOffset,textField.get_textWidth());
		}
		yOffset += format.size * 1.185 + format.leading;
		offsetX = 0;
	}
};
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = true;
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.webkitImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.__image.buffer.__srcCanvas,0,0);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.__image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = true;
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(width,height,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = true;
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__worldTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = displayObject.__worldClip.transform(displayObject.__worldTransform.clone().invert());
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = true;
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = new openfl_geom_Matrix();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform = transform.mult(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = true;
openfl__$internal_renderer_dom_DOMTextField.getFont = function(format) {
	var font;
	if(format.italic) font = "italic "; else font = "normal ";
	font += "normal ";
	if(format.bold) font += "bold "; else font += "normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading) + "px ";
	font += "" + (function($this) {
		var $r;
		var _g = format.font;
		$r = (function($this) {
			var $r;
			switch(_g) {
			case "_sans":
				$r = "sans-serif";
				break;
			case "_serif":
				$r = "serif";
				break;
			case "_typewriter":
				$r = "monospace";
				break;
			default:
				$r = "'" + format.font + "'";
			}
			return $r;
		}($this));
		return $r;
	}(this));
	return font;
};
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		div.innerHTML = new EReg("\n","g").replace(textField.__text,"<br>");
		div.style.setProperty("font",openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textField.__measuredWidth = div.clientWidth;
	if(textField.__div == null) div.style.width = Std.string(textField.__width - 4) + "px";
	textField.__measuredHeight = div.clientHeight;
	if(textField.__div == null) window.document.body.removeChild(div);
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textField.__text != "" || textField.background || textField.border) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("cursor","inherit",null);
				}
				var style = textField.__style;
				textField.__div.innerHTML = textField.__text;
				if(textField.background) style.setProperty("background-color","#" + StringTools.hex(textField.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textField.border) style.setProperty("border","solid 1px #" + StringTools.hex(textField.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textField.autoSize != openfl_text_TextFieldAutoSize.NONE) style.setProperty("width","auto",null); else style.setProperty("width",textField.__width + "px",null);
				style.setProperty("height",textField.__height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g[1]) {
				case 3:
					style.setProperty("text-align","center",null);
					break;
				case 1:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,false);
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
var openfl__$internal_renderer_opengl_GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) preserveDrawingBuffer = false;
	if(antialias == null) antialias = false;
	if(transparent == null) transparent = false;
	if(height == null) height = 600;
	if(width == null) width = 800;
	this.vpHeight = 0;
	this.vpWidth = 0;
	this.vpY = 0;
	this.vpX = 0;
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
	this.gl = gl;
	this.defaultFramebuffer = null;
	openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = gl;
	this.projectionMatrix = new openfl_geom_Matrix();
	this.projection = new openfl_geom_Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl_geom_Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl__$internal_renderer_opengl_utils_ShaderManager(gl);
	this.spriteBatch = new openfl__$internal_renderer_opengl_utils_SpriteBatch(gl);
	this.filterManager = new openfl__$internal_renderer_opengl_utils_FilterManager(gl,this.transparent);
	this.stencilManager = new openfl__$internal_renderer_opengl_utils_StencilManager(gl);
	this.blendModeManager = new openfl__$internal_renderer_opengl_utils_BlendModeManager(gl);
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.maskManager = this.maskManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	this.renderSession.defaultFramebuffer = this.defaultFramebuffer;
	this.renderSession.projectionMatrix = this.projectionMatrix;
	this.maskManager = new openfl__$internal_renderer_opengl_utils_GLMaskManager(this.renderSession);
	this.renderSession.maskManager = this.maskManager;
	this.shaderManager.setShader(this.shaderManager.defaultShader);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = true;
openfl__$internal_renderer_opengl_GLRenderer.renderBitmap = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	if(shape.__graphics == null || shape.__graphics.__bitmap == null) return;
	var bounds = shape.getBounds(null);
	var bitmap = shape.__graphics.__bitmap;
	var local = new openfl_geom_Matrix();
	local.translate(shape.__graphics.__bounds.x,shape.__graphics.__bounds.y);
	local = local.mult(shape.__worldTransform);
	renderSession.spriteBatch.renderBitmapData(bitmap,true,local,shape.__worldColorTransform,shape.__worldAlpha,shape.__blendMode,openfl_display_PixelSnapping.ALWAYS);
};
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	setViewport: function(x,y,width,height) {
		if(!(this.vpX == x && this.vpY == y && this.vpWidth == width && this.vpHeight == height)) {
			this.vpX = x;
			this.vpY = y;
			this.vpWidth = width;
			this.vpHeight = height;
			this.gl.viewport(x,y,width,height);
			this.setOrtho(x,y,width,height);
		}
	}
	,setOrtho: function(x,y,width,height) {
		var o = this.projectionMatrix;
		o.identity();
		o.a = 1 / width * 2;
		o.d = -1 / height * 2;
		o.tx = -1 - x * o.a;
		o.ty = 1 - y * o.d;
	}
	,render: function(stage) {
		if(this.contextLost) return;
		var gl = this.gl;
		this.setViewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.defaultFramebuffer);
		if(this.transparent) gl.clearColor(0,0,0,0); else gl.clearColor(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2],1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.finish();
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		this.setViewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_shaders2_Shader = function(gl) {
	this.uniforms = new haxe_ds_StringMap();
	this.attributes = new haxe_ds_StringMap();
	this.ID = openfl__$internal_renderer_opengl_shaders2_Shader.UID++;
	this.gl = gl;
	this.program = null;
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_Shader.__name__ = true;
openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var vertexShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,vertexSrc,gl.VERTEX_SHADER);
	var fragmentShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,fragmentSrc,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	if(vertexShader != null && fragmentShader != null) {
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) console.log("Could not initialize shaders");
	}
	return program;
};
openfl__$internal_renderer_opengl_shaders2_Shader.compileShader = function(gl,shaderSrc,type) {
	var src = shaderSrc.join("\n");
	var shader = gl.createShader(type);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		console.log(gl.getShaderInfoLog(shader));
		return null;
	}
	return shader;
};
openfl__$internal_renderer_opengl_shaders2_Shader.prototype = {
	init: function() {
		this.program = openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram(this.gl,this.vertexSrc,this.fragmentSrc);
		this.gl.useProgram(this.program);
	}
	,getAttribLocation: function(attribute) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.attributes.exists(attribute)) return this.attributes.get(attribute); else {
			var location = this.gl.getAttribLocation(this.program,attribute);
			this.attributes.set(attribute,location);
			return location;
		}
	}
	,getUniformLocation: function(uniform) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.uniforms.exists(uniform)) return this.uniforms.get(uniform); else {
			var location = this.gl.getUniformLocation(this.program,uniform);
			this.uniforms.set(uniform,location);
			return location;
		}
	}
	,enableVertexAttribute: function(attribute,stride,offset) {
		var location = this.getAttribLocation(attribute.name);
		this.gl.enableVertexAttribArray(location);
		this.gl.vertexAttribPointer(location,attribute.components,attribute.type,attribute.normalized,stride,offset * 4);
	}
	,disableVertexAttribute: function(attribute,setDefault) {
		if(setDefault == null) setDefault = true;
		var location = this.getAttribLocation(attribute.name);
		this.gl.disableVertexAttribArray(location);
		if(setDefault) {
			var _g = attribute.components;
			switch(_g) {
			case 1:
				this.gl.vertexAttrib1fv(location,attribute.defaultValue.subarray(0,1));
				break;
			case 2:
				this.gl.vertexAttrib2fv(location,attribute.defaultValue.subarray(0,2));
				break;
			case 3:
				this.gl.vertexAttrib3fv(location,attribute.defaultValue.subarray(0,3));
				break;
			default:
				this.gl.vertexAttrib4fv(location,attribute.defaultValue.subarray(0,4));
			}
		}
	}
	,bindVertexArray: function(va) {
		var offset = 0;
		var stride = va.get_stride();
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			if(attribute.enabled) {
				this.enableVertexAttribute(attribute,stride,offset);
				offset += Math.floor(attribute.components * attribute.getElementsBytes() / 4);
			} else this.disableVertexAttribute(attribute,true);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_Shader
};
var openfl__$internal_renderer_opengl_shaders2_DefaultShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","attribute vec2 " + "aTexCoord0" + ";","attribute vec4 " + "aColor" + ";","uniform mat3 " + "uProjectionMatrix" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + "aTexCoord0" + ";","   vColor = " + "aColor" + ";","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "uSampler0" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec4 tc = texture2D(" + "uSampler0" + ", vTexCoord);","   gl_FragColor = colorTransform(tc, vColor, " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl__$internal_renderer_opengl_shaders2_DefaultShader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__name__ = true;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DefaultShader
});
var openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","attribute vec2 " + "aTexCoord0" + ";","attribute vec4 " + "aColor" + ";","uniform mat3 " + "uProjectionMatrix" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + "aTexCoord0" + ";","   vColor = " + "aColor" + ".bgra;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "uSampler0" + ";","uniform vec3 " + "uColor" + ";","uniform bool " + "uUseTexture" + ";","uniform float " + "uAlpha" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 tmp;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   if(" + "uUseTexture" + ") {","       tmp = texture2D(" + "uSampler0" + ", vTexCoord);","   } else {","       tmp = vec4(" + "uColor" + ", 1.);","   }","   gl_FragColor = colorTransform(tmp, vColor, " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__name__ = true;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uUseTexture");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader
});
var openfl__$internal_renderer_opengl_shaders2_FillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","uniform mat3 " + "uTranslationMatrix" + ";","uniform mat3 " + "uProjectionMatrix" + ";","uniform vec4 " + "uColor" + ";","uniform float " + "uAlpha" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * " + "uTranslationMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "uColor" + ", " + "uAlpha" + ", " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl__$internal_renderer_opengl_shaders2_FillShader;
openfl__$internal_renderer_opengl_shaders2_FillShader.__name__ = true;
openfl__$internal_renderer_opengl_shaders2_FillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_FillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_FillShader
});
var openfl__$internal_renderer_opengl_shaders2_PatternFillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","uniform mat3 " + "uTranslationMatrix" + ";","uniform mat3 " + "uProjectionMatrix" + ";","uniform mat3 " + "uPatternMatrix" + ";","varying vec2 vPosition;","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * " + "uTranslationMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vPosition = (" + "uPatternMatrix" + " * vec3(" + "aPosition" + ", 1)).xy;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform float " + "uAlpha" + ";","uniform vec2 " + "uPatternTL" + ";","uniform vec2 " + "uPatternBR" + ";","uniform sampler2D " + "uSampler0" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec2 vPosition;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec2 pos = mix(" + "uPatternTL" + ", " + "uPatternBR" + ", vPosition);","   vec4 tcol = texture2D(" + "uSampler0" + ", pos);","   gl_FragColor = colorTransform(tcol, " + "uAlpha" + ", " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl__$internal_renderer_opengl_shaders2_PatternFillShader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__name__ = true;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uPatternMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uPatternTL");
		this.getUniformLocation("uPatternBR");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PatternFillShader
});
var openfl__$internal_renderer_opengl_shaders2_PrimitiveShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","attribute vec4 " + "aColor" + ";","uniform mat3 " + "uTranslationMatrix" + ";","uniform mat3 " + "uProjectionMatrix" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","uniform float " + "uAlpha" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * " + "uTranslationMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "aColor" + ", " + "uAlpha" + ", " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl__$internal_renderer_opengl_shaders2_PrimitiveShader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__name__ = true;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PrimitiveShader
});
var openfl__$internal_renderer_opengl_utils_BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
	if(openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes == null) {
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes = new haxe_ds_EnumValueMap();
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.NORMAL,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.ADD,{ src : 1, dest : 1, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.MULTIPLY,{ src : 774, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.SCREEN,{ src : 1, dest : 769, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.SUBTRACT,{ src : 1, dest : 1, func : 32779});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.LAYER,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.DARKEN,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.LIGHTEN,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.ERASE,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.ALPHA,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.INVERT,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.DIFFERENCE,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.HARDLIGHT,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.OVERLAY,{ src : 1, dest : 771, func : 32774});
	}
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl__$internal_renderer_opengl_utils_BlendModeManager;
openfl__$internal_renderer_opengl_utils_BlendModeManager.__name__ = true;
openfl__$internal_renderer_opengl_utils_BlendModeManager.prototype = {
	setBlendMode: function(blendMode,force) {
		if(force == null) force = false;
		if(blendMode == null) {
			blendMode = openfl_display_BlendMode.NORMAL;
			force = true;
		}
		if(!force && this.currentBlendMode == blendMode) return false;
		this.currentBlendMode = blendMode;
		var glBlend = openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.get(this.currentBlendMode);
		this.gl.blendEquation(glBlend.func);
		this.gl.blendFunc(glBlend.src,glBlend.dest);
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_BlendModeManager
};
var openfl__$internal_renderer_opengl_utils_DrawPath = function() {
	this.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	this.points = [];
	this.winding = 0;
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	this.fill = openfl__$internal_renderer_opengl_utils_FillType.None;
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl__$internal_renderer_opengl_utils_DrawPath;
openfl__$internal_renderer_opengl_utils_DrawPath.__name__ = true;
openfl__$internal_renderer_opengl_utils_DrawPath.getStack = function(graphics,gl) {
	return openfl__$internal_renderer_opengl_utils_PathBuiler.build(graphics,gl);
};
openfl__$internal_renderer_opengl_utils_DrawPath.prototype = {
	update: function(line,fill,fillIndex,winding) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
		this.winding = winding;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color;
		if(line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
		if(line.scaleMode == null) this.line.scaleMode = openfl_display_LineScaleMode.NORMAL; else this.line.scaleMode = line.scaleMode;
		if(line.caps == null) this.line.caps = openfl_display_CapsStyle.ROUND; else this.line.caps = line.caps;
		if(line.joints == null) this.line.joints = openfl_display_JointStyle.ROUND; else this.line.joints = line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_DrawPath
};
var openfl__$internal_renderer_opengl_utils_PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl__$internal_renderer_opengl_utils_PathBuiler;
openfl__$internal_renderer_opengl_utils_PathBuiler.__name__ = true;
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__line = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.closePath = function() {
	var l = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length;
	if(l <= 0) return;
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type == openfl__$internal_renderer_opengl_utils_GraphicType.Polygon && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.fill != openfl__$internal_renderer_opengl_utils_FillType.None) {
		var sx = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[0];
		var sy = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[1];
		var ex = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 2];
		var ey = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(sx,sy);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.endFill = function() {
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
};
openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo = function(x,y) {
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var push_point = true;
	if(points.length > 1) {
		var lastX = points[points.length - 2];
		var lastY = points[points.length - 1];
		if(lastX == x && lastY == y) push_point = false;
	}
	if(push_point == true) {
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo = function(cx,cy,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	var xa = 0;
	var ya = 0;
	var n = 20;
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo = function(cx,cy,cx2,cy2,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	var n = 20;
	var dt = 0;
	var dt2 = 0;
	var dt3 = 0;
	var t2 = 0;
	var t3 = 0;
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		dt = 1 - tmp;
		dt2 = dt * dt;
		dt3 = dt2 * dt;
		t2 = tmp * tmp;
		t3 = t2 * tmp;
		px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
		py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = [];
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId] = new openfl__$internal_renderer_opengl_utils_GLStack(gl);
	if(!graphics.__visible || graphics.__commands.length == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
	} else {
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmap = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(bitmap != null) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Texture(bitmap,matrix,repeat,smooth); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 1:
				var alpha = command[3];
				var rgb = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(alpha > 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Color(rgb & 16777215,alpha); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cx2 = command[4];
				var cy = command[3];
				var cx = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo(cx,cy,cx2,cy2,x,y);
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy1 = command[3];
				var cx1 = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo(cx1,cy1,x1,y1);
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Circle;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x2,y2,radius];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x3,y3,width,height];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x4,y4,width1,height1];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				if(ry == -1) ry = rx;
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width2 / 2) rx = width2 / 2;
				if(ry > height2 / 2) ry = height2 / 2;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(true);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x5,y5,width2,height2,rx,ry];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 11:
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				break;
			case 12:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color = command[3];
				var thickness = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
				if(thickness == null || isNaN(thickness) || thickness < 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 0; else if(thickness == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = thickness;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				if(color == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = 0; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = color;
				if(alpha1 == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = alpha1;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.scaleMode = scaleMode;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.caps = caps;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.joints = joints;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.miterLimit = miterLimit;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 15:
				var y6 = command[3];
				var x6 = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(x6,y6);
				break;
			case 16:
				var y7 = command[3];
				var x7 = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x7);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y7);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 10:
				var blendMode = command[7];
				var colors = command[6];
				var culling = command[5];
				var uvtData = command[4];
				var indices = command[3];
				var vertices = command[2];
				var isColor;
				{
					var _g2 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
					switch(_g2[1]) {
					case 1:
						isColor = true;
						break;
					default:
						isColor = false;
					}
				}
				if(isColor && uvtData != null) continue;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				if(uvtData == null) {
					var this1;
					this1 = new openfl_VectorData();
					var this2;
					this2 = new Array(0);
					this1.data = this2;
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					{
						var _g21 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
						switch(_g21[1]) {
						case 2:
							var b = _g21[2];
							var _g4 = 0;
							var _g3 = vertices.length / 2 | 0;
							while(_g4 < _g3) {
								var i = _g4++;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data;
										var this3;
										this3 = new Array(uvtData.data.length + 10);
										data = this3;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data,0,uvtData.data.length);
										uvtData.data = data;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2] / b.width;
								}
								uvtData.length;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data1;
										var this4;
										this4 = new Array(uvtData.data.length + 10);
										data1 = this4;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
										uvtData.data = data1;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2 + 1] / b.height;
								}
								uvtData.length;
							}
							break;
						default:
						}
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 9:
				var count = command[6];
				var flags = command[5];
				var smooth1 = command[4];
				var tileData = command[3];
				var sheet = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles(sheet,tileData,smooth1,flags,count);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 17:
				var winding = command[4];
				var data2 = command[3];
				var commands = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				switch(winding) {
				case openfl_display_GraphicsPathWinding.EVEN_ODD:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
					break;
				case openfl_display_GraphicsPathWinding.NON_ZERO:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 1;
					break;
				default:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				}
				var command1;
				var cx3;
				var cy3;
				var cx21;
				var cy21;
				var ax;
				var ay;
				var idx = 0;
				var _g31 = 0;
				var _g22 = commands.length;
				while(_g31 < _g22) {
					var i1 = _g31++;
					command1 = commands.data[i1];
					switch(command1) {
					case 1:
						ax = data2.data[idx];
						ay = data2.data[idx + 1];
						idx += 2;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 4:
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 2:
						ax = data2.data[idx];
						ay = data2.data[idx + 1];
						idx += 2;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 5:
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 3:
						cx3 = data2.data[idx];
						cy3 = data2.data[idx + 1];
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo(cx3,cy3,ax,ay);
						break;
					case 6:
						cx3 = data2.data[idx];
						cy3 = data2.data[idx + 1];
						cx21 = data2.data[idx + 2];
						cy21 = data2.data[idx + 3];
						ax = data2.data[idx + 4];
						ay = data2.data[idx + 5];
						idx += 6;
						openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo(cx3,cy3,cx21,cy21,ax,ay);
						break;
					default:
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				break;
			case 18:
				var m = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix(m);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			default:
			}
		}
		openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
	}
	graphics.__drawPaths = openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths;
	return glStack;
};
var openfl__$internal_renderer_opengl_utils_LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = openfl_display_LineScaleMode.NORMAL;
	this.caps = openfl_display_CapsStyle.ROUND;
	this.joints = openfl_display_JointStyle.ROUND;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl__$internal_renderer_opengl_utils_LineStyle;
openfl__$internal_renderer_opengl_utils_LineStyle.__name__ = true;
openfl__$internal_renderer_opengl_utils_LineStyle.prototype = {
	__class__: openfl__$internal_renderer_opengl_utils_LineStyle
};
var openfl__$internal_renderer_opengl_utils_FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : true, __constructs__ : ["None","Color","Texture","Gradient"] };
openfl__$internal_renderer_opengl_utils_FillType.None = ["None",0];
openfl__$internal_renderer_opengl_utils_FillType.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.None.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
openfl__$internal_renderer_opengl_utils_FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Gradient = ["Gradient",3];
openfl__$internal_renderer_opengl_utils_FillType.Gradient.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.Gradient.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
var openfl__$internal_renderer_opengl_utils_FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl__$internal_renderer_opengl_utils_FilterManager;
openfl__$internal_renderer_opengl_utils_FilterManager.__name__ = true;
openfl__$internal_renderer_opengl_utils_FilterManager.prototype = {
	begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		this.width = 0;
		this.height = 0;
		this.buffer = buffer;
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		this.vertexArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		this.uvArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		this.colorArray = new Float32Array([1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,1,3,2]),gl.STATIC_DRAW);
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl__$internal_renderer_opengl_utils_FilterManager
};
var openfl__$internal_renderer_opengl_utils_FilterTexture = function(gl,width,height,smoothing) {
	if(smoothing == null) smoothing = true;
	this.gl = gl;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterTexture"] = openfl__$internal_renderer_opengl_utils_FilterTexture;
openfl__$internal_renderer_opengl_utils_FilterTexture.__name__ = true;
openfl__$internal_renderer_opengl_utils_FilterTexture.prototype = {
	clear: function() {
		this.gl.clearColor(0,0,0,0);
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
	}
	,destroy: function() {
		this.gl.deleteFramebuffer(this.frameBuffer);
		this.gl.deleteTexture(this.texture);
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) return;
		this.width = width;
		this.height = height;
		this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture);
		this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,width,height,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null);
		this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.renderBuffer);
		this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,width,height);
	}
	,__class__: openfl__$internal_renderer_opengl_utils_FilterTexture
};
var openfl__$internal_renderer_opengl_utils_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.setContext(renderSession.gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLMaskManager"] = openfl__$internal_renderer_opengl_utils_GLMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.__name__ = true;
openfl__$internal_renderer_opengl_utils_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		this.renderSession.stencilManager.pushMask(mask,this.renderSession);
	}
	,popMask: function() {
		this.renderSession.stencilManager.popMask(null,this.renderSession);
	}
	,setContext: function(gl) {
		if(this.renderSession != null) this.renderSession.gl = gl;
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLMaskManager
});
var openfl__$internal_renderer_opengl_utils_VertexAttribute = function(components,type,normalized,name,defaultValue) {
	if(normalized == null) normalized = false;
	this.enabled = true;
	this.normalized = false;
	this.components = components;
	this.type = type;
	this.normalized = normalized;
	this.name = name;
	if(defaultValue == null) this.defaultValue = new Float32Array(components); else this.defaultValue = defaultValue;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl__$internal_renderer_opengl_utils_VertexAttribute;
openfl__$internal_renderer_opengl_utils_VertexAttribute.__name__ = true;
openfl__$internal_renderer_opengl_utils_VertexAttribute.prototype = {
	copy: function() {
		return new openfl__$internal_renderer_opengl_utils_VertexAttribute(this.components,this.type,this.normalized,this.name,this.defaultValue);
	}
	,getElementsBytes: function() {
		var _g = this.type;
		switch(_g) {
		case 5120:case 5121:
			return 1;
		case 5122:case 5123:
			return 2;
		default:
			return 4;
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexAttribute
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = true;
openfl_geom_Rectangle.prototype = {
	clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new openfl_geom_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,get_left: function() {
		return this.x;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,get_top: function() {
		return this.y;
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {get_top:"get_top",get_right:"get_right",get_left:"get_left",get_bottom:"get_bottom"}
};
var openfl_geom_Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = true;
openfl_geom_Point.prototype = {
	setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,__toLimeVector2: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,__class__: openfl_geom_Point
};
var openfl__$internal_renderer_opengl_utils_GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl__$internal_renderer_opengl_utils_GraphicsRenderer;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.__name__ = true;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height;
	if(rectData.length == 3) height = width; else height = rectData[3];
	if(path.type == openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse) {
		width /= 2;
		height /= 2;
		x += width;
		y += height;
	}
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var totalSegs = 40;
	var seg = Math.PI * 2 / totalSegs;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		var _g = totalSegs + 1;
		while(_g1 < _g) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * width);
			verts.push(y + Math.cos(seg * i) * height);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		var _g11 = 0;
		var _g2 = totalSegs + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			path.points.push(x + Math.sin(seg * i1) * width);
			path.points.push(y + Math.cos(seg * i1) * height);
		}
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var bucket = null;
	if(path.points.length >= 6) {
		var points = path.points.slice();
		if(localCoords) {
			var _g1 = 0;
			var _g = points.length / 2 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
				points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			}
		}
		bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		fill.drawMode = glStack.gl.TRIANGLE_FAN;
		fill.verts = points;
		var indices = fill.indices;
		var length = points.length / 2 | 0;
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			indices.push(i1);
		}
	}
	if(path.line.width > 0) {
		if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket,localCoords);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points;
	if(points.length == 0) return;
	var line = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Line);
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
	}
	var firstPoint = new openfl_geom_Point(points[0],points[1]);
	var lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = line.verts;
	var indices = line.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var color = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb(path.line.color);
	var alpha = path.line.alpha;
	var r = color[0];
	var g = color[1];
	var b = color[2];
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g11 = 1;
	var _g2 = length - 1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		p1x = points[(i1 - 1) * 2];
		p1y = points[(i1 - 1) * 2 + 1];
		p2x = points[i1 * 2];
		p2y = points[i1 * 2 + 1];
		p3x = points[(i1 + 1) * 2];
		p3y = points[(i1 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x = perp2x / dist;
		perp2y = perp2y / dist;
		perp2x = perp2x * width;
		perp2y = perp2y * width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x = perp3x / dist;
			perp3y = perp3y / dist;
			perp3x = perp3x * width;
			perp3y = perp3y * width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			indexCount++;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!isFinite(dist)) console.log(perpx * perpx + perpy * perpy);
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g3 = 0;
	while(_g3 < indexCount) {
		var i2 = _g3++;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var rx = points[4];
	var ry = points[5];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22;
	var recPoints = [];
	recPoints.push(xe);
	recPoints.push(ye - ry);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,xe + cx2,ye,xe - rx,ye);
	recPoints.push(x + rx);
	recPoints.push(ye);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,x,ye + cy2,x,ye - ry);
	recPoints.push(x);
	recPoints.push(y + ry);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,x - cx2,y,x + rx,y);
	recPoints.push(xe - rx);
	recPoints.push(y);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,xe,y - cy2,xe,y + ry);
	recPoints.push(xe);
	recPoints.push(ye - ry);
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vecPos = verts.length / 2;
		var triangles = openfl__$internal_renderer_opengl_utils_PolyK.triangulate(recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			i++;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var blendMode = args[5];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var colorAttrib = fill.vertexArray.attributes[2];
	colorAttrib.enabled = hasColors;
	colorAttrib.defaultValue = new Float32Array([1,1,1,1]);
	fill.rawVerts = true;
	fill.glLength = indices.length;
	fill.stride = Std["int"](fill.vertexArray.get_stride() / 4);
	var vertsLength = fill.glLength * fill.stride;
	var verts;
	if(fill.glVerts == null || fill.glVerts.length < vertsLength) {
		verts = new Float32Array(vertsLength);
		fill.glVerts = verts;
	} else verts = fill.glVerts;
	var glColors = new Uint32Array(verts.buffer);
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
		switch(culling[1]) {
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
			break;
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
			break;
		default:
		}
		verts[idx++] = a * x0 + c * y0 + tx;
		verts[idx++] = b * x0 + d * y0 + ty;
		verts[idx++] = uvtData.data[v0];
		verts[idx++] = uvtData.data[v0 + 1];
		if(hasColors) glColors[idx++] = colors.data[i0];
		verts[idx++] = a * x1 + c * y1 + tx;
		verts[idx++] = b * x1 + d * y1 + ty;
		verts[idx++] = uvtData.data[v1];
		verts[idx++] = uvtData.data[v1 + 1];
		if(hasColors) glColors[idx++] = colors.data[i1];
		verts[idx++] = a * x2 + c * y2 + tx;
		verts[idx++] = b * x2 + d * y2 + ty;
		verts[idx++] = uvtData.data[v2];
		verts[idx++] = uvtData.data[v2 + 1];
		if(hasColors) glColors[idx++] = colors.data[i2];
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo = function(points,cx,cy,x,y) {
	var xa = 0;
	var ya = 0;
	var n = 20;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var spritebatch = renderSession.spriteBatch;
	var dirty = graphics.__dirty;
	if(graphics.__commands.length <= 0) return;
	if(dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,object.__graphics,renderSession.gl,object.cacheAsBitmap);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics(object,renderSession,false);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics = function(object,renderSession,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	var bucket;
	var translationMatrix;
	if(localCoords) translationMatrix = openfl_geom_Matrix.__identity; else translationMatrix = object.__worldTransform;
	var clipRect = renderSession.spriteBatch.clipRect;
	var batchDrawing = renderSession.spriteBatch.drawing;
	batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
		renderSession.blendModeManager.setBlendMode(object.__blendMode);
		if(clipRect != null) {
			gl.enable(gl.SCISSOR_TEST);
			gl.scissor(Math.floor(clipRect.x),Math.floor(clipRect.y),Math.floor(clipRect.width),Math.floor(clipRect.height));
		}
		bucket = glStack.buckets[i];
		var _g2 = bucket.mode;
		switch(_g2[1]) {
		case 1:case 2:
			renderSession.stencilManager.pushBucket(bucket,renderSession,translationMatrix.toArray(true));
			var shader = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,translationMatrix.toArray(true));
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill(bucket,shader,renderSession);
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			var shader1 = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,null);
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles(bucket,shader1,renderSession);
			break;
		case 6:
			if(!batchDrawing) renderSession.spriteBatch.begin(renderSession,clipRect);
			var args = bucket.graphicType.slice(2);
			renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4]);
			renderSession.spriteBatch.finish();
			break;
		default:
		}
		var ct = object.__worldColorTransform;
		var _g21 = 0;
		var _g3 = bucket.lines;
		while(_g21 < _g3.length) {
			var line = _g3[_g21];
			++_g21;
			if(line != null && line.verts.length > 0) {
				var shader2 = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader2);
				gl.uniformMatrix3fv(shader2.getUniformLocation("uTranslationMatrix"),false,translationMatrix.toArray(true));
				gl.uniformMatrix3fv(shader2.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
				gl.uniform1f(shader2.getUniformLocation("uAlpha"),1);
				gl.uniform4f(shader2.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
				gl.uniform4f(shader2.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
				line.vertexArray.bind();
				shader2.bindVertexArray(line.vertexArray);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		if(clipRect != null) gl.disable(gl.SCISSOR_TEST);
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession,clipRect);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics = function(object,graphics,gl,localCoords) {
	if(localCoords == null) localCoords = false;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	if(graphics.__bounds == null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle(); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	var glStack = null;
	if(graphics.__dirty) glStack = openfl__$internal_renderer_opengl_utils_DrawPath.getStack(graphics,gl);
	graphics.set___dirty(false);
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var path = graphics.__drawPaths[i];
		{
			var _g21 = path.type;
			switch(_g21[1]) {
			case 0:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
				break;
			case 1:
				var rounded = _g21[2];
				if(rounded) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle(path,glStack,localCoords);
				break;
			case 2:case 3:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle(path,glStack,localCoords);
				break;
			case 4:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
				break;
			case 5:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
				break;
			case 6:
				var m = _g21[2];
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = m;
				break;
			}
		}
		glStack.lastIndex++;
	}
	var _g3 = 0;
	var _g12 = glStack.buckets;
	while(_g3 < _g12.length) {
		var bucket = _g12[_g3];
		++_g3;
		if(bucket.uploadTileBuffer) bucket.uploadTile(Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_left()),Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_top()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_right()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_bottom()));
		bucket.optimize();
	}
	glStack.upload();
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	{
		var _g = path.fill;
		switch(_g[1]) {
		case 1:
			var a = _g[3];
			var c = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Fill);
			if(c == null) bucket.color = [1,1,1]; else bucket.color = [(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
			bucket.color[3] = a;
			bucket.uploadTileBuffer = true;
			break;
		case 2:
			var s = _g[5];
			var r = _g[4];
			var m = _g[3];
			var b = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill);
			bucket.bitmap = b;
			bucket.textureRepeat = r;
			bucket.textureSmooth = s;
			bucket.texture = b.getTexture(glStack.gl);
			bucket.uploadTileBuffer = true;
			var pMatrix;
			if(m == null) pMatrix = new openfl_geom_Matrix(); else pMatrix = new openfl_geom_Matrix(m.a,m.b,m.c,m.d,m.tx,m.ty);
			pMatrix.invert();
			pMatrix.scale(1 / b.width,1 / b.height);
			var tx = pMatrix.tx;
			var ty = pMatrix.ty;
			pMatrix.tx = 0;
			pMatrix.ty = 0;
			bucket.textureTL.x = tx;
			bucket.textureTL.y = ty;
			bucket.textureBR.x = tx + 1;
			bucket.textureBR.y = ty + 1;
			bucket.textureMatrix = pMatrix;
			break;
		default:
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Line);
			bucket.uploadTileBuffer = false;
		}
	}
	{
		var _g1 = path.type;
		switch(_g1[1]) {
		case 4:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles;
			bucket.uploadTileBuffer = false;
			break;
		case 5:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles;
			bucket.uploadTileBuffer = false;
			break;
		default:
		}
	}
	bucket.graphicType = path.type;
	bucket.overrideMatrix = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.pop();
	if(b == null) b = new openfl__$internal_renderer_opengl_utils_GLBucket(glStack.gl);
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket = null;
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.fillIndex == fillIndex) {
			bucket = b;
			break;
		}
	}
	if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket(glStack,mode);
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader = function(bucket,renderSession,object,translationMatrix) {
	var gl = renderSession.gl;
	var shader = null;
	var _g = bucket.mode;
	switch(_g[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) return null;
	var newShader = renderSession.shaderManager.setShader(shader);
	gl.uniform1f(shader.getUniformLocation("uAlpha"),object.__worldAlpha);
	gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
	var ct = object.__worldColorTransform;
	gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
	gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
	var _g1 = bucket.mode;
	switch(_g1[1]) {
	case 1:
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform4fv(shader.getUniformLocation("uColor"),new Float32Array(bucket.color));
		break;
	case 2:
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform2f(shader.getUniformLocation("uPatternTL"),bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.getUniformLocation("uPatternBR"),bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("uPatternMatrix"),false,bucket.textureMatrix.toArray(true));
		break;
	case 5:
		if(bucket.texture != null) gl.uniform1i(shader.getUniformLocation("uUseTexture"),1); else {
			gl.uniform1i(shader.getUniformLocation("uUseTexture"),0);
			gl.uniform4fv(shader.getUniformLocation("uColor"),new Float32Array(bucket.color));
		}
		break;
	default:
	}
	return shader;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill && bucket.texture != null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.getAttribLocation("aPosition"),4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.fills;
	while(_g < _g1.length) {
		var fill = _g1[_g];
		++_g;
		if(fill.available) continue;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		gl.drawArrays(gl.TRIANGLES,fill.glStart,fill.glLength);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.__image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) return [1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
};
var openfl__$internal_renderer_opengl_utils_GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl__$internal_renderer_opengl_utils_GLStack;
openfl__$internal_renderer_opengl_utils_GLStack.__name__ = true;
openfl__$internal_renderer_opengl_utils_GLStack.prototype = {
	reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) bucket.upload();
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLStack
};
var openfl__$internal_renderer_opengl_utils_GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.lines = [];
	this.fills = [];
	this.fillIndex = -1;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl__$internal_renderer_opengl_utils_BucketMode.Fill;
	this.textureMatrix = new openfl_geom_Matrix();
	this.textureTL = new openfl_geom_Point();
	this.textureBR = new openfl_geom_Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl__$internal_renderer_opengl_utils_GLBucket;
openfl__$internal_renderer_opengl_utils_GLBucket.__name__ = true;
openfl__$internal_renderer_opengl_utils_GLBucket.prototype = {
	getData: function(type) {
		var data;
		switch(type[1]) {
		case 1:
			data = this.fills;
			break;
		default:
			data = this.lines;
		}
		var result = null;
		var remove = false;
		var _g = 0;
		while(_g < data.length) {
			var d = data[_g];
			++_g;
			if(d.available) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) result = new openfl__$internal_renderer_opengl_utils_GLBucketData(this.gl);
		result.available = false;
		result.parent = this;
		result.type = type;
		if(remove) HxOverrides.remove(data,result);
		data.push(result);
		switch(type[1]) {
		case 1:
			var _g1 = this.mode;
			switch(_g1[1]) {
			case 1:case 2:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes;
				break;
			case 5:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes.slice();
				result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
				break;
			default:
			}
			break;
		case 0:
			result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes;
			break;
		}
		return result;
	}
	,optimize: function() {
		var _g = this;
		var data = this.lines;
		if(data.length > 1) {
			var result = [];
			var tmp = null;
			var last = null;
			var idx = 0;
			var vi = 0;
			var ii = 0;
			var before = data.length;
			var _g1 = 0;
			while(_g1 < data.length) {
				var d = data[_g1];
				++_g1;
				if(d.available || d.rawVerts || d.rawIndices) {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
				if(last == null || last.drawMode == d.drawMode) {
					if(tmp == null) tmp = d; else {
						vi = tmp.verts.length;
						ii = tmp.indices.length;
						var _g2 = 0;
						var _g11 = d.verts.length;
						while(_g2 < _g11) {
							var j = _g2++;
							tmp.verts[j + vi] = d.verts[j];
						}
						var _g21 = 0;
						var _g12 = d.indices.length;
						while(_g21 < _g12) {
							var j1 = _g21++;
							tmp.indices[j1 + ii] = d.indices[j1] + idx;
						}
					}
					idx = tmp.indices[tmp.indices.length - 1] + 1;
					last = d;
				} else {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
			}
			if(result.length == 0 && tmp != null) result.push(tmp);
			if(result.length > 0) switch(openfl__$internal_renderer_opengl_utils_BucketDataType.Line[1]) {
			case 1:
				_g.fills = result;
				break;
			default:
				_g.lines = result;
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			fill.reset();
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			line.reset();
		}
		this.fillIndex = -1;
		this.uploadTileBuffer = true;
		this.graphicType = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	}
	,uploadTile: function(x,y,w,h) {
		if(this.tileBuffer == null) this.tileBuffer = this.gl.createBuffer();
		this.tile = [x,y,0,0,w,y,1,0,x,h,0,1,w,h,1,1];
		this.glTile = new Int16Array(this.tile);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
	}
	,upload: function() {
		if(this.mode != openfl__$internal_renderer_opengl_utils_BucketMode.Line) {
			var _g = 0;
			var _g1 = this.fills;
			while(_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				if(!fill.available) fill.upload();
			}
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			if(!line.available) line.upload();
		}
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucket
};
var openfl__$internal_renderer_opengl_utils_GLBucketData = function(gl) {
	this.available = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.indices = [];
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray([]);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl__$internal_renderer_opengl_utils_GLBucketData;
openfl__$internal_renderer_opengl_utils_GLBucketData.__name__ = true;
openfl__$internal_renderer_opengl_utils_GLBucketData.prototype = {
	reset: function() {
		this.available = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
		this.drawMode = this.gl.TRIANGLE_STRIP;
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) this.glVerts = new Float32Array(this.verts);
			this.vertexArray.buffer = this.glVerts.buffer;
			if(this.glVerts.length <= this.lastVertsSize) {
				this.vertexArray.bind();
				var end = this.glLength * 4 * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					var view = this.glVerts.subarray(0,end);
					this.vertexArray.upload(view);
				} else this.vertexArray.upload(this.glVerts);
			} else {
				this.vertexArray.setContext(this.gl,this.glVerts);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(this.indexBuffer == null) this.indexBuffer = this.gl.createBuffer();
			if(!this.rawIndices) this.glIndices = new Uint16Array(this.indices);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucketData
};
var openfl__$internal_renderer_opengl_utils_BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : true, __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl__$internal_renderer_opengl_utils_BucketMode.None = ["None",0];
openfl__$internal_renderer_opengl_utils_BucketMode.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.None.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill = ["PatternFill",2];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Line = ["Line",3];
openfl__$internal_renderer_opengl_utils_BucketMode.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine = ["PatternLine",4];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles = ["DrawTiles",6];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
var openfl__$internal_renderer_opengl_utils_BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = { __ename__ : true, __constructs__ : ["Line","Fill"] };
openfl__$internal_renderer_opengl_utils_BucketDataType.Line = ["Line",0];
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
var openfl__$internal_renderer_opengl_utils_GLGraphicsData = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl__$internal_renderer_opengl_utils_GLGraphicsData;
openfl__$internal_renderer_opengl_utils_GLGraphicsData.__name__ = true;
var openfl__$internal_renderer_opengl_utils_PolyK = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PolyK"] = openfl__$internal_renderer_opengl_utils_PolyK;
openfl__$internal_renderer_opengl_utils_PolyK.__name__ = true;
openfl__$internal_renderer_opengl_utils_PolyK.triangulate = function(p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) return [];
	var tgs = [];
	var avl;
	var _g = [];
	var _g1 = 0;
	while(_g1 < n) {
		var i1 = _g1++;
		_g.push(i1);
	}
	avl = _g;
	var i = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i % al];
		var i11 = avl[(i + 1) % al];
		var i2 = avl[(i + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i11];
		var by = p[2 * i11 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl__$internal_renderer_opengl_utils_PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g11 = 0;
			while(_g11 < al) {
				var j = _g11++;
				var vi = avl[j];
				if(vi == i0 || vi == i11 || vi == i2) continue;
				if(openfl__$internal_renderer_opengl_utils_PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i + 1) % al,1);
			al--;
			i = 0;
		} else if(i++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g12 = [];
				var _g2 = 0;
				while(_g2 < n) {
					var k = _g2++;
					_g12.push(k);
				}
				avl = _g12;
				i = 0;
				al = n;
				sign = false;
			} else {
				console.log("Warning: shape too complex to fill");
				return [];
			}
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl__$internal_renderer_opengl_utils_PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return u >= 0 && v >= 0 && u + v < 1;
};
openfl__$internal_renderer_opengl_utils_PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
var openfl__$internal_renderer_opengl_utils_GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : true, __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles","OverrideMatrix"] };
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon = ["Polygon",0];
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.Circle = ["Circle",2];
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse = ["Ellipse",3];
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",6,matrix]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
var openfl__$internal_renderer_opengl_utils_ShaderManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl__$internal_renderer_opengl_utils_ShaderManager;
openfl__$internal_renderer_opengl_utils_ShaderManager.__name__ = true;
openfl__$internal_renderer_opengl_utils_ShaderManager.prototype = {
	setContext: function(gl) {
		this.gl = gl;
		this.defaultShader = new openfl__$internal_renderer_opengl_shaders2_DefaultShader(gl);
		this.fillShader = new openfl__$internal_renderer_opengl_shaders2_FillShader(gl);
		this.patternFillShader = new openfl__$internal_renderer_opengl_shaders2_PatternFillShader(gl);
		this.drawTrianglesShader = new openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader(gl);
		this.primitiveShader = new openfl__$internal_renderer_opengl_shaders2_PrimitiveShader(gl);
		this.setShader(this.defaultShader,true);
	}
	,setShader: function(shader,force) {
		if(force == null) force = false;
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return true;
		}
		if(this.currentShader != null && !force && this.currentShader.ID == shader.ID) return false;
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_ShaderManager
};
var openfl__$internal_renderer_opengl_utils_SpriteBatch = function(gl,maxSprites) {
	if(maxSprites == null) maxSprites = 2000;
	this.lastEnableColor = true;
	this.enableColor = true;
	this.attributes = [];
	this.writtenVertexBytes = 0;
	this.drawing = false;
	this.dirty = true;
	this.states = [];
	this.maxSprites = maxSprites;
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aTexCoord0"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"aColor"));
	this.attributes[2].defaultValue = new Float32Array([1,1,1,1]);
	this.maxElementsPerVertex = 0;
	var _g = 0;
	var _g1 = this.attributes;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		this.maxElementsPerVertex += Math.floor(a.components * a.getElementsBytes() / 4);
	}
	this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
	this.indexArraySize = maxSprites * 6;
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray(this.attributes,this.vertexArraySize,false);
	this.positions = new Float32Array(this.vertexArray.buffer);
	this.colors = new Uint32Array(this.vertexArray.buffer);
	this.indices = new Uint16Array(this.indexArraySize);
	var i = 0;
	var j = 0;
	while(i < this.indexArraySize) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.currentState = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
	this.dirty = true;
	this.drawing = false;
	this.batchedSprites = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl__$internal_renderer_opengl_utils_SpriteBatch;
openfl__$internal_renderer_opengl_utils_SpriteBatch.__name__ = true;
openfl__$internal_renderer_opengl_utils_SpriteBatch.prototype = {
	begin: function(renderSession,clipRect) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start(clipRect);
	}
	,finish: function() {
		this.stop();
		this.clipRect = null;
		this.drawing = false;
	}
	,start: function(clipRect) {
		if(!this.drawing) throw new js__$Boot_HaxeError("Call Spritebatch.begin() before start()");
		this.dirty = true;
		this.clipRect = clipRect;
	}
	,stop: function() {
		this.flush();
	}
	,renderBitmapData: function(bitmapData,smoothing,matrix,ct,alpha,blendMode,pixelSnapping,bgra) {
		if(bgra == null) bgra = false;
		if(alpha == null) alpha = 1;
		if(bitmapData == null) return;
		var texture = bitmapData.getTexture(this.gl);
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var uvs = bitmapData.__uvData;
		if(uvs == null) return;
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,bitmapData.width,bitmapData.height,matrix,uvs,null,color,pixelSnapping);
		this.setState(this.batchedSprites,texture,smoothing,blendMode,ct,true);
		this.batchedSprites++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) return;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var blendMode;
		var _g = flags & 983040;
		switch(_g) {
		case 65536:
			blendMode = openfl_display_BlendMode.ADD;
			break;
		case 131072:
			blendMode = openfl_display_BlendMode.MULTIPLY;
			break;
		case 262144:
			blendMode = openfl_display_BlendMode.SCREEN;
			break;
		case 524288:
			blendMode = openfl_display_BlendMode.SUBTRACT;
			break;
		default:
			blendMode = openfl_display_BlendMode.NORMAL;
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) totalCount = count;
		var itemCount = totalCount / numValues | 0;
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var color = -1;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		var matrix = new openfl_geom_Matrix();
		var oMatrix = object.__worldTransform;
		var uvs = new openfl_display_TextureUvs();
		var bIndex = 0;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		while(iIndex < totalCount) {
			if(this.batchedSprites >= this.maxSprites) this.flush();
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else {
					center.x = 0;
					center.y = 0;
				}
				tileUV.setTo(rect.get_left() / sheet.__bitmap.width,rect.get_top() / sheet.__bitmap.height,rect.get_right() / sheet.__bitmap.width,rect.get_bottom() / sheet.__bitmap.height);
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				a = 1;
				b = 0;
				c = 0;
				d = 1;
				tx = 0;
				ty = 0;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				matrix.identity();
				if(useAlpha) alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha; else alpha = object.__worldAlpha;
				if(useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				if(useScale) scale = tileData[iIndex + scaleIndex];
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				matrix.a = a * oMatrix.a + b * oMatrix.c;
				matrix.b = a * oMatrix.b + b * oMatrix.d;
				matrix.c = c * oMatrix.a + d * oMatrix.c;
				matrix.d = c * oMatrix.b + d * oMatrix.d;
				matrix.tx = tx * oMatrix.a + ty * oMatrix.c + oMatrix.tx;
				matrix.ty = tx * oMatrix.b + ty * oMatrix.d + oMatrix.ty;
				uvs.x0 = tileUV.x;
				uvs.y0 = tileUV.y;
				uvs.x1 = tileUV.width;
				uvs.y1 = tileUV.y;
				uvs.x2 = tileUV.width;
				uvs.y2 = tileUV.height;
				uvs.x3 = tileUV.x;
				uvs.y3 = tileUV.height;
				bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
				color = ((alpha * 255 | 0) & 255) << 24 | (tint & 255) << 16 | (tint >> 8 & 255) << 8 | tint >> 16 & 255;
				this.fillVertices(bIndex,rect.width,rect.height,matrix,uvs,null,color,openfl_display_PixelSnapping.NEVER);
				this.setState(this.batchedSprites,texture,smooth,blendMode,object.__worldColorTransform,false);
				this.batchedSprites++;
			}
			iIndex += numValues;
		}
	}
	,fillVertices: function(index,width,height,matrix,uvs,pivot,color,pixelSnapping) {
		if(color == null) color = -1;
		var w0;
		var w1;
		var h0;
		var h1;
		if(pivot == null) {
			w0 = width;
			w1 = 0;
			h0 = height;
			h1 = 0;
		} else {
			w0 = width * (1 - pivot.x);
			w1 = width * -pivot.x;
			h0 = height * (1 - pivot.y);
			h1 = height * -pivot.y;
		}
		if(pixelSnapping == null) pixelSnapping = openfl_display_PixelSnapping.NEVER;
		var snap = pixelSnapping != openfl_display_PixelSnapping.NEVER;
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		var cOffsetIndex = 0;
		if(!snap) {
			this.positions[index++] = a * w1 + c * h1 + tx;
			this.positions[index++] = d * h1 + b * w1 + ty;
		} else {
			this.positions[index++] = Math.round(a * w1 + c * h1 + tx);
			this.positions[index++] = Math.round(d * h1 + b * w1 + ty);
		}
		this.positions[index++] = uvs.x0;
		this.positions[index++] = uvs.y0;
		if(this.enableColor) this.colors[index++] = color;
		if(!snap) {
			this.positions[index++] = a * w0 + c * h1 + tx;
			this.positions[index++] = d * h1 + b * w0 + ty;
		} else {
			this.positions[index++] = Math.round(a * w0 + c * h1 + tx);
			this.positions[index++] = Math.round(d * h1 + b * w0 + ty);
		}
		this.positions[index++] = uvs.x1;
		this.positions[index++] = uvs.y1;
		if(this.enableColor) this.colors[index++] = color;
		if(!snap) {
			this.positions[index++] = a * w0 + c * h0 + tx;
			this.positions[index++] = d * h0 + b * w0 + ty;
		} else {
			this.positions[index++] = Math.round(a * w0 + c * h0 + tx);
			this.positions[index++] = Math.round(d * h0 + b * w0 + ty);
		}
		this.positions[index++] = uvs.x2;
		this.positions[index++] = uvs.y2;
		if(this.enableColor) this.colors[index++] = color;
		if(!snap) {
			this.positions[index++] = a * w1 + c * h0 + tx;
			this.positions[index++] = d * h0 + b * w1 + ty;
		} else {
			this.positions[index++] = Math.round(a * w1 + c * h0 + tx);
			this.positions[index++] = Math.round(d * h0 + b * w1 + ty);
		}
		this.positions[index++] = uvs.x3;
		this.positions[index++] = uvs.y3;
		if(this.enableColor) this.colors[index++] = color;
		this.writtenVertexBytes = index;
	}
	,flush: function() {
		if(this.batchedSprites == 0) return;
		if(this.clipRect != null) {
			this.gl.enable(this.gl.SCISSOR_TEST);
			this.gl.scissor(Math.floor(this.clipRect.x),Math.floor(this.clipRect.y),Math.floor(this.clipRect.width),Math.floor(this.clipRect.height));
		}
		if(this.dirty) {
			this.dirty = false;
			this.gl.activeTexture(this.gl.TEXTURE0);
			this.vertexArray.bind();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		}
		if(this.writtenVertexBytes > this.vertexArraySize * 0.5) this.vertexArray.upload(this.positions); else {
			var view = this.positions.subarray(0,this.writtenVertexBytes);
			this.vertexArray.upload(view);
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.shader = this.renderSession.shaderManager.defaultShader;
		this.currentState.texture = null;
		this.currentState.textureSmooth = false;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		this.currentState.colorTransform = null;
		this.currentState.skipColorTransformAlpha = false;
		var _g1 = 0;
		var _g = this.batchedSprites;
		while(_g1 < _g) {
			var i = _g1++;
			nextState = this.states[i];
			this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
			if(!nextState.equals(this.currentState)) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.shader = nextState.shader;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.currentState.colorTransform = nextState.colorTransform;
			}
			batchSize++;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.batchedSprites = 0;
		this.writtenVertexBytes = 0;
		if(this.clipRect != null) this.gl.disable(this.gl.SCISSOR_TEST);
	}
	,renderBatch: function(state,size,start) {
		if(size == 0 || state.texture == null) return;
		var shader;
		if(state.shader == null) shader = this.renderSession.shaderManager.defaultShader; else shader = state.shader;
		this.renderSession.shaderManager.setShader(shader);
		shader.bindVertexArray(this.vertexArray);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,this.renderSession.projectionMatrix.toArray(true));
		if(state.colorTransform != null) {
			var ct = state.colorTransform;
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,state.skipColorTransformAlpha?1:ct.alphaMultiplier);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255.,ct.greenOffset / 255.,ct.blueOffset / 255.,ct.alphaOffset / 255.);
		} else {
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),1,1,1,1);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),0,0,0,0);
		}
		this.renderSession.blendModeManager.setBlendMode(state.blendMode);
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		if(state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,start * 6 * 2);
		this.renderSession.drawCount++;
	}
	,setState: function(index,texture,smooth,blendMode,colorTransform,skipAlpha) {
		if(skipAlpha == null) skipAlpha = false;
		if(smooth == null) smooth = false;
		var state = this.states[index];
		if(state == null) state = this.states[index] = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
		state.colorTransform = colorTransform;
		state.skipColorTransformAlpha = skipAlpha;
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexArray.setContext(gl,this.positions);
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
	}
	,getElementsPerVertex: function() {
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) r += Math.floor(a.components * a.getElementsBytes() / 4);
		}
		return r;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_SpriteBatch
};
var openfl__$internal_renderer_opengl_utils__$SpriteBatch_State = function() {
	this.skipColorTransformAlpha = false;
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl__$internal_renderer_opengl_utils__$SpriteBatch_State;
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.__name__ = true;
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.prototype = {
	equals: function(other) {
		return (this.shader == null || other.shader == null || this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode && (this.colorTransform != null && this.colorTransform.__equals(other.colorTransform,this.skipColorTransformAlpha));
	}
	,__class__: openfl__$internal_renderer_opengl_utils__$SpriteBatch_State
};
var openfl__$internal_renderer_opengl_utils_StencilManager = function(gl) {
	this.stencilMask = 0;
	this.stencilStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl__$internal_renderer_opengl_utils_StencilManager;
openfl__$internal_renderer_opengl_utils_StencilManager.__name__ = true;
openfl__$internal_renderer_opengl_utils_StencilManager.prototype = {
	prepareGraphics: function(fill,renderSession,translationMatrix) {
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,fill.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,translationMatrix,isMask) {
		if(isMask == null) isMask = false;
		if(!isMask) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
			this.gl.colorMask(false,false,false,false);
			this.gl.stencilFunc(this.gl.NEVER,1,255);
			this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		var _g = 0;
		var _g1 = bucket.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			if(fill.available) continue;
			this.prepareGraphics(fill,renderSession,translationMatrix);
			this.gl.drawElements(fill.drawMode,fill.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		if(!isMask) {
			this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL,255,255);
		}
	}
	,popBucket: function(object,bucket,renderSession) {
		this.gl.disable(this.gl.STENCIL_TEST);
	}
	,pushMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.length <= 0) return;
		if(this.stencilMask == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.stencilMask++;
		if(maskGraphics.__dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,maskGraphics,renderSession.gl);
		var func;
		if(this.stencilMask == 1) func = this.gl.NEVER; else func = this.gl.EQUAL;
		var ref = this.stencilMask;
		var mask = 255 - this.stencilMask;
		this.gl.stencilMask(255);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(func,ref,mask);
		this.gl.stencilOp(this.gl.REPLACE,this.gl.KEEP,this.gl.KEEP);
		var glStack = maskGraphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
		var bucket;
		var translationMatrix = object.__worldTransform;
		var _g1 = 0;
		var _g = glStack.buckets.length;
		while(_g1 < _g) {
			var i = _g1++;
			bucket = glStack.buckets[i];
			if(bucket.overrideMatrix != null) translationMatrix = bucket.overrideMatrix; else translationMatrix = object.__worldTransform;
			var _g2 = bucket.mode;
			switch(_g2[1]) {
			case 1:case 2:
				this.pushBucket(bucket,renderSession,translationMatrix.toArray(true),true);
				break;
			default:
			}
		}
		this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilMask,255);
	}
	,popMask: function(object,renderSession) {
		this.stencilMask--;
		if(this.stencilMask <= 0) {
			this.gl.disable(this.gl.STENCIL_TEST);
			this.stencilMask = 0;
		}
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_StencilManager
};
var openfl__$internal_renderer_opengl_utils_VertexArray = function(attributes,size,isStatic) {
	if(isStatic == null) isStatic = false;
	if(size == null) size = 0;
	this.isStatic = false;
	this.size = 0;
	this.attributes = [];
	this.size = size;
	this.attributes = attributes;
	if(size > 0) this.buffer = new ArrayBuffer(size);
	this.isStatic = isStatic;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl__$internal_renderer_opengl_utils_VertexArray;
openfl__$internal_renderer_opengl_utils_VertexArray.__name__ = true;
openfl__$internal_renderer_opengl_utils_VertexArray.prototype = {
	bind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.glBuffer);
	}
	,upload: function(view) {
		this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
	}
	,setContext: function(gl,view) {
		this.gl = gl;
		this.glBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.glBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,view,this.isStatic?gl.STATIC_DRAW:gl.DYNAMIC_DRAW);
	}
	,get_stride: function() {
		var s = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) s += Math.floor(a.components * a.getElementsBytes() / 4) * 4;
		}
		return s;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexArray
	,__properties__: {get_stride:"get_stride"}
};
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl_display_DisplayObjectContainer.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = openfl_display_PixelSnapping.AUTO;
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = true;
openfl_display_Bitmap.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = new openfl_geom_Rectangle(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds = bounds.transform(matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.bitmapData == null) return false;
		var point = this.globalToLocal(new openfl_geom_Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.bitmapData.width && point.y <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoBitmap.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasBitmap.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.__image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid) null; else renderSession.spriteBatch.renderBitmapData(this.bitmapData,this.smoothing,this.__worldTransform,this.__worldColorTransform,this.__worldAlpha,this.__blendMode,this.pixelSnapping);
	}
	,__updateMask: function(maskGraphics) {
		maskGraphics.__commands.push(openfl_display_DrawCommand.OverrideMatrix(this.__worldTransform));
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObjectContainer.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.__usingFramebuffer = false;
	this.transparent = transparent;
	if(width == null) width = 0; else width = width;
	if(height == null) height = 0; else height = height;
	if(width < 0) width = 0; else width = width;
	if(height < 0) height = 0; else height = height;
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		fillColor = fillColor << 8 | fillColor >> 24 & 255;
		this.__image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.__image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = true;
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.__supportsBGRA = null;
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.prototype = {
	copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.__isValid || sourceBitmapData == null) return;
		this.__image.copyPixels(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.__image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
		this.__usingFramebuffer = false;
	}
	,dispose: function() {
		this.__image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		if(this.__texture != null) {
			var renderer = openfl_Lib.current.stage.__renderer;
			if(renderer != null) {
				var renderSession = renderer.renderSession;
				var gl = renderSession.gl;
				if(gl != null) gl.deleteTexture(this.__texture);
			}
		}
		if(this.__framebuffer != null) this.__framebuffer.destroy();
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(!this.__isValid) return;
		var _g = this.__image.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.__image);
			lime_graphics_utils_ImageCanvasUtil.sync(this.__image);
			var buffer = this.__image.buffer;
			var renderSession = new openfl__$internal_renderer_RenderSession();
			renderSession.context = buffer.__srcContext;
			renderSession.roundPixels = true;
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.webkitImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			var matrixCache = source.__worldTransform;
			if(matrix != null) source.__worldTransform = matrix; else source.__worldTransform = new openfl_geom_Matrix();
			source.__updateChildren(false);
			source.__renderCanvas(renderSession);
			source.__worldTransform = matrixCache;
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.webkitImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			break;
		case 1:
			var renderSession1 = openfl_Lib.current.stage.__renderer.renderSession;
			this.__drawGL(renderSession1,this.width,this.height,source,matrix,colorTransform,blendMode,clipRect,smoothing,!this.__usingFramebuffer,false,true);
			break;
		default:
		}
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) return;
		this.__image.fillRect(rect.__toLimeRectangle(),color,1);
		this.__usingFramebuffer = false;
	}
	,getSurface: function(clone) {
		if(clone == null) clone = true;
		if(!this.__isValid) return null;
		if(this.__surface == null) this.__image.dirty = true;
		if(this.__image != null && this.__image.dirty) {
			if(this.__surface != null) lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.destroy(this.__surface);
			if(clone) this.__surfaceImage = this.__image.clone(); else this.__surfaceImage = this.__image;
			this.__surfaceImage.set_format(2);
			this.__surfaceImage.set_premultiplied(true);
			this.__surface = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.fromImage(this.__surfaceImage);
			this.__image.dirty = false;
		}
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) return null;
		if(this.__usingFramebuffer && this.__framebuffer != null) return this.__framebuffer.texture;
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__image.dirty = true;
		}
		if(this.__image != null && this.__image.dirty) {
			var internalFormat;
			if(this.__image.buffer.bitsPerPixel == 1) internalFormat = gl.ALPHA; else internalFormat = gl.RGBA;
			var format = internalFormat;
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.__image;
			if(this.__bgra) {
				if(openfl_display_BitmapData.__supportsBGRA == null) openfl_display_BitmapData.__supportsBGRA = Lambda.has(gl.getSupportedExtensions(),"GL_EXT_bgra");
				textureImage = new lime_graphics_Image(null,0,0,this.__image.width,this.__image.height);
				var rect = new lime_math_Rectangle(0,0,this.__image.width,this.__image.height);
				var point = new lime_math_Vector2(0,0);
				textureImage.copyChannel(this.__image,rect,point,lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.BLUE);
				textureImage.copyChannel(this.__image,rect,point,lime_graphics_ImageChannel.GREEN,lime_graphics_ImageChannel.GREEN);
				textureImage.copyChannel(this.__image,rect,point,lime_graphics_ImageChannel.BLUE,lime_graphics_ImageChannel.RED);
				textureImage.copyChannel(this.__image,rect,point,lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
			}
			if(!textureImage.get_premultiplied() && textureImage.get_transparent()) {
				textureImage = textureImage.clone();
				textureImage.set_premultiplied(true);
			}
			gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,this.width,this.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.__image.dirty = false;
		}
		return this.__texture;
	}
	,__createUVs: function() {
		if(this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
		this.__uvData.x0 = 0;
		this.__uvData.y0 = 0;
		this.__uvData.x1 = 1;
		this.__uvData.y1 = 0;
		this.__uvData.x2 = 1;
		this.__uvData.y2 = 1;
		this.__uvData.x3 = 0;
		this.__uvData.y3 = 1;
	}
	,__drawGL: function(renderSession,width,height,source,matrix,colorTransform,blendMode,clipRect,smoothing,drawSelf,clearBuffer,readPixels) {
		if(readPixels == null) readPixels = false;
		if(clearBuffer == null) clearBuffer = false;
		if(drawSelf == null) drawSelf = false;
		if(smoothing == null) smoothing = false;
		var renderer = openfl_Lib.current.stage.__renderer;
		if(renderer == null) return;
		var renderSession1 = renderer.renderSession;
		var gl = renderSession1.gl;
		if(gl == null) return;
		var spritebatch = renderSession1.spriteBatch;
		var renderTransparent = renderSession1.renderer.transparent;
		var tmpRect;
		if(clipRect == null) tmpRect = new openfl_geom_Rectangle(0,0,width,height); else tmpRect = clipRect.clone();
		renderSession1.renderer.transparent = this.transparent;
		if(this.__framebuffer == null) this.__framebuffer = new openfl__$internal_renderer_opengl_utils_FilterTexture(gl,width,height,smoothing);
		this.__framebuffer.resize(width,height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer.frameBuffer);
		renderer.setViewport(0,0,width,height);
		spritebatch.begin(renderSession1,drawSelf?null:tmpRect);
		gl.colorMask(true,true,true,true);
		renderSession1.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
		renderSession1.shaderManager.setShader(renderSession1.shaderManager.defaultShader,true);
		if(clearBuffer || drawSelf) this.__framebuffer.clear();
		if(drawSelf) {
			this.__worldTransform.identity();
			this.__flipMatrix(this.__worldTransform);
			this.__renderGL(renderSession1);
			spritebatch.stop();
			gl.deleteTexture(this.__texture);
			spritebatch.start(tmpRect);
		}
		var ctCache = source.__worldColorTransform;
		var matrixCache = source.__worldTransform;
		var blendModeCache = source.__blendMode;
		var cached = source.__cacheAsBitmap;
		var m;
		if(matrix != null) m = new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty); else m = new openfl_geom_Matrix();
		this.__flipMatrix(m);
		source.__worldTransform = m;
		if(colorTransform != null) source.__worldColorTransform = colorTransform; else source.__worldColorTransform = new openfl_geom_ColorTransform();
		source.__blendMode = blendMode;
		source.__cacheAsBitmap = false;
		source.__updateChildren(false);
		source.__renderGL(renderSession1);
		source.__worldColorTransform = ctCache;
		source.__worldTransform = matrixCache;
		source.__blendMode = blendModeCache;
		source.__cacheAsBitmap = cached;
		source.__updateChildren(true);
		spritebatch.finish();
		if(readPixels) {
			if(this.__image.width != width || this.__image.height != height) this.__image.resize(width,height);
			gl.readPixels(0,0,width,height,gl.RGBA,gl.UNSIGNED_BYTE,this.__image.buffer.data);
		}
		gl.bindFramebuffer(gl.FRAMEBUFFER,renderSession1.defaultFramebuffer);
		renderer.setViewport(0,0,renderSession1.renderer.width,renderSession1.renderer.height);
		renderSession1.renderer.transparent = renderTransparent;
		gl.colorMask(true,true,true,renderSession1.renderer.transparent);
		this.__usingFramebuffer = true;
		if(this.__image != null) {
			this.__image.dirty = false;
			this.__image.set_premultiplied(true);
		}
		this.__createUVs();
		this.__isValid = true;
	}
	,__flipMatrix: function(m) {
		var tx = m.tx;
		var ty = m.ty;
		m.tx = 0;
		m.ty = 0;
		m.scale(1,-1);
		m.translate(0,this.height);
		m.tx += tx;
		m.ty -= ty;
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		lime_graphics_Image.fromBytes(bytes,function(image) {
			_g.__fromImage(image);
			if(rawAlpha != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(_g.__image);
				lime_graphics_utils_ImageCanvasUtil.createImageData(_g.__image);
				var data = _g.__image.buffer.data;
				var _g2 = 0;
				var _g1 = rawAlpha.length;
				while(_g2 < _g1) {
					var i = _g2++;
					data[i * 4 + 3] = rawAlpha.readUnsignedByte();
				}
				_g.__image.dirty = true;
			}
			if(onload != null) onload(_g);
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__fromImage: function(image) {
		this.__image = image;
		this.width = image.width;
		this.height = image.height;
		this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
		this.__isValid = true;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.sync(this.__image);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.__image.buffer.get_src(),0,0);
	}
	,__renderGL: function(renderSession) {
		renderSession.spriteBatch.renderBitmapData(this,false,this.__worldTransform,this.__worldColorTransform,this.__worldColorTransform.alphaMultiplier,this.__blendMode);
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.__image);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display_TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl_display_TextureUvs;
openfl_display_TextureUvs.__name__ = true;
openfl_display_TextureUvs.prototype = {
	__class__: openfl_display_TextureUvs
};
var openfl_display_BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : true, __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SUBTRACT"] };
openfl_display_BlendMode.ADD = ["ADD",0];
openfl_display_BlendMode.ADD.toString = $estr;
openfl_display_BlendMode.ADD.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ALPHA = ["ALPHA",1];
openfl_display_BlendMode.ALPHA.toString = $estr;
openfl_display_BlendMode.ALPHA.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DARKEN = ["DARKEN",2];
openfl_display_BlendMode.DARKEN.toString = $estr;
openfl_display_BlendMode.DARKEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl_display_BlendMode.DIFFERENCE.toString = $estr;
openfl_display_BlendMode.DIFFERENCE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ERASE = ["ERASE",4];
openfl_display_BlendMode.ERASE.toString = $estr;
openfl_display_BlendMode.ERASE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl_display_BlendMode.HARDLIGHT.toString = $estr;
openfl_display_BlendMode.HARDLIGHT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.INVERT = ["INVERT",6];
openfl_display_BlendMode.INVERT.toString = $estr;
openfl_display_BlendMode.INVERT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LAYER = ["LAYER",7];
openfl_display_BlendMode.LAYER.toString = $estr;
openfl_display_BlendMode.LAYER.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl_display_BlendMode.LIGHTEN.toString = $estr;
openfl_display_BlendMode.LIGHTEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl_display_BlendMode.MULTIPLY.toString = $estr;
openfl_display_BlendMode.MULTIPLY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.NORMAL = ["NORMAL",10];
openfl_display_BlendMode.NORMAL.toString = $estr;
openfl_display_BlendMode.NORMAL.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.OVERLAY = ["OVERLAY",11];
openfl_display_BlendMode.OVERLAY.toString = $estr;
openfl_display_BlendMode.OVERLAY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SCREEN = ["SCREEN",12];
openfl_display_BlendMode.SCREEN.toString = $estr;
openfl_display_BlendMode.SCREEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SUBTRACT = ["SUBTRACT",13];
openfl_display_BlendMode.SUBTRACT.toString = $estr;
openfl_display_BlendMode.SUBTRACT.__enum__ = openfl_display_BlendMode;
var openfl_display_CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__ : true, __constructs__ : ["NONE","ROUND","SQUARE"] };
openfl_display_CapsStyle.NONE = ["NONE",0];
openfl_display_CapsStyle.NONE.toString = $estr;
openfl_display_CapsStyle.NONE.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.ROUND = ["ROUND",1];
openfl_display_CapsStyle.ROUND.toString = $estr;
openfl_display_CapsStyle.ROUND.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.SQUARE = ["SQUARE",2];
openfl_display_CapsStyle.SQUARE.toString = $estr;
openfl_display_CapsStyle.SQUARE.__enum__ = openfl_display_CapsStyle;
var openfl_display_FrameLabel = function() { };
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = true;
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_display_FrameLabel
});
var openfl_display_GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : true, __constructs__ : ["RADIAL","LINEAR"] };
openfl_display_GradientType.RADIAL = ["RADIAL",0];
openfl_display_GradientType.RADIAL.toString = $estr;
openfl_display_GradientType.RADIAL.__enum__ = openfl_display_GradientType;
openfl_display_GradientType.LINEAR = ["LINEAR",1];
openfl_display_GradientType.LINEAR.toString = $estr;
openfl_display_GradientType.LINEAR.__enum__ = openfl_display_GradientType;
var openfl_display_Graphics = function() {
	this.__visible = true;
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = [];
	this.__commands = [];
	this.__halfStrokeWidth = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__hardware = true;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = true;
openfl_display_Graphics.prototype = {
	beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.push(openfl_display_DrawCommand.BeginFill(color & 16777215,alpha));
		if(alpha > 0) this.__visible = true;
	}
	,clear: function() {
		this.__commands = [];
		this.__halfStrokeWidth = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__hardware = true;
		this.moveTo(0,0);
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl_display_DrawCommand.DrawRect(x,y,width,height));
		this.set___dirty(true);
	}
	,endFill: function() {
		this.__commands.push(openfl_display_DrawCommand.EndFill);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.push(openfl_display_DrawCommand.MoveTo(x,y));
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = this.__bounds.transform(matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var bounds = this.__bounds.transform(matrix);
		return x > bounds.x && y > bounds.y && x <= bounds.get_right() && y <= bounds.get_bottom();
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_DrawCommand = $hxClasses["openfl.display.DrawCommand"] = { __ename__ : true, __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CubicCurveTo","CurveTo","DrawCircle","DrawEllipse","DrawRect","DrawRoundRect","DrawTiles","DrawTriangles","EndFill","LineStyle","LineBitmapStyle","LineGradientStyle","LineTo","MoveTo","DrawPathC","OverrideMatrix"] };
openfl_display_DrawCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.BeginGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.CubicCurveTo = function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) { var $x = ["CubicCurveTo",3,controlX1,controlY1,controlX2,controlY2,anchorX,anchorY]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",4,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawCircle = function(x,y,radius) { var $x = ["DrawCircle",5,x,y,radius]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawEllipse = function(x,y,width,height) { var $x = ["DrawEllipse",6,x,y,width,height]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawRect = function(x,y,width,height) { var $x = ["DrawRect",7,x,y,width,height]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawRoundRect = function(x,y,width,height,rx,ry) { var $x = ["DrawRoundRect",8,x,y,width,height,rx,ry]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",9,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",10,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.EndFill = ["EndFill",11];
openfl_display_DrawCommand.EndFill.toString = $estr;
openfl_display_DrawCommand.EndFill.__enum__ = openfl_display_DrawCommand;
openfl_display_DrawCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",12,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.LineBitmapStyle = function(bitmap,matrix,repeat,smooth) { var $x = ["LineBitmapStyle",13,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.LineGradientStyle = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["LineGradientStyle",14,type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.LineTo = function(x,y) { var $x = ["LineTo",15,x,y]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.MoveTo = function(x,y) { var $x = ["MoveTo",16,x,y]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawPathC = function(commands,data,winding) { var $x = ["DrawPathC",17,commands,data,winding]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",18,matrix]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
var openfl_display_GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : true, __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl_display_GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl_display_GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl_display_GraphicsPathWinding.EVEN_ODD.__enum__ = openfl_display_GraphicsPathWinding;
openfl_display_GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl_display_GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl_display_GraphicsPathWinding.NON_ZERO.__enum__ = openfl_display_GraphicsPathWinding;
var openfl_display_InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : true, __constructs__ : ["RGB","LINEAR_RGB"] };
openfl_display_InterpolationMethod.RGB = ["RGB",0];
openfl_display_InterpolationMethod.RGB.toString = $estr;
openfl_display_InterpolationMethod.RGB.__enum__ = openfl_display_InterpolationMethod;
openfl_display_InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl_display_InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl_display_InterpolationMethod.LINEAR_RGB.__enum__ = openfl_display_InterpolationMethod;
var openfl_display_JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__ : true, __constructs__ : ["MITER","ROUND","BEVEL"] };
openfl_display_JointStyle.MITER = ["MITER",0];
openfl_display_JointStyle.MITER.toString = $estr;
openfl_display_JointStyle.MITER.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.ROUND = ["ROUND",1];
openfl_display_JointStyle.ROUND.toString = $estr;
openfl_display_JointStyle.ROUND.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.BEVEL = ["BEVEL",2];
openfl_display_JointStyle.BEVEL.toString = $estr;
openfl_display_JointStyle.BEVEL.__enum__ = openfl_display_JointStyle;
var openfl_display_LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : true, __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl_display_LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl_display_LineScaleMode.HORIZONTAL.toString = $estr;
openfl_display_LineScaleMode.HORIZONTAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NONE = ["NONE",1];
openfl_display_LineScaleMode.NONE.toString = $estr;
openfl_display_LineScaleMode.NONE.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NORMAL = ["NORMAL",2];
openfl_display_LineScaleMode.NORMAL.toString = $estr;
openfl_display_LineScaleMode.NORMAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl_display_LineScaleMode.VERTICAL.toString = $estr;
openfl_display_LineScaleMode.VERTICAL.__enum__ = openfl_display_LineScaleMode;
var openfl_display_Loader = function() {
	openfl_display_Sprite.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = true;
openfl_display_Loader.__super__ = openfl_display_Sprite;
openfl_display_Loader.prototype = $extend(openfl_display_Sprite.prototype,{
	load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		if(extension.indexOf("?") != -1) extension = extension.split("?")[0];
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		openfl_display_BitmapData.fromFile(request.url,$bind(this,this.BitmapData_onLoad),$bind(this,this.BitmapData_onError));
	}
	,loadBytes: function(buffer) {
		openfl_display_BitmapData.fromBytes(buffer,null,$bind(this,this.BitmapData_onLoad));
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl_events_Event(openfl_events_Event.UNLOAD);
			event.currentTarget = this;
			this.dispatchEvent(event);
		}
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl_events_Event(openfl_events_Event.COMPLETE);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function() {
		var event = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : true, __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl_display_PixelSnapping.NEVER = ["NEVER",0];
openfl_display_PixelSnapping.NEVER.toString = $estr;
openfl_display_PixelSnapping.NEVER.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.AUTO = ["AUTO",1];
openfl_display_PixelSnapping.AUTO.toString = $estr;
openfl_display_PixelSnapping.AUTO.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl_display_PixelSnapping.ALWAYS.toString = $estr;
openfl_display_PixelSnapping.ALWAYS.__enum__ = openfl_display_PixelSnapping;
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl_Lib.current.addChild(display);
		if(js_Boot.__instanceof(display,NMEPreloader)) (js_Boot.__cast(display , NMEPreloader)).onInit();
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = true;
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe_io_Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) this.total++;
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl_media_Sound();
			sound1.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.sound_onComplete));
			sound1.addEventListener(openfl_events_IOErrorEvent.IO_ERROR,$bind(this,this.sound_onIOError));
			sound1.load(new openfl_net_URLRequest(soundName + ".ogg"));
		}
		lime_app_Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
			(js_Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else lime_app_Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) (js_Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
		openfl_Lib.current.removeChild(this.display);
		openfl_Lib.current.stage.set_focus(null);
		this.display = null;
		lime_app_Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : true, __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl_display_SpreadMethod.REPEAT = ["REPEAT",0];
openfl_display_SpreadMethod.REPEAT.toString = $estr;
openfl_display_SpreadMethod.REPEAT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.REFLECT = ["REFLECT",1];
openfl_display_SpreadMethod.REFLECT.toString = $estr;
openfl_display_SpreadMethod.REFLECT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.PAD = ["PAD",2];
openfl_display_SpreadMethod.PAD.toString = $estr;
openfl_display_SpreadMethod.PAD.__enum__ = openfl_display_SpreadMethod;
var openfl_display_Stage = function(width,height,color) {
	openfl_display_DisplayObjectContainer.call(this);
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__displayState = openfl_display_StageDisplayState.NORMAL;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.stageWidth = width;
	this.stageHeight = height;
	this.stage = this;
	this.align = openfl_display_StageAlign.TOP_LEFT;
	this.allowsFullScreen = false;
	this.quality = openfl_display_StageQuality.HIGH;
	this.scaleMode = openfl_display_StageScaleMode.NO_SCALE;
	this.stageFocusRect = true;
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__mouseOutStack = [];
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	this3.length;
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = true;
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	globalToLocal: function(pos) {
		return pos;
	}
	,init: function(context) {
		switch(context[1]) {
		case 0:
			var gl = context[2];
			this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this.stageWidth,this.stageHeight,gl);
			break;
		case 1:
			var context1 = context[2];
			this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this.stageWidth,this.stageHeight,context1);
			break;
		case 2:
			var element = context[2];
			this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this.stageWidth,this.stageHeight,element);
			break;
		case 4:
			var cairo = context[2];
			this.__renderer = new openfl__$internal_renderer_cairo_CairoRenderer(this.stageWidth,this.stageHeight,cairo);
			break;
		default:
		}
	}
	,localToGlobal: function(pos) {
		return pos;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
	}
	,onGamepadButtonDown: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
	}
	,onGamepadButtonUp: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
	}
	,onGamepadConnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadConnect(gamepad);
	}
	,onGamepadDisconnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
	}
	,onKeyDown: function(keyCode,modifier) {
		this.__onKey(openfl_events_KeyboardEvent.KEY_DOWN,keyCode,modifier);
	}
	,onKeyUp: function(keyCode,modifier) {
		this.__onKey(openfl_events_KeyboardEvent.KEY_UP,keyCode,modifier);
	}
	,onMouseDown: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_DOWN;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_DOWN;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseMove: function(x,y) {
		this.__onMouse(openfl_events_MouseEvent.MOUSE_MOVE,x,y,0);
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_UP;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_UP;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_UP;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseWheel: function(deltaX,deltaY) {
		this.__onMouseWheel(deltaX,deltaY);
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		var event = new openfl_events_TextEvent(openfl_events_TextEvent.TEXT_INPUT,true,false,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__fireEvent(event,stack);
		} else this.__broadcast(event,true);
	}
	,onTouchMove: function(x,y,id) {
		this.__onTouch("touchMove",x,y,id);
	}
	,onTouchEnd: function(x,y,id) {
		this.__onTouch("touchEnd",x,y,id);
	}
	,onTouchStart: function(x,y,id) {
		this.__onTouch("touchBegin",x,y,id);
	}
	,onWindowActivate: function() {
		var event = new openfl_events_Event(openfl_events_Event.ACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
		var event = new openfl_events_Event(openfl_events_Event.DEACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowEnter: function() {
	}
	,onWindowFocusIn: function() {
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFocusOut: function() {
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.MOUSE_LEAVE));
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
		this.stageWidth = width;
		this.stageHeight = height;
		if(this.__renderer != null) this.__renderer.resize(width,height);
		var event = new openfl_events_Event(openfl_events_Event.RESIZE);
		this.__broadcast(event,false);
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
		if(this.__rendering) return;
		this.__rendering = true;
		this.__broadcast(new openfl_events_Event(openfl_events_Event.ENTER_FRAME),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl_events_Event(openfl_events_Event.RENDER),true);
		}
		this.__renderable = true;
		this.__update(false,true);
		if(this.__renderer != null) {
			switch(context[1]) {
			case 4:
				var cairo = context[2];
				(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
				this.__renderer.renderSession.cairo = cairo;
				break;
			default:
			}
			this.__renderer.render(this);
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = openfl_events_EventPhase.CAPTURING_PHASE;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCancelled) return;
			}
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
			if(event.__isCancelled) return;
			if(event.bubbles) {
				event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCancelled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) stack.push(this);
		return true;
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			var keyCode1 = openfl_ui_Keyboard.convertKeyCode(keyCode);
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,false,charCode,keyCode1,null,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) return;
		this.__mouseX = x;
		this.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl_geom_Point(x,y);
		if(this.__hitTest(x,y,false,stack,true)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(type == openfl_events_MouseEvent.MOUSE_DOWN) this.set_focus(target);
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		var clickType;
		switch(type) {
		case "mouseUp":
			clickType = openfl_events_MouseEvent.CLICK;
			break;
		case "middleMouseUp":
			clickType = openfl_events_MouseEvent.MIDDLE_CLICK;
			break;
		case "rightMouseUp":
			clickType = openfl_events_MouseEvent.RIGHT_CLICK;
			break;
		default:
			clickType = null;
		}
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == openfl_events_MouseEvent.MOUSE_UP && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.DOUBLE_CLICK,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		var cursor = null;
		var _g = 0;
		while(_g < stack.length) {
			var target1 = stack[_g];
			++_g;
			cursor = target1.__getCursor();
			if(cursor != null) {
				lime_ui_Mouse.set_cursor(cursor);
				break;
			}
		}
		if(cursor == null) lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		var _g1 = 0;
		var _g11 = this.__mouseOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(HxOverrides.indexOf(stack,target2,0) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target2);
				var localPoint = target2.globalToLocal(targetPoint);
				target2.dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OUT,false,false,localPoint.x,localPoint.y,target2));
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__mouseOutStack,target3,0) == -1) {
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OVER)) {
					var localPoint1 = target3.globalToLocal(targetPoint);
					target3.dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OVER,false,false,localPoint1.x,localPoint1.y,target3));
				}
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OUT)) this.__mouseOutStack.push(target3);
			}
		}
		if(this.__dragObject != null) this.__drag(targetPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		if(!this.__hitTest(x,y,false,stack,true)) stack = [this];
		var target = stack[stack.length - 1];
		var targetPoint = new openfl_geom_Point(x,y);
		var delta = deltaY | 0;
		this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.MOUSE_WHEEL,0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,delta),stack);
	}
	,__onTouch: function(type,x,y,id) {
		var point = new openfl_geom_Point(x,y);
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		var __stack = [];
		var mouseType;
		switch(type) {
		case "touchBegin":
			mouseType = openfl_events_MouseEvent.MOUSE_DOWN;
			break;
		case "touchMove":
			mouseType = openfl_events_MouseEvent.MOUSE_MOVE;
			break;
		case "touchEnd":
			mouseType = openfl_events_MouseEvent.MOUSE_UP;
			break;
		default:
			mouseType = null;
		}
		if(this.__hitTest(x,y,false,__stack,true)) {
			var target = __stack[__stack.length - 1];
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,localPoint,target);
			touchEvent.touchPointID = id;
			touchEvent.isPrimaryTouchPoint = true;
			var mouseEvent = openfl_events_MouseEvent.__create(mouseType,0,this.__mouseX,this.__mouseY,localPoint,target);
			mouseEvent.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent,__stack);
			this.__fireEvent(mouseEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,point,this);
			touchEvent1.touchPointID = id;
			touchEvent1.isPrimaryTouchPoint = true;
			var mouseEvent1 = openfl_events_MouseEvent.__create(mouseType,0,this.__mouseX,this.__mouseY,point,this);
			mouseEvent1.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent1,[this.stage]);
			this.__fireEvent(mouseEvent1,[this.stage]);
		}
		if(type == "touchMove" && this.__dragObject != null) this.__drag(point);
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,set_displayState: function(value) {
		switch(value[1]) {
		case 0:
			openfl_Lib.application.windows[0].set_fullscreen(false);
			break;
		default:
			openfl_Lib.application.windows[0].set_fullscreen(true);
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			if(this.__focus != null) {
				var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,value,false,0);
				this.__stack = [];
				this.__focus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(value != null) {
				var event1 = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,this.__focus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
			this.__focus = value;
		}
		return this.__focus;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",set_color:"set_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = true;
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_display_Stage3D
});
var openfl_display_StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : true, __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl_display_StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl_display_StageAlign.TOP_RIGHT.toString = $estr;
openfl_display_StageAlign.TOP_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl_display_StageAlign.TOP_LEFT.toString = $estr;
openfl_display_StageAlign.TOP_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP = ["TOP",2];
openfl_display_StageAlign.TOP.toString = $estr;
openfl_display_StageAlign.TOP.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.RIGHT = ["RIGHT",3];
openfl_display_StageAlign.RIGHT.toString = $estr;
openfl_display_StageAlign.RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.LEFT = ["LEFT",4];
openfl_display_StageAlign.LEFT.toString = $estr;
openfl_display_StageAlign.LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl_display_StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl_display_StageAlign.BOTTOM_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl_display_StageAlign.BOTTOM_LEFT.toString = $estr;
openfl_display_StageAlign.BOTTOM_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM = ["BOTTOM",7];
openfl_display_StageAlign.BOTTOM.toString = $estr;
openfl_display_StageAlign.BOTTOM.__enum__ = openfl_display_StageAlign;
var openfl_display_StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : true, __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl_display_StageDisplayState.NORMAL = ["NORMAL",0];
openfl_display_StageDisplayState.NORMAL.toString = $estr;
openfl_display_StageDisplayState.NORMAL.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl_display_StageDisplayState.FULL_SCREEN.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl_display_StageDisplayState;
var openfl_display_StageQuality = $hxClasses["openfl.display.StageQuality"] = { __ename__ : true, __constructs__ : ["BEST","HIGH","MEDIUM","LOW"] };
openfl_display_StageQuality.BEST = ["BEST",0];
openfl_display_StageQuality.BEST.toString = $estr;
openfl_display_StageQuality.BEST.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.HIGH = ["HIGH",1];
openfl_display_StageQuality.HIGH.toString = $estr;
openfl_display_StageQuality.HIGH.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.MEDIUM = ["MEDIUM",2];
openfl_display_StageQuality.MEDIUM.toString = $estr;
openfl_display_StageQuality.MEDIUM.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.LOW = ["LOW",3];
openfl_display_StageQuality.LOW.toString = $estr;
openfl_display_StageQuality.LOW.__enum__ = openfl_display_StageQuality;
var openfl_display_StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : true, __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl_display_StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl_display_StageScaleMode.SHOW_ALL.toString = $estr;
openfl_display_StageScaleMode.SHOW_ALL.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl_display_StageScaleMode.NO_SCALE.toString = $estr;
openfl_display_StageScaleMode.NO_SCALE.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl_display_StageScaleMode.NO_BORDER.toString = $estr;
openfl_display_StageScaleMode.NO_BORDER.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl_display_StageScaleMode.EXACT_FIT.toString = $estr;
openfl_display_StageScaleMode.EXACT_FIT.__enum__ = openfl_display_StageScaleMode;
var openfl_display_Tilesheet = function() { };
$hxClasses["openfl.display.Tilesheet"] = openfl_display_Tilesheet;
openfl_display_Tilesheet.__name__ = true;
openfl_display_Tilesheet.prototype = {
	__class__: openfl_display_Tilesheet
};
var openfl_display_TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__ : true, __constructs__ : ["NEGATIVE","NONE","POSITIVE"] };
openfl_display_TriangleCulling.NEGATIVE = ["NEGATIVE",0];
openfl_display_TriangleCulling.NEGATIVE.toString = $estr;
openfl_display_TriangleCulling.NEGATIVE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.NONE = ["NONE",1];
openfl_display_TriangleCulling.NONE.toString = $estr;
openfl_display_TriangleCulling.NONE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.POSITIVE = ["POSITIVE",2];
openfl_display_TriangleCulling.POSITIVE.toString = $estr;
openfl_display_TriangleCulling.POSITIVE.__enum__ = openfl_display_TriangleCulling;
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = openfl_events_EventPhase.AT_TARGET;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = true;
openfl_events_Event.prototype = {
	__class__: openfl_events_Event
};
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = true;
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = true;
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = true;
openfl_events__$EventDispatcher_Listener.prototype = {
	match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_EventPhase = $hxClasses["openfl.events.EventPhase"] = { __ename__ : true, __constructs__ : ["CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE"] };
openfl_events_EventPhase.CAPTURING_PHASE = ["CAPTURING_PHASE",0];
openfl_events_EventPhase.CAPTURING_PHASE.toString = $estr;
openfl_events_EventPhase.CAPTURING_PHASE.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.AT_TARGET = ["AT_TARGET",1];
openfl_events_EventPhase.AT_TARGET.toString = $estr;
openfl_events_EventPhase.AT_TARGET.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.BUBBLING_PHASE = ["BUBBLING_PHASE",2];
openfl_events_EventPhase.BUBBLING_PHASE.toString = $estr;
openfl_events_EventPhase.BUBBLING_PHASE.__enum__ = openfl_events_EventPhase;
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = true;
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_FocusEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = true;
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status) {
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = true;
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = true;
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = true;
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = true;
openfl_events_MouseEvent.__altKey = null;
openfl_events_MouseEvent.__buttonDown = null;
openfl_events_MouseEvent.__commandKey = null;
openfl_events_MouseEvent.__ctrlKey = null;
openfl_events_MouseEvent.__shiftKey = null;
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) delta = 0;
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_MouseEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = true;
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = true;
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,localX,localY,sizeX,sizeY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(sizeY == null) sizeY = 1;
	if(sizeX == null) sizeX = 1;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.pressure = 1;
	this.touchPointID = 0;
	this.isPrimaryTouchPoint = true;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = true;
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,local.x,local.y,null,null,null,false,false,false,false,0,null,0);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_TouchEvent
});
var openfl_filters_BitmapFilter = function() { };
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = true;
var openfl_geom_Matrix3D = function() { };
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = true;
openfl_geom_Matrix3D.prototype = {
	__class__: openfl_geom_Matrix3D
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.concatenatedMatrix = new openfl_geom_Matrix();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = true;
openfl_geom_Transform.prototype = {
	get_colorTransform: function() {
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			var matrix = new openfl_geom_Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return matrix;
		}
		return null;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {get_matrix:"get_matrix",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function() { };
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = true;
var openfl_media_ID3Info = function() { };
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = true;
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.length = 0;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = true;
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe_io_Path.withoutExtension(stream.url);
		if(!openfl_media_Sound.__registeredSounds.exists(this.__soundID)) {
			openfl_media_Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl_media_SoundTransform(1,0);
		var instance;
		if(loops > 1) instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops - 1,sndTransform.volume,sndTransform.pan); else instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,0,sndTransform.volume,sndTransform.pan);
		return new openfl_media_SoundChannel(instance);
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR));
		}
	}
	,__class__: openfl_media_Sound
});
var openfl_media_SoundChannel = function(soundInstance) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = true;
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	stop: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
		this.__soundInstance = null;
		this.__isValid = false;
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__soundInstance.getPosition();
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) return value;
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,source_onComplete: function() {
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function() { };
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = true;
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = true;
openfl_media_SoundTransform.prototype = {
	__class__: openfl_media_SoundTransform
};
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(openfl_net_URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = true;
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,lime_utils_ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,openfl_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime_utils_ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl_events_Event(openfl_events_Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl_events_Event(openfl_events_Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl_events_ProgressEvent(openfl_events_ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl_events_SecurityErrorEvent(openfl_events_SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl_events_HTTPStatusEvent(openfl_events_HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == openfl_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = openfl_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
var openfl_net_URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
openfl_net_URLLoaderDataFormat.BINARY = ["BINARY",0];
openfl_net_URLLoaderDataFormat.BINARY.toString = $estr;
openfl_net_URLLoaderDataFormat.BINARY.__enum__ = openfl_net_URLLoaderDataFormat;
openfl_net_URLLoaderDataFormat.TEXT = ["TEXT",1];
openfl_net_URLLoaderDataFormat.TEXT.toString = $estr;
openfl_net_URLLoaderDataFormat.TEXT.__enum__ = openfl_net_URLLoaderDataFormat;
openfl_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
openfl_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
openfl_net_URLLoaderDataFormat.VARIABLES.__enum__ = openfl_net_URLLoaderDataFormat;
var openfl_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = true;
openfl_net_URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,lime_utils_ByteArray)) {
			res = res.slice();
			res.push(new openfl_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = true;
openfl_net_URLRequestHeader.prototype = {
	__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = function() { };
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = true;
var openfl_system_LoaderContext = function() { };
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = true;
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = true;
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	__class__: openfl_text_Font
});
var openfl_text_GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : true, __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl_text_GridFitType.NONE = ["NONE",0];
openfl_text_GridFitType.NONE.toString = $estr;
openfl_text_GridFitType.NONE.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.PIXEL = ["PIXEL",1];
openfl_text_GridFitType.PIXEL.toString = $estr;
openfl_text_GridFitType.PIXEL.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl_text_GridFitType.SUBPIXEL.toString = $estr;
openfl_text_GridFitType.SUBPIXEL.__enum__ = openfl_text_GridFitType;
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__width = 100;
	this.__height = 100;
	this.__text = "";
	this.__dirtyBounds = true;
	this.__bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.__graphics = new openfl_display_Graphics();
	this.set_type(openfl_text_TextFieldType.DYNAMIC);
	this.set_autoSize(openfl_text_TextFieldAutoSize.NONE);
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.set_selectable(true);
	this.set_borderColor(0);
	this.set_border(false);
	this.set_backgroundColor(16777215);
	this.set_background(false);
	this.gridFitType = openfl_text_GridFitType.PIXEL;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.set_wordWrap(false);
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",openfl_text_TextFormatAlign.LEFT,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = true;
openfl_text_TextField.__defaultTextFormat = null;
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	getLineMetrics: function(lineIndex) {
		var lineWidth = openfl__$internal_renderer_canvas_CanvasTextField.getLineWidth(this,lineIndex);
		var lineHeight = this.get_textHeight();
		var ascender = lineHeight * 0.8;
		var descender = lineHeight * 0.2;
		var leading = 0;
		var margin;
		var _g = this.__textFormat.align;
		switch(_g[1]) {
		case 0:case 2:
			margin = 2;
			break;
		case 1:
			margin = this.get_width() - lineWidth - 2;
			break;
		case 3:
			margin = (this.get_width() - lineWidth) / 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
		this.__dirtyBounds = true;
	}
	,__getBounds: function(rect,matrix) {
		var bounds = this.get_bounds().transform(matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.type == openfl_text_TextFieldType.INPUT && this.selectable) return lime_ui_MouseCursor.TEXT; else return null;
	}
	,__getPosition: function(x,y) {
		if(x <= 2) return 0;
		var value = this.get_text();
		var text = value;
		var totalW = 2;
		var pos = text.length;
		if(x < openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(this,text) + 2) {
			var _g1 = 0;
			var _g = text.length;
			while(_g1 < _g) {
				var i = _g1++;
				totalW += openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(this,text.charAt(i));
				if(totalW >= x) {
					pos = i;
					break;
				}
			}
		}
		return pos;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var point = this.globalToLocal(new openfl_geom_Point(x,y));
		if(this.get_bounds().containsPoint(point)) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoTextField.render(this,renderSession);
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl__$internal_renderer_dom_DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),500);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) this.__cursorTimer.stop();
	}
	,input_onKeyUp: function(event) {
		this.__isKeyDown = false;
		if(event == null) event == window.event;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		if(this.__hiddenInput.selectionDirection == "backward") {
			this.__cursorPosition = this.__hiddenInput.selectionStart;
			this.__selectionStart = this.__hiddenInput.selectionEnd;
		} else {
			this.__cursorPosition = this.__hiddenInput.selectionEnd;
			this.__selectionStart = this.__hiddenInput.selectionStart;
		}
		this.__dirty = true;
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
	}
	,input_onKeyDown: function(event) {
		this.__isKeyDown = true;
		if(event == null) event == window.event;
		var keyCode = event.which;
		var isShift = event.shiftKey;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		if(this.__hiddenInput.selectionDirection == "backward") {
			this.__cursorPosition = this.__hiddenInput.selectionStart;
			this.__selectionStart = this.__hiddenInput.selectionEnd;
		} else {
			this.__cursorPosition = this.__hiddenInput.selectionEnd;
			this.__selectionStart = this.__hiddenInput.selectionStart;
		}
		this.__dirty = true;
	}
	,stage_onMouseMove: function(event) {
		if(this.__hasFocus && this.__selectionStart >= 0) {
			var localPoint = this.globalToLocal(new openfl_geom_Point(event.stageX,event.stageY));
			this.__cursorPosition = this.__getPosition(localPoint.x,localPoint.y);
			this.__dirty = true;
		}
	}
	,stage_onMouseUp: function(event) {
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			var localPoint = this.globalToLocal(new openfl_geom_Point(event.stageX,event.stageY));
			var upPos = this.__getPosition(localPoint.x,localPoint.y);
			var leftPos;
			var rightPos;
			leftPos = Std["int"](Math.min(this.__selectionStart,upPos));
			rightPos = Std["int"](Math.max(this.__selectionStart,upPos));
			this.__selectionStart = leftPos;
			this.__cursorPosition = rightPos;
			this.this_onFocusIn(null);
		}
	}
	,this_onAddedToStage: function(event) {
		this.addEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
		this.addEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
		this.__hiddenInput.addEventListener("keydown",$bind(this,this.input_onKeyDown),true);
		this.__hiddenInput.addEventListener("keyup",$bind(this,this.input_onKeyUp),true);
		this.__hiddenInput.addEventListener("input",$bind(this,this.input_onKeyUp),true);
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
		if(this.stage.get_focus() == this) this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.__cursorPosition < 0) {
			this.__cursorPosition = this.__text.length;
			this.__selectionStart = this.__cursorPosition;
		}
		this.__hiddenInput.focus();
		this.__hiddenInput.selectionStart = this.__selectionStart;
		this.__hiddenInput.selectionEnd = this.__cursorPosition;
		this.__stopCursorTimer();
		this.__startCursorTimer();
		this.__hasFocus = true;
		this.__dirty = true;
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,this_onFocusOut: function(event) {
		this.__cursorPosition = -1;
		this.__hasFocus = false;
		this.__stopCursorTimer();
		if(this.__hiddenInput != null) this.__hiddenInput.blur();
		this.__dirty = true;
	}
	,this_onMouseDown: function(event) {
		if(!this.selectable) return;
		var localPoint = this.globalToLocal(new openfl_geom_Point(event.stageX,event.stageY));
		this.__selectionStart = this.__getPosition(localPoint.x,localPoint.y);
		this.__cursorPosition = this.__selectionStart;
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,this_onRemovedFromStage: function(event) {
		this.removeEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
		this.removeEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
		this.this_onFocusOut(null);
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keydown",$bind(this,this.input_onKeyDown),true);
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keyup",$bind(this,this.input_onKeyUp),true);
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("input",$bind(this,this.input_onKeyUp),true);
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
		if(this.stage != null) this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		if(this.stage != null) this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,set_autoSize: function(value) {
		if(value != this.autoSize) {
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		return this.autoSize = value;
	}
	,set_background: function(value) {
		if(value != this.background) this.__dirty = true;
		return this.background = value;
	}
	,set_backgroundColor: function(value) {
		if(value != this.backgroundColor) this.__dirty = true;
		return this.backgroundColor = value;
	}
	,set_border: function(value) {
		if(value != this.border) {
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		return this.border = value;
	}
	,set_borderColor: function(value) {
		if(value != this.borderColor) this.__dirty = true;
		return this.borderColor = value;
	}
	,get_bounds: function() {
		if(!this.__dirtyBounds) return this.__bounds;
		if(this.autoSize != openfl_text_TextFieldAutoSize.NONE) {
			this.__bounds.width = this.get_textWidth() + 4 + (this.border?1:0);
			this.__bounds.height = this.get_textHeight() + 4 + (this.border?1:0);
		} else {
			this.__bounds.width = this.__width;
			this.__bounds.height = this.__height;
		}
		this.__dirtyBounds = false;
		return this.__bounds;
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		return value;
	}
	,get_height: function() {
		return this.get_bounds().height;
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_numLines: function() {
		if(this.get_text() != "" && this.get_text() != null) {
			var count = this.get_text().split("\n").length;
			if(this.__isHTML) count += this.get_text().split("<br>").length - 1;
			return count;
		}
		return 1;
	}
	,set_selectable: function(value) {
		if(!value && this.selectable && this.type == openfl_text_TextFieldType.INPUT) this.this_onRemovedFromStage(null);
		return this.selectable = value;
	}
	,get_text: function() {
		if(this.__isHTML) {
		}
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__text != value && this.__hiddenInput != null) {
			var selectionStart = this.__hiddenInput.selectionStart;
			var selectionEnd = this.__hiddenInput.selectionEnd;
			this.__hiddenInput.value = value;
			this.__hiddenInput.selectionStart = selectionStart;
			this.__hiddenInput.selectionEnd = selectionEnd;
		}
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		this.__ranges = null;
		this.__isHTML = false;
		return this.__text = value;
	}
	,get_textWidth: function() {
		return openfl__$internal_renderer_canvas_CanvasTextField.getLineWidth(this,-1);
	}
	,get_textHeight: function() {
		if(this.__canvas != null) return this.__textFormat.size * 1.185 * this.get_numLines() + (this.__textFormat.leading == null?0:this.__textFormat.leading) * this.get_numLines(); else if(this.__div != null) return this.__div.clientHeight; else {
			openfl__$internal_renderer_dom_DOMTextField.measureText(this);
			return this.__measuredHeight + this.__textFormat.size * 0.185;
		}
	}
	,set_type: function(value) {
		if(value != this.type) {
			if(value == openfl_text_TextFieldType.INPUT) openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode(this); else openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode(this);
			this.__dirty = true;
		}
		return this.type = value;
	}
	,get_width: function() {
		return this.get_bounds().width;
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,get_wordWrap: function() {
		return this.wordWrap;
	}
	,set_wordWrap: function(value) {
		return this.wordWrap = value;
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_textHeight:"get_textHeight",get_textWidth:"get_textWidth",get_numLines:"get_numLines",get_bounds:"get_bounds",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",set_text:"set_text",get_text:"get_text",set_selectable:"set_selectable",set_defaultTextFormat:"set_defaultTextFormat",set_borderColor:"set_borderColor",set_border:"set_border",set_backgroundColor:"set_backgroundColor",set_background:"set_background",set_autoSize:"set_autoSize"})
});
var openfl_text_TextFormatRange = function() { };
$hxClasses["openfl.text.TextFormatRange"] = openfl_text_TextFormatRange;
openfl_text_TextFormatRange.__name__ = true;
openfl_text_TextFormatRange.prototype = {
	__class__: openfl_text_TextFormatRange
};
var openfl_text_TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : true, __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl_text_TextFieldAutoSize.CENTER = ["CENTER",0];
openfl_text_TextFieldAutoSize.CENTER.toString = $estr;
openfl_text_TextFieldAutoSize.CENTER.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.LEFT = ["LEFT",1];
openfl_text_TextFieldAutoSize.LEFT.toString = $estr;
openfl_text_TextFieldAutoSize.LEFT.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.NONE = ["NONE",2];
openfl_text_TextFieldAutoSize.NONE.toString = $estr;
openfl_text_TextFieldAutoSize.NONE.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl_text_TextFieldAutoSize.RIGHT.toString = $estr;
openfl_text_TextFieldAutoSize.RIGHT.__enum__ = openfl_text_TextFieldAutoSize;
var openfl_text_TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__ : true, __constructs__ : ["DYNAMIC","INPUT"] };
openfl_text_TextFieldType.DYNAMIC = ["DYNAMIC",0];
openfl_text_TextFieldType.DYNAMIC.toString = $estr;
openfl_text_TextFieldType.DYNAMIC.__enum__ = openfl_text_TextFieldType;
openfl_text_TextFieldType.INPUT = ["INPUT",1];
openfl_text_TextFieldType.INPUT.toString = $estr;
openfl_text_TextFieldType.INPUT.__enum__ = openfl_text_TextFieldType;
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = true;
openfl_text_TextFormat.prototype = {
	clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text_TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : true, __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl_text_TextFormatAlign.LEFT = ["LEFT",0];
openfl_text_TextFormatAlign.LEFT.toString = $estr;
openfl_text_TextFormatAlign.LEFT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.RIGHT = ["RIGHT",1];
openfl_text_TextFormatAlign.RIGHT.toString = $estr;
openfl_text_TextFormatAlign.RIGHT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl_text_TextFormatAlign.JUSTIFY.toString = $estr;
openfl_text_TextFormatAlign.JUSTIFY.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.CENTER = ["CENTER",3];
openfl_text_TextFormatAlign.CENTER.toString = $estr;
openfl_text_TextFormatAlign.CENTER.__enum__ = openfl_text_TextFormatAlign;
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = true;
openfl_text_TextLineMetrics.prototype = {
	__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() { };
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = true;
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + (function($this) {
				var $r;
				switch(axis) {
				case 0:
					$r = "LEFT_X";
					break;
				case 1:
					$r = "LEFT_Y";
					break;
				case 2:
					$r = "RIGHT_X";
					break;
				case 3:
					$r = "RIGHT_Y";
					break;
				case 4:
					$r = "TRIGGER_LEFT";
					break;
				case 5:
					$r = "TRIGGER_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + axis + ")";
				}
				return $r;
			}(this)),-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = new openfl_ui_GameInputDevice(null,null);
	openfl_ui_GameInput.__devices.set(gamepad,device);
	openfl_ui_GameInput.numDevices = Lambda.count(openfl_ui_GameInput.__devices);
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_ADDED,null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		openfl_ui_GameInput.__devices.remove(gamepad);
		openfl_ui_GameInput.numDevices = Lambda.count(openfl_ui_GameInput.__devices);
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_REMOVED,null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) value = 0;
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = true;
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = true;
openfl_ui_GameInputDevice.prototype = {
	__class__: openfl_ui_GameInputDevice
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = true;
openfl_ui_Keyboard.convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) shift = false;
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) return key - 48 + 48;
		if(key >= 65 && key <= 90) return key - 65 + 97;
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) return key - 65 + 65;
	}
	if(key >= 96 && key <= 105) return key - 96 + 48;
	switch(key) {
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	case 46:
		return 127;
	case 13:
		return 13;
	case 8:
		return 8;
	}
	return 0;
};
var openfl_ui_MultitouchInputMode = $hxClasses["openfl.ui.MultitouchInputMode"] = { __ename__ : true, __constructs__ : ["NONE","TOUCH_POINT","GESTURE"] };
openfl_ui_MultitouchInputMode.NONE = ["NONE",0];
openfl_ui_MultitouchInputMode.NONE.toString = $estr;
openfl_ui_MultitouchInputMode.NONE.__enum__ = openfl_ui_MultitouchInputMode;
openfl_ui_MultitouchInputMode.TOUCH_POINT = ["TOUCH_POINT",1];
openfl_ui_MultitouchInputMode.TOUCH_POINT.toString = $estr;
openfl_ui_MultitouchInputMode.TOUCH_POINT.__enum__ = openfl_ui_MultitouchInputMode;
openfl_ui_MultitouchInputMode.GESTURE = ["GESTURE",2];
openfl_ui_MultitouchInputMode.GESTURE.toString = $estr;
openfl_ui_MultitouchInputMode.GESTURE.__enum__ = openfl_ui_MultitouchInputMode;
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
Slides.populateSlides();
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = true;
$hxClasses.Array = Array;
Array.__name__ = true;
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = (Function("return typeof ArrayBuffer != 'undefined' ? ArrayBuffer : null"))() || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = (Function("return typeof DataView != 'undefined' ? DataView : null"))() || js_html_compat_DataView;
var Uint8Array = (Function("return typeof Uint8Array != 'undefined' ? Uint8Array : null"))() || js_html_compat_Uint8Array._new;
var this1;
this1 = new Array(256);
lime_graphics_utils_ImageDataUtil.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_graphics_utils_ImageDataUtil.__alpha16[i] = i * 65536 / 255 | 0;
}
var this2;
this2 = new Array(510);
lime_graphics_utils_ImageDataUtil.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_graphics_utils_ImageDataUtil.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_graphics_utils_ImageDataUtil.__clamp[i2] = 255;
}
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
cocktail_core_css_parsers_CSSStyleParser._position = 0;
cocktail_core_graphics_BackgroundDrawer._box = new cocktail_core_geom_RectangleVO();
cocktail_core_graphics_BackgroundDrawer._destinationPoint = new cocktail_core_geom_PointVO(0.0,0.0);
cocktail_core_graphics_BackgroundDrawer._intersectionBounds = new cocktail_core_geom_RectangleVO();
cocktail_core_graphics_BorderDrawer._currentBorderBox = new cocktail_core_geom_RectangleVO();
cocktail_core_graphics_TextDrawer._destPoint = new cocktail_core_geom_PointVO(0,0);
cocktail_core_graphics_TextDrawer._renderRect = new cocktail_core_geom_RectangleVO();
cocktail_core_graphics_TextDrawer._decorationRect = new cocktail_core_geom_RectangleVO();
cocktail_core_graphics_TextDrawer.TEXT_DECORATION_THICKNESS = 1.0;
cocktail_core_linebox_LineBox._childBounds = new cocktail_core_geom_RectangleVO();
cocktail_core_linebox_LineBox._inlineBoxesBounds = new cocktail_core_geom_RectangleVO();
cocktail_core_linebox_TextInlineBox._bitmapBounds = new cocktail_core_geom_RectangleVO();
cocktail_core_renderer_BoxRenderer._intersectBounds = new cocktail_core_geom_RectangleVO();
cocktail_core_renderer_TextRenderer._intersectBounds = new cocktail_core_geom_RectangleVO();
cocktail_core_url_URL._parts = ["source","scheme","authority","userInfo","user","password","host","port","relative","path","directory","file","query","fragment"];
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
cocktail_port_platform_flash_$player_NativeText._matrix = new openfl_geom_Matrix();
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved.lt != null) h.setReserved("lt","<"); else h.h["lt"] = "<";
	if(__map_reserved.gt != null) h.setReserved("gt",">"); else h.h["gt"] = ">";
	if(__map_reserved.amp != null) h.setReserved("amp","&"); else h.h["amp"] = "&";
	if(__map_reserved.quot != null) h.setReserved("quot","\""); else h.h["quot"] = "\"";
	if(__map_reserved.apos != null) h.setReserved("apos","'"); else h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
js_Boot.__toStr = {}.toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime_Assets.cache = new lime_AssetCache();
lime_Assets.libraries = new haxe_ds_StringMap();
lime_Assets.initialized = false;
lime_app_Preloader.images = new haxe_ds_StringMap();
lime_app_Preloader.loaders = new haxe_ds_StringMap();
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.get_easeOut();
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
openfl_Assets.cache = new openfl_AssetCache();
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_Lib.current = new openfl_display_MovieClip();
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasTextField.__utf8_endline_code = 10;
openfl__$internal_renderer_opengl_GLRenderer.glContextId = 0;
openfl__$internal_renderer_opengl_GLRenderer.glContexts = [];
openfl__$internal_renderer_opengl_shaders2_Shader.UID = 0;
openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aTexCoord0"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5126,false,"aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition = new openfl_geom_Point();
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle();
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.UNLOAD = "unload";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_media_Sound.__registeredSounds = new haxe_ds_StringMap();
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
ApplicationMain.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports);
